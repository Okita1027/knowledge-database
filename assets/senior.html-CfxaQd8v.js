import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,b as a}from"./app-CJZ--YWM.js";const l={},o=a(`<h2 id="docker网络" tabindex="-1"><a class="header-anchor" href="#docker网络"><span>Docker网络</span></a></h2><p>Docker网络负责容器间的互联和端口映射，能够在容器IP变动时通过服务名直接进行网络通信而不受到影响</p><h3 id="相关命令" tabindex="-1"><a class="header-anchor" href="#相关命令"><span>相关命令</span></a></h3><ul><li><p><code>docker network ls</code>:显示所有可用网络及其驱动类型。</p></li><li><p><code>docker network inspect &lt;network_name_or_id&gt;</code>:查看指定网络的详细信息，包括子网、网关、容器连接信息等。</p></li><li><p><code>docker network create &lt;network_name&gt;</code>:使用默认桥接网络驱动创建新网络。</p></li><li><p><code>docker network create --driver &lt;driver_name&gt; &lt;network_name&gt;</code>:指定网络驱动类型创建网络（例如 <code>bridge</code>、<code>overlay</code>、<code>macvlan</code> 等）。</p><ul><li><code>--subnet &lt;subnet&gt;</code>：指定子网范围，例如 <code>192.168.1.0/24</code>。</li><li><code>--gateway &lt;gateway&gt;</code>：指定网关 IP。</li><li><code>--ip-range &lt;ip-range&gt;</code>：定义容器 IP 分配范围。</li><li><code>--opt &lt;key&gt;=&lt;value&gt;</code>：配置网络驱动的自定义选项。</li><li><code>--aux-address</code>：为网络中的特定服务保留IP地址。</li></ul></li><li><p><code>docker network rm &lt;network_name_or_id&gt;</code>:删除指定的 Docker 网络，删除前需确保没有容器连接到该网络。</p></li><li><p><code>docker network connect &lt;network_name&gt; &lt;container_name_or_id&gt;</code>:将已运行的容器连接到指定网络。</p><ul><li><code>--ip &lt;ip_address&gt;</code>：指定容器在该网络中的 IP 地址。</li><li><code>--alias &lt;alias_name&gt;</code>：为容器指定网络别名。</li></ul></li><li><p><code>docker network disconnect &lt;network_name&gt; &lt;container_name_or_id&gt;</code>:将容器从指定网络中断开。</p></li><li><p><code>docker run --network &lt;network_name&gt; &lt;image_name&gt;</code>:在容器启动时指定网络模式</p><ul><li><code>bridge</code>：桥接网络（默认网络）。</li><li><code>host</code>：主机网络。</li><li><code>none</code>：无网络。</li><li>自定义网络名。</li></ul></li></ul><h3 id="网络类型" tabindex="-1"><a class="header-anchor" href="#网络类型"><span>网络类型</span></a></h3><h4 id="bridge" tabindex="-1"><a class="header-anchor" href="#bridge"><span>bridge</span></a></h4><p>Docker安装启动后会在宿主主机上创建一个名为 docker0 的虚拟网桥，处于七层网络模型的数据链路层，后续每当我们创建一个新的docker容器，在不指定容器网络模式的情况下，docker会通过 docker0 与主机的网络连接，docker0 相当于网桥。</p><ul><li>每个连接到这个网桥的容器都会被分配一个私有IP地址。</li><li>桥接网络允许容器之间通过容器名称或容器IP进行相互通信。</li><li>容器可以通过端口映射的方式与宿主机外的网络通信。</li></ul><p>**用途：**适合单机上运行的独立应用容器，可以通过 IP 或端口暴露给外部。</p><p><strong>用法：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create my_bridge_network
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>my_bridge_network <span class="token parameter variable">--name</span> container_name image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原理：</strong></p><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://datatracker.ietf.org/doc/html/rfc1918" target="_blank" rel="noopener noreferrer">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><h4 id="host" tabindex="-1"><a class="header-anchor" href="#host"><span>host</span></a></h4><p><strong>特点</strong>：</p><ul><li>与主机共享网络栈，容器的端口直接暴露在主机的网络上，在容器中运行的服务看起来就像是直接在宿主机上运行的一样。</li><li>减少了网络栈的开销，适合需要直接与外部网络通信的应用。</li><li>容器与主机完全共享端口，端口冲突问题需要管理。</li><li>由于没有网络命名空间的隔离，网络性能通常更好，因为没有额外的网络地址转换（NAT）。</li></ul><p><strong>用途</strong>：</p><ul><li>当需要容器中的应用程序直接绑定到宿主机的特定端口（尤其是特权端口，如80、443等）时，host模式非常方便。</li><li>当应用程序对网络性能有极高要求时，使用host模式可以减少网络层的抽象，提供更好的网络性能。</li><li>在进行网络调试时，使用host模式可以更容易地观察和分析网络流量，因为不需要考虑容器网络与宿主机网络之间的映射关系。</li></ul><p><strong>用法</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--network</span> <span class="token function">host</span> <span class="token parameter variable">--name</span> container_name image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="none" tabindex="-1"><a class="header-anchor" href="#none"><span>none</span></a></h4><p><strong>特点</strong>：容器没有任何网络接口，只有回环接口。</p><p><strong>用途</strong>：适用于不需要网络功能的安全容器，或对网络完全隔离的测试。</p><p><strong>用法</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--network</span> none <span class="token parameter variable">--name</span> container_name image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>container</span></a></h4><p><strong>特点</strong>：</p><ul><li>网络命名空间共享：新创建的容器不会获得自己的网络命名空间，而是与指定的容器共享同一个网络命名空间。</li><li>网络配置共享：两个容器将共享网络接口、IP地址、MAC地址等网络配置。</li><li>端口和协议共享：由于网络命名空间共享，所以两个容器不能绑定相同的端口，因为它们实际上是在同一个网络命名空间内。</li><li>隔离性降低：使用容器模式会降低容器之间的隔离性，因为它们共享网络资源。</li></ul><p><strong>用途：</strong></p><ul><li>服务发现和通信：当你想要两个容器紧密协作，并且它们需要直接进行网络通信时，可以使用容器模式。</li><li>资源共享：例如，如果你有一个容器运行了数据库服务，另一个容器需要直接访问该数据库，而不想通过外部网络接口，可以使用容器模式。</li></ul><p><strong>用法</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 启动第一个容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> container1 <span class="token parameter variable">-d</span> your-image
<span class="token comment">#启动第二个容器并指定使用container1的网络命名空间</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> container2 <span class="token parameter variable">--network</span> container:container1 <span class="token parameter variable">-d</span> your-image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>端口冲突：由于两个容器共享相同的网络命名空间，它们不能绑定到相同的端口，否则会发生冲突。</li><li>安全性：容器模式降低了网络隔离性，因此如果两个容器中有一个受到攻击，另一个也可能受到影响。</li><li>网络配置：共享网络命名空间的容器将共享相同的网络配置，这意味着如果一个容器修改了网络配置，另一个也会受到影响。</li></ul><h4 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络"><span>自定义网络</span></a></h4><p>允许用户创建具有特定配置的网络，以满足容器化应用程序的特定需求。自定义网络提供了比默认桥接网络更多的控制，包括但不限于静态IP分配、容器间通信、网络隔离和自定义网络驱动。使用方法参照上面的 “相关命令”。</p><h2 id="高级网络配置" tabindex="-1"><a class="header-anchor" href="#高级网络配置"><span>高级网络配置</span></a></h2><h3 id="容器访问控制" tabindex="-1"><a class="header-anchor" href="#容器访问控制"><span>容器访问控制</span></a></h3><p>容器的访问控制，主要通过 Linux 上的 <code>iptables</code> 防火墙进行管理和实现。<code>iptables</code> 是 Linux 上默认的防火墙软件，在大部分发行版中都自带。</p><h4 id="容器访问外部网络" tabindex="-1"><a class="header-anchor" href="#容器访问外部网络"><span>容器访问外部网络</span></a></h4><p>容器要想访问外部网络，需要本地系统的转发支持。在Linux 系统中，检查转发是否打开。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sysctl</span> net.ipv4.ip_forward
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果为 0，说明没有开启转发，则需要手动打开。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果在启动 Docker 服务的时候设定 <code>--ip-forward=true</code>, Docker 就会自动设定系统的 <code>ip_forward</code> 参数为 1。</p><h4 id="容器之间访问" tabindex="-1"><a class="header-anchor" href="#容器之间访问"><span>容器之间访问</span></a></h4><p>容器之间相互访问，需要两方面的支持。</p><ul><li>容器的网络拓扑是否已经互联。默认情况下，所有容器都会被连接到 <code>docker0</code> 网桥上。</li><li>本地系统的防火墙软件 <code>--iptables</code> 是否允许通过。</li></ul><h4 id="访问所有端口" tabindex="-1"><a class="header-anchor" href="#访问所有端口"><span>访问所有端口</span></a></h4><p>当启动 Docker 服务（即 dockerd）的时候，默认会添加一条转发策略到本地主机 iptables 的 FORWARD 链上。策略为通过（<code>ACCEPT</code>）还是禁止（<code>DROP</code>）取决于配置<code>--icc=true</code>（缺省值）还是 <code>--icc=false</code>。当然，如果手动指定 <code>--iptables=false</code> 则不会添加 <code>iptables</code> 规则。</p><p>可见，默认情况下，不同容器之间是允许网络互通的。如果为了安全考虑，可以在 <code>/etc/docker/daemon.json</code> 文件中配置 <code>{&quot;icc&quot;: false}</code> 来禁止它。</p><blockquote><p><code>/etc/docker/daemon.json</code> 文件在安装 Docker 后并不是自动创建的，只有在你需要自定义 Docker 的配置时，才会手动创建这个文件。默认情况下，Docker 会使用内置的默认设置。</p></blockquote><h4 id="访问指定端口" tabindex="-1"><a class="header-anchor" href="#访问指定端口"><span>访问指定端口</span></a></h4><p>在通过 <code>-icc=false</code> 关闭网络访问后，还可以通过 <code>--link=CONTAINER_NAME:ALIAS</code> 选项来访问容器的开放端口。</p><p>例如，在启动 Docker 服务时，可以同时使用 <code>icc=false --iptables=true</code> 参数来关闭允许相互的网络访问，并让 Docker 可以修改系统中的 <code>iptables</code> 规则。</p><p>此时，系统中的 <code>iptables</code> 规则可能是类似</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iptables <span class="token parameter variable">-nL</span>
<span class="token punctuation">..</span>.
Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DROP       all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，启动容器（<code>docker run</code>）时使用 <code>--link=CONTAINER_NAME:ALIAS</code> 选项。Docker 会在 <code>iptable</code> 中为 两个容器分别添加一条 <code>ACCEPT</code> 规则，允许相互访问开放的端口（取决于 <code>Dockerfile</code> 中的 <code>EXPOSE</code> 指令）。</p><p>当添加了 <code>--link=CONTAINER_NAME:ALIAS</code> 选项后，添加了 <code>iptables</code> 规则。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iptables <span class="token parameter variable">-nL</span>
<span class="token punctuation">..</span>.
Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
ACCEPT     tcp  --  <span class="token number">172.17</span>.0.2           <span class="token number">172.17</span>.0.3           tcp spt:80
ACCEPT     tcp  --  <span class="token number">172.17</span>.0.3           <span class="token number">172.17</span>.0.2           tcp dpt:80
DROP       all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<code>--link=CONTAINER_NAME:ALIAS</code> 中的 <code>CONTAINER_NAME</code> 目前必须是 Docker 分配的名字，或使用 <code>--name</code> 参数指定的名字。主机名则不会被识别。</p></blockquote><h3 id="端口映射实现" tabindex="-1"><a class="header-anchor" href="#端口映射实现"><span>端口映射实现</span></a></h3><p>默认情况下，容器可以主动访问到外部网络的连接，但是外部网络无法访问到容器。</p><h4 id="容器访问外部实现" tabindex="-1"><a class="header-anchor" href="#容器访问外部实现"><span>容器访问外部实现</span></a></h4><p>容器所有到外部网络的连接，源地址都会被 NAT 成本地系统的 IP 地址。这是使用 <code>iptables</code> 的源地址伪装操作实现的。</p><p>查看主机的 NAT 规则：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-nL</span>
<span class="token punctuation">..</span>.
Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
MASQUERADE  all  --  <span class="token number">172.17</span>.0.0/16       <span class="token operator">!</span><span class="token number">172.17</span>.0.0/16
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述规则将所有源地址在 <code>172.17.0.0/16</code> 网段，目标地址为其他网段（外部网络）的流量动态伪装为从系统网卡发出。MASQUERADE 跟传统 SNAT 的好处是它能动态从网卡获取地址。</p><h4 id="外部访问容器实现" tabindex="-1"><a class="header-anchor" href="#外部访问容器实现"><span>外部访问容器实现</span></a></h4><p>容器允许外部访问，可以在 <code>docker run</code> 时候通过 <code>-p</code> 或 <code>-P</code> 参数来启用。</p><p>不管用那种办法，其实也是在本地的 <code>iptable</code> 的 nat 表中添加相应的规则。</p><p>使用 <code>-P</code> 时：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-nL</span>
<span class="token punctuation">..</span>.
Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DNAT       tcp  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:49153 to:172.17.0.2:80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>-p 80:80</code> 时：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-nL</span>
Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DNAT       tcp  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:80 to:172.17.0.2:80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><ul><li><p>这里的规则映射了 <code>0.0.0.0</code>，意味着将接受主机来自所有接口的流量。用户可以通过 <code>-p IP:host_port:container_port</code> 或 <code>-p IP:port</code> 来指定允许访问容器的主机上的 IP、接口等，以制定更严格的规则。</p></li><li><p>如果希望永久绑定到某个固定的 IP 地址，可以在 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中添加如下内容</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;ip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0.0&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h3 id="配置docker0网桥" tabindex="-1"><a class="header-anchor" href="#配置docker0网桥"><span>配置docker0网桥</span></a></h3><p>Docker 服务默认会创建一个 <code>docker0</code> 网桥（其上有一个 <code>docker0</code> 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p><p>Docker 默认指定了 <code>docker0</code> 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置。</p><ul><li><code>--bip=CIDR</code> IP 地址加掩码格式，例如 192.168.1.5/24</li><li><code>--mtu=BYTES</code> 覆盖默认的 Docker mtu 配置</li></ul><p>也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。</p><p>由于目前 Docker 网桥是 Linux 网桥，用户可以使用 <code>brctl show</code> 来查看网桥和端口连接信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> brctl show
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.3a1d7362b4ee       no              veth65f9
                                             vethdda6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>brctl</code> 命令在 Debian、Ubuntu 中可以使用 <code>sudo apt-get install bridge-utils</code> 来安装。</p></blockquote><p>每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 <code>docker0</code> 接口的 IP 作为所有容器的默认网关。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--rm</span> base /bin/bash
$ <span class="token function">ip</span> addr show eth0
<span class="token number">24</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">32</span>:6f:e0:35:57:91 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::306f:e0ff:fe35:5791/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
$ <span class="token function">ip</span> route
default via <span class="token number">172.17</span>.42.1 dev eth0
<span class="token number">172.17</span>.0.0/16 dev eth0  proto kernel  scope <span class="token function">link</span>  src <span class="token number">172.17</span>.0.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义网桥" tabindex="-1"><a class="header-anchor" href="#自定义网桥"><span>自定义网桥</span></a></h3><p>除了默认的 <code>docker0</code> 网桥，用户也可以指定网桥来连接各个容器。</p><p>在启动 Docker 服务的时候，使用 <code>-b BRIDGE</code>或<code>--bridge=BRIDGE</code> 来指定使用的网桥。</p><p>如果服务已经运行，那需要先停止服务，并删除旧的网桥。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev docker0 down
$ <span class="token function">sudo</span> brctl delbr docker0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个网桥 <code>bridge0</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> brctl addbr bridge0
$ <span class="token function">sudo</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.5.1/24 dev bridge0
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev bridge0 up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看确认网桥创建并启动。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ip</span> addr show bridge0
<span class="token number">4</span>: bridge0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state UP group default
    link/ether <span class="token number">66</span>:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.5.1/24 scope global bridge0
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中添加如下内容，即可将 Docker 默认桥接到创建的网桥上。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;bridge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bridge0&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 Docker 服务,新建一个容器，可以看到它已经桥接到了 <code>bridge0</code> 上。</p><p>可以继续用 <code>brctl show</code> 命令查看桥接的信息。另外，在容器中可以使用 <code>ip addr</code> 和 <code>ip route</code> 命令来查看 IP 地址配置和路由信息。</p><h3 id="编辑网络配置文件" tabindex="-1"><a class="header-anchor" href="#编辑网络配置文件"><span>编辑网络配置文件</span></a></h3><p>Docker 1.2.0 开始支持在运行中的容器里编辑 <code>/etc/hosts</code>, <code>/etc/hostname</code> 和 <code>/etc/resolv.conf</code> 文件。</p><p>但是这些修改是临时的，只在运行的容器中保留，容器终止或重启后并不会被保存下来，也不会被 <code>docker commit</code> 提交。</p><h3 id="配置-http-https-网络代理" tabindex="-1"><a class="header-anchor" href="#配置-http-https-网络代理"><span>配置 HTTP/HTTPS 网络代理</span></a></h3><p>使用Docker的过程中，因为网络原因，通常需要使用 HTTP/HTTPS 代理来加速镜像拉取、构建和使用。下面是常见的三种场景。</p><h4 id="为-dockerd-设置网络代理" tabindex="-1"><a class="header-anchor" href="#为-dockerd-设置网络代理"><span>为 dockerd 设置网络代理</span></a></h4><p>&quot;docker pull&quot; 命令是由 dockerd 守护进程执行。而 dockerd 守护进程是由 systemd 管理。因此，如果需要在执行 &quot;docker pull&quot; 命令时使用 HTTP/HTTPS 代理，需要通过 systemd 配置。</p><ol><li>为dockerd创建配置文件夹</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/docker.service.d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>为 dockerd 创建 HTTP/HTTPS 网络代理的配置文件，文件路径是 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 。并在该文件中添加相关环境变量。</li></ol><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>[Service]
Environment=&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;
Environment=&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;
Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>刷新配置并重启docker服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为docker容器设置网络代理" tabindex="-1"><a class="header-anchor" href="#为docker容器设置网络代理"><span>为docker容器设置网络代理</span></a></h4><p>在容器运行阶段，如果需要使用 HTTP/HTTPS 代理，可以通过更改 docker 客户端配置，或者指定环境变量的方式。</p><ul><li>更改 docker 客户端配置：创建或更改 ~/.docker/config.json，并在该文件中添加相关配置</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
 <span class="token property">&quot;proxies&quot;</span><span class="token operator">:</span>
 <span class="token punctuation">{</span>
   <span class="token property">&quot;default&quot;</span><span class="token operator">:</span>
   <span class="token punctuation">{</span>
     <span class="token property">&quot;httpProxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://proxy.example.com:8080/&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;httpsProxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://proxy.example.com:8080/&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;noProxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost,127.0.0.1,.example.com&quot;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定环境变量：运行 &quot;docker run&quot; 命令时，指定相关环境变量。</li></ul><table><thead><tr><th style="text-align:center;">环境变量</th><th style="text-align:center;">docker run 示例</th></tr></thead><tbody><tr><td style="text-align:center;">HTTP_PROXY</td><td style="text-align:center;">--env HTTP_PROXY=&quot;http://proxy.example.com:8080/&quot;</td></tr><tr><td style="text-align:center;">HTTPS_PROXY</td><td style="text-align:center;">--env HTTPS_PROXY=&quot;http://proxy.example.com:8080/&quot;</td></tr><tr><td style="text-align:center;">NO_PROXY</td><td style="text-align:center;">--env NO_PROXY=&quot;localhost,127.0.0.1,.example.com&quot;</td></tr></tbody></table><h4 id="为docker-build过程设置网络代理" tabindex="-1"><a class="header-anchor" href="#为docker-build过程设置网络代理"><span>为docker build过程设置网络代理</span></a></h4><p>在容器构建阶段，如果需要使用 HTTP/HTTPS 代理，可以通过指定 &quot;docker build&quot; 的环境变量，或者在 Dockerfile 中指定环境变量的方式。</p><ul><li>使用 &quot;--build-arg&quot; 指定 &quot;docker build&quot; 的相关环境变量</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token punctuation">\\</span>
    --build-arg <span class="token string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span> <span class="token punctuation">\\</span>
    --build-arg <span class="token string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span> <span class="token punctuation">\\</span>
    --build-arg <span class="token string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 Dockerfile 中指定相关环境变量</li></ul><table><thead><tr><th style="text-align:center;">环境变量</th><th style="text-align:center;">Dockerfile 示例</th></tr></thead><tbody><tr><td style="text-align:center;">HTTP_PROXY</td><td style="text-align:center;">ENV HTTP_PROXY=&quot;http://proxy.example.com:8080/&quot;</td></tr><tr><td style="text-align:center;">HTTPS_PROXY</td><td style="text-align:center;">ENV HTTPS_PROXY=&quot;http://proxy.example.com:8080/&quot;</td></tr><tr><td style="text-align:center;">NO_PROXY</td><td style="text-align:center;">ENV NO_PROXY=&quot;localhost,127.0.0.1,.example.com&quot;</td></tr></tbody></table><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h2><h3 id="指定项目名称" tabindex="-1"><a class="header-anchor" href="#指定项目名称"><span>指定项目名称</span></a></h3><p>项目名称必须仅包含小写字母、十进制数字、短划线和 下划线，并且必须以小写字母或十进制数字开头。如果 项目目录或当前目录的 base name 违反此 constraint 的 Constraint 中，可以使用替代机制。</p><p><strong>命令行指定</strong></p><p>在运行 <code>docker-compose</code> 命令时，使用 <code>-p</code> 选项指定项目名称：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">-p</span> myproject up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，所有的容器、网络和卷都将以 <code>myproject</code> 作为前缀。例如，<code>web</code> 服务的容器名称可能会变为 <code>myproject_web_1</code>。</p><p><strong>通过环境变量指定</strong></p><p>使用 <code>COMPOSE_PROJECT_NAME</code> 环境变量指定项目名称。这在需要频繁运行同一项目时尤其有用。</p><ol><li><p>将 <code>COMPOSE_PROJECT_NAME</code> 变量添加到 <code>.env</code> 文件中：</p><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code>COMPOSE_PROJECT_NAME=myproject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>当 <code>docker-compose</code> 读取到 <code>.env</code> 文件中的 <code>COMPOSE_PROJECT_NAME</code> 变量时，会自动使用该名称作为项目名称。</p></li></ol><p><strong>直接在命令行设置环境变量</strong></p><p>在运行命令的同时设置环境变量 <code>COMPOSE_PROJECT_NAME</code>，这样无需修改 <code>.env</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">COMPOSE_PROJECT_NAME</span><span class="token operator">=</span>myproject <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设有一个 <code>docker-compose.yml</code> 文件如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以下命令启动服务并指定项目名称：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">-p</span> customproject up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的容器名称将包含前缀 <code>customproject</code>，如 <code>customproject_web_1</code> 和 <code>customproject_db_1</code>。</p><hr><p>每种方法的优先级（从最高到最低）如下：</p><ol><li>命令行标志。<code>-p</code></li><li><a href="https://docs.docker.com/compose/how-tos/environment-variables/envvars/" target="_blank" rel="noopener noreferrer">COMPOSE_PROJECT_NAME 环境变量</a>。</li><li>Compose 文件中的<a href="https://docs.docker.com/reference/compose-file/version-and-name/" target="_blank" rel="noopener noreferrer">顶级属性<code>name:</code></a>。如果在命令行中使用<code>-f</code>标志<a href="https://docs.docker.com/compose/how-tos/multiple-compose-files/merge/" target="_blank" rel="noopener noreferrer">指定多个 Compose 文件</a>，则为最后一个<code>name:</code></li><li>包含 Compose 文件的项目目录的基本名称。或者，如果您在命令行中使用<code>-f</code>标志<a href="https://docs.docker.com/compose/how-tos/multiple-compose-files/merge/" target="_blank" rel="noopener noreferrer">指定多个 Compose 文件</a>，则为第一个 Compose 文件的基名称。</li><li>如果未指定 Compose 文件，则为当前目录的基本名称。</li></ol><h3 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子"><span>生命周期钩子</span></a></h3><p>当 Docker Compose 运行容器时，它使用两个元素：<a href="https://github.com/manuals//engine/containers/run.md#default-command-and-options" target="_blank" rel="noopener noreferrer">ENTRYPOINT 和 COMMAND</a>, 来管理容器启动和停止时发生的情况。</p><p>但是，有时使用生命周期钩子单独处理这些任务会更容易 - 在容器启动后或停止之前运行的命令。</p><p>生命周期钩子特别有用，因为它们可以具有特殊权限 （例如以 root 用户身份运行），即使容器本身以较低的权限运行 为了安全。这意味着某些需要更高权限的任务可以在没有 损害容器的整体安全性。</p><h4 id="后启动钩子" tabindex="-1"><a class="header-anchor" href="#后启动钩子"><span>后启动钩子</span></a></h4><p>Post-start 钩子是在容器启动后运行的命令，但没有设置执行时间。</p><p>在提供的示例中：</p><ul><li>该钩子用于将卷的所有权更改为非 root 用户（因为卷默认使用 root 所有权创建）。</li><li>容器启动后，该命令将目录的所有权更改为 user 。<code>chown</code> <code>/data</code> <code>1001</code></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> backend
    <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token number">1001</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> data<span class="token punctuation">:</span>/data    
    <span class="token key atrule">post_start</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> chown <span class="token punctuation">-</span>R /data 1001<span class="token punctuation">:</span><span class="token number">1001</span>
        <span class="token key atrule">user</span><span class="token punctuation">:</span> root

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment"># a Docker volume is created with root ownership</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预停止钩子" tabindex="-1"><a class="header-anchor" href="#预停止钩子"><span>预停止钩子</span></a></h4><p>预停止钩子是在容器被特定命令（如<code>docker compose down</code>或使用<code>Ctrl+C</code>手动停止它）。 如果容器自行停止或突然被杀死，这些钩子将不会运行。</p><p>在以下示例中，在容器停止之前，脚本为 run 执行任何必要的清理。<code>./data_flush.sh</code></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> backend
    <span class="token key atrule">pre_stop</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> ./data_flush.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="profiles配置集" tabindex="-1"><a class="header-anchor" href="#profiles配置集"><span>profiles配置集</span></a></h3><p>用于定义和选择不同的配置文件（或称“配置集”）。通过 <code>profiles</code> 可以控制哪些服务在特定环境中运行（例如开发、测试或生产环境），从而更加灵活地管理不同环境的需求。</p><h4 id="配置profiles" tabindex="-1"><a class="header-anchor" href="#配置profiles"><span>配置profiles</span></a></h4><p>服务可以指定一个或多个 <code>profiles</code>。只有在运行时启用的配置文件中的服务才会启动。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.9&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> production
      <span class="token punctuation">-</span> staging

  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> production

  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> development

  <span class="token key atrule">debug</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">command</span><span class="token punctuation">:</span> sleep infinity
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的配置中：</p><ul><li><strong><code>web</code></strong> 和 <strong><code>db</code></strong> 服务在 <code>production</code> 配置下可用。</li><li><strong><code>redis</code></strong> 和 <strong><code>debug</code></strong> 服务仅在 <code>development</code> 配置下可用。</li></ul><h4 id="启用-停止profiles" tabindex="-1"><a class="header-anchor" href="#启用-停止profiles"><span>启用/停止profiles</span></a></h4><p>要运行指定 <code>profiles</code> 下的服务，可以使用 <code>COMPOSE_PROFILES</code> 环境变量或 <code>--profile</code> 选项。</p><p><strong>使用<code>COMPOSE_PROFILES</code>环境变量</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">COMPOSE_PROFILES</span><span class="token operator">=</span>production <span class="token function">docker-compose</span> up
<span class="token assign-left variable">COMPOSE_PROFILES</span><span class="token operator">=</span>production <span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令将启动/停止 <code>production</code> 配置文件中的服务，即 <code>web</code> 和 <code>db</code> 服务。</p><p><strong>使用<code>--profile</code>选项</strong></p><p>在<code>docker-compose</code>命名中直接指定<code>–profile</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--profile</span> development up
<span class="token function">docker-compose</span> <span class="token parameter variable">--profile</span> development down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将只启动/停止 <code>development</code> 配置文件中的服务，即 <code>redis</code> 和 <code>debug</code> 服务。</p><p><strong>在配置文件中设置</strong></p><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code>COMPOSE_PROFILES=development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>启动多个配置文件</strong></p><p>可以同时启用多个配置文件：</p><p>方法1：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">COMPOSE_PROFILES</span><span class="token operator">=</span>production,development <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法2：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--profile</span> production <span class="token parameter variable">--profile</span> development up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样将启动 <code>production</code> 和 <code>development</code> 配置文件中的所有服务，即 <code>web</code>、<code>db</code>、<code>redis</code> 和 <code>debug</code> 服务。</p><h3 id="控制启动顺序" tabindex="-1"><a class="header-anchor" href="#控制启动顺序"><span>控制启动顺序</span></a></h3><p>在 Docker Compose 中，有时需要控制服务的启动顺序，确保某些服务（如数据库）在依赖它们的服务（如应用程序）之前启动。虽然 Docker Compose 本身不支持严格的启动顺序控制，但可以通过以下方法来实现基本的启动顺序控制：</p><h4 id="depends-on" tabindex="-1"><a class="header-anchor" href="#depends-on"><span><code>depends_on</code></span></a></h4><p><code>depends_on</code> 是 Docker Compose 提供的一个指令，用于指定一个服务的依赖关系，使 Docker Compose 按照指定的顺序启动服务。但注意，<code>depends_on</code> 仅在容器启动顺序上有效，并不保证依赖服务的完全就绪状态（如数据库服务实际可用）。因此，在有较严格启动顺序要求的场景下，通常需要搭配健康检查。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> user
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> password

  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_web_app_image
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>web</code> 服务会在 <code>db</code> 服务之后启动。但需要注意，<code>depends_on</code> 并不意味着 <code>db</code> 服务已经完全准备好，它只是确保容器的启动顺序。</p><h4 id="配合healthcheck确保服务就绪" tabindex="-1"><a class="header-anchor" href="#配合healthcheck确保服务就绪"><span>配合<code>healthcheck</code>确保服务就绪</span></a></h4><p>为了确保依赖服务完全可用，可以使用 <code>healthcheck</code> 指令定义健康检查。健康检查会定期检查服务是否完全启动并准备就绪，这样可以避免应用在数据库等服务未就绪时启动。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> user
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> password
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CMD-SHELL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pg_isready -U user&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>

  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_web_app_image
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token key atrule">db</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>db</code> 服务设置了健康检查，<code>web</code> 服务的 <code>depends_on</code> 条件设置为 <code>service_healthy</code>。这确保了 <code>db</code> 服务在健康检查通过（即数据库服务完全可用）后，<code>web</code> 服务才会启动。</p><blockquote><p><code>healthcheck</code> 会根据容器的状态报告健康状况，<code>condition: service_healthy</code> 仅在 Docker Compose v3.4 及以上版本中支持。</p></blockquote><h4 id="脚本-延迟启动" tabindex="-1"><a class="header-anchor" href="#脚本-延迟启动"><span>脚本/延迟启动</span></a></h4><p>有些服务没有健康检查工具，或者需要更灵活的就绪条件。在这种情况下，可以通过启动延迟或脚本控制服务的启动顺序。例如，可以在 <code>command</code> 中设置延迟命令来确保依赖服务完全启动。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> user
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> password

  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_web_app_image
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sleep 10 &amp;&amp; your_web_app_command&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>web</code> 服务的 <code>entrypoint</code> 使用了 <code>sleep 10</code> 命令，等待 <code>db</code> 服务有足够的时间来完全启动。在实际使用中，可以根据需求调整 <code>sleep</code> 的时间长度。</p><h4 id="配合restart策略自动重启" tabindex="-1"><a class="header-anchor" href="#配合restart策略自动重启"><span>配合<code>restart</code>策略自动重启</span></a></h4><p>对于较长时间准备就绪的服务，还可以结合 <code>restart</code> 策略确保服务启动后可以重试连接依赖的服务。这样，即使在初始启动时依赖服务还没完全就绪，容器也会自动重启并尝试连接，直至成功。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> user
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> password

  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_web_app_image
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个配置中，<code>web</code> 服务会在初始启动失败时自动重启，确保数据库可用后能重新尝试启动。</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h3><h4 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量"><span>设置环境变量</span></a></h4><p><strong>使用<code>environment</code>关键字</strong></p><p>可以在 <code>docker-compose.yml</code> 文件中，直接通过 <code>environment</code> 关键字为服务设置环境变量。这种方法适合于写入明确的环境变量值，适用于少量变量的场景。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_ENV=production
      <span class="token punctuation">-</span> DEBUG=false
      <span class="token punctuation">-</span> DATABASE_HOST=db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此例中，<code>app</code> 服务会启动时会使用 <code>APP_ENV</code>、<code>DEBUG</code> 和 <code>DATABASE_HOST</code> 作为环境变量。</p><p><strong>使用<code>.env</code>文件</strong></p><p>Docker Compose 支持在项目根目录下的 <code>.env</code> 文件中定义环境变量。这些变量会<strong>自动</strong>被 <code>docker-compose.yml</code> 文件识别，并可以在 Compose 文件中以 <code>\${VAR_NAME}</code> 方式引用，便于变量集中管理。</p><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code># .env 文件
APP_ENV=production
DEBUG=false
DATABASE_HOST=db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_ENV=$<span class="token punctuation">{</span>APP_ENV<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> DEBUG=$<span class="token punctuation">{</span>DEBUG<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> DATABASE_HOST=$<span class="token punctuation">{</span>DATABASE_HOST<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种配置中，Docker Compose 会自动加载 <code>.env</code> 文件的内容，并在服务启动时将其注入到容器中。</p><p><strong>使用<code>env_file</code>指定环境文件</strong></p><p>除了 <code>.env</code> 文件，还可以使用 <code>env_file</code> 指定额外的环境文件，为每个服务单独加载特定环境文件。</p><ol><li>创建一个 <code>app.env</code> 文件：</li></ol><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code># app.env 文件
APP_ENV=production
DEBUG=false
DATABASE_HOST=db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 <code>docker-compose.yml</code> 文件中，通过 <code>env_file</code> 加载 <code>app.env</code> 文件：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> app.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法允许对不同服务加载不同的环境文件，在复杂项目中可以使用分离的环境文件来管理各服务配置。</p><p><strong>使用Shell环境变量</strong></p><p>在运行 <code>docker-compose</code> 命令时，当前 Shell 的环境变量也会被传递到 Docker Compose 中。这适合于临时指定变量或为敏感数据（如密码）提供动态输入。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">APP_ENV</span><span class="token operator">=</span>production
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>false
<span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Docker Compose 将自动识别 <code>APP_ENV</code> 和 <code>DEBUG</code> 环境变量，并在启动时应用这些值。</p><p><strong>在Compose文件中设置默认值</strong></p><p>可以在 Compose 文件中为环境变量指定默认值，避免在变量未定义的情况下导致错误。使用 <code>\${VAR_NAME:-default_value}</code> 的格式指定默认值：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_ENV=$<span class="token punctuation">{</span>APP_ENV<span class="token punctuation">:</span><span class="token punctuation">-</span>production<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> DEBUG=$<span class="token punctuation">{</span>DEBUG<span class="token punctuation">:</span><span class="token punctuation">-</span><span class="token boolean important">false</span><span class="token punctuation">}</span>
      <span class="token punctuation">-</span> DATABASE_HOST=$<span class="token punctuation">{</span>DATABASE_HOST<span class="token punctuation">:</span><span class="token punctuation">-</span>localhost<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，如果 <code>APP_ENV</code>、<code>DEBUG</code> 或 <code>DATABASE_HOST</code> 未在 <code>.env</code> 文件或 Shell 中定义，则会使用默认值 <code>production</code>、<code>false</code> 和 <code>localhost</code>。</p><h4 id="环境变量优先级" tabindex="-1"><a class="header-anchor" href="#环境变量优先级"><span>环境变量优先级</span></a></h4><p>不同来源的环境变量有优先级顺序，影响最终容器接收到的变量值。以下是 Docker Compose 中环境变量的优先级（从高到低）：</p><ol><li><p>Docker CLI 命令行中传递的变量</p><ul><li><p>在运行 <code>docker-compose</code> 命令时，可以直接在命令前传递环境变量。例如：</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">APP_ENV</span><span class="token operator">=</span>production <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>true <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>Shell 环境变量</p><ul><li><p>在运行 <code>docker-compose</code> 命令之前，也可以使用 <code>export</code> 命令来设置 Shell 环境变量：</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">APP_ENV</span><span class="token operator">=</span>production
<span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Compose 文件中的 <code>environment</code> 指定的变量</p><ul><li><p>可以在 <code>docker-compose.yml</code> 文件中使用 <code>environment</code> 指定环境变量：</p></li><li><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_ENV=development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>.env</code> 文件中定义的变量</p><ul><li><p>在 Compose 文件所在的目录下定义的 <code>.env</code> 文件中的变量会自动被加载并可用于 Compose 文件中引用。例如：</p></li><li><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code># .env 文件
APP_ENV=staging
DEBUG=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>env_file</code> 中的变量</p><ul><li><p>可以在 Compose 文件中指定一个或多个 <code>env_file</code> 文件，为每个服务加载特定的环境文件：</p></li><li><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> app.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>在 Compose 文件中指定的默认值</p><ul><li><p>在 Compose 文件中使用 <code>\${VAR_NAME:-default_value}</code> 的格式，可以为未定义的变量提供默认值：</p></li><li><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my_app_image
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_ENV=$<span class="token punctuation">{</span>APP_ENV<span class="token punctuation">:</span><span class="token punctuation">-</span>production<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> DEBUG=$<span class="token punctuation">{</span>DEBUG<span class="token punctuation">:</span><span class="token punctuation">-</span><span class="token boolean important">false</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h4 id="预定义的环境变量" tabindex="-1"><a class="header-anchor" href="#预定义的环境变量"><span>预定义的环境变量</span></a></h4><p>官方文档：<a href="https://docs.docker.com/compose/how-tos/environment-variables/envvars/" target="_blank" rel="noopener noreferrer">Pre-defined environment variables | Docker Docs</a></p><h5 id="compose-project-name" tabindex="-1"><a class="header-anchor" href="#compose-project-name"><span><code>COMPOSE_PROJECT_NAME</code></span></a></h5><p>当使用 <code>COMPOSE_PROJECT_NAME</code> 设置项目名称后，Docker Compose 会将该名称作为前缀附加在所有相关资源（如容器、网络、卷）上。例如，服务 <code>web</code> 会被命名为 <code>&lt;项目名称&gt;_web</code>，网络 <code>default</code> 会被命名为 <code>&lt;项目名称&gt;_default</code>。</p><p><code>COMPOSE_FILE</code></p><p>指定 Compose 文件的路径。支持指定多个 Compose 文件。</p><ul><li>默认行为：如果未提供，则 Compose 会查找当前目录中名为<code>compose.yaml</code>或<code>docker-compose.yaml</code>的文件，如果未找到，则 Compose 会递归搜索每个父目录，直到找到具有该名称的文件。</li><li>默认分隔符：指定多个 Compose 文件时，默认情况下，路径分隔符处于打开状态： <ul><li>Mac 和 Linux：<code>:</code>（冒号）</li><li>Windows：<code>;</code>（分号）</li></ul></li></ul><p>路径分隔符也可以使用自定义的<code>COMPOSE_PATH_SEPARATOR</code>。</p><p>例：<code>COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml</code>。</p><h5 id="compose-profiles" tabindex="-1"><a class="header-anchor" href="#compose-profiles"><span><code>COMPOSE_PROFILES</code></span></a></h5><p>用于<strong>选择要启用的配置文件中的特定服务配置集</strong>（也称为“配置文件”或“profiles”）。它允许用户在一个 Compose 文件中定义多个环境或配置集，并在不同场景下有选择地启用或禁用某些服务。</p><h5 id="compose-convert-windows-paths" tabindex="-1"><a class="header-anchor" href="#compose-convert-windows-paths"><span><code>COMPOSE_CONVERT_WINDOWS_PATHS</code></span></a></h5><p>启用后，Compose 会在卷定义中执行从 Windows 样式到 Unix 样式的路径转换。</p><ul><li>支持的值： <ul><li><code>true</code>或<code>1</code>， 以启用</li><li><code>false</code>或<code>0</code>， 以禁用</li></ul></li><li>默认为：<code>0</code></li></ul><h5 id="compose-path-separator" tabindex="-1"><a class="header-anchor" href="#compose-path-separator"><span><code>COMPOSE_PATH_SEPARATOR</code></span></a></h5><p>为 <code>COMPOSE_FILE</code> 中列出的项目指定不同的路径分隔符。</p><ul><li>默认为： <ul><li>在 macOS 和 Linux 上 <code>:</code></li><li>在 Windows 上 <code>;</code></li></ul></li></ul><h5 id="compose-ignore-orphans" tabindex="-1"><a class="header-anchor" href="#compose-ignore-orphans"><span><code>COMPOSE_IGNORE_ORPHANS</code></span></a></h5><p>启用后，Compose 不会尝试检测项目的孤立容器。</p><p><strong>孤立服务</strong>指的是在 Docker 中运行的容器，但这些容器<strong>不再定义</strong>在当前的 <code>docker-compose.yml</code> 文件中。孤立服务通常出现在以下场景：</p><ul><li>更新了 <code>docker-compose.yml</code> 文件，移除了某些服务，但这些服务的容器还在运行。</li><li>使用了多个 Compose 文件（比如 <code>docker-compose.override.yml</code>）定义不同环境下的服务，但在某一环境下不再需要其中的某些服务。</li></ul><h5 id="compose-parallel-limit" tabindex="-1"><a class="header-anchor" href="#compose-parallel-limit"><span><code>COMPOSE_PARALLEL_LIMIT</code></span></a></h5><p>作用：限制并行操作的最大任务数</p><h5 id="compose-ansi" tabindex="-1"><a class="header-anchor" href="#compose-ansi"><span><code>COMPOSE_ANSI</code></span></a></h5><p>指定何时打印 ANSI 控制字符。</p><ul><li>支持的值： <ul><li><code>auto</code>，Compose 会检测是否可以使用 TTY 模式。否则，请使用纯文本模式。</li><li><code>never</code>，使用纯文本模式。</li><li><code>always</code>或者<code>0</code>，使用 TTY 模式。</li></ul></li><li>默认为： <code>auto</code></li></ul><p><code>COMPOSE_STATUS_STDOUT</code></p><p>默认情况下，Docker Compose 可能会将状态信息输出到终端（stderr），而 <code>COMPOSE_STATUS_STDOUT</code> 环境变量允许将状态信息转移到标准输出（stdout），方便脚本和工具处理这些输出。</p><ul><li>支持的值： <ul><li><code>true</code>或 <code>1</code>， 以启用</li><li><code>false</code>或 <code>0</code>， 以禁用</li></ul></li><li>默认为：<code>0</code></li></ul><p><code>COMPOSE_ENV_FILES</code></p><p>允许您指定 Compose 在未使用<code>--env-file</code>时应使用哪些环境文件。</p><p>使用多个环境文件时，请使用逗号作为分隔符。例如：</p><div class="language-BASH line-numbers-mode" data-ext="BASH" data-title="BASH"><pre class="language-BASH"><code>COMPOSE_ENV_FILES=.env.envfile1, .env.envfile2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果未设置<code>COMPOSE_ENV_FILES</code>，并且未在 CLI 中提供<code>--env-file</code>，则 Docker Compose 将使用默认行为，即在项目目录中查找<code>.env</code>文件。</p><p><code>COMPOSE_MENU</code></p><p>启用后，Compose 会显示一个导航菜单，您可以在其中选择在 Docker Desktop 中打开 Compose 堆栈，然后打开<a href="https://docs.docker.com/compose/how-tos/file-watch/" target="_blank" rel="noopener noreferrer"><code>watch</code>模式</a>或使用 <a href="https://docs.docker.com/reference/cli/docker/debug/" target="_blank" rel="noopener noreferrer">Docker Debug</a>。</p><ul><li>支持的值： <ul><li><code>true</code>或 <code>1</code>， 以启用</li><li><code>false</code>或 <code>0</code>， 以禁用</li></ul></li><li>默认为<code>1</code>（前提是通过 Docker Desktop 获取了 Docker Compose）；否则默认为<code>0</code>。</li></ul><blockquote><p>在 Docker Compose 版本 <a href="https://docs.docker.com/compose/releases/release-notes/#2260" target="_blank" rel="noopener noreferrer">2.26.0</a> 及更高版本以及 Docker Desktop 版本 4.29 及更高版本中可用。</p></blockquote><p><code>COMPOSE_EXPERIMENTAL</code></p><p>用于启用实验性功能。</p><ul><li>支持的值： <ul><li><code>true</code>或 <code>1</code>， 以启用</li><li><code>false</code>或 <code>0</code>， 以禁用</li></ul></li><li>默认为<code>0</code></li></ul><blockquote><p>在 Docker Compose 版本 <a href="https://docs.docker.com/compose/releases/release-notes/#2260" target="_blank" rel="noopener noreferrer">2.26.0</a> 及更高版本以及 Docker Desktop 版本 4.29 及更高版本中可用。</p></blockquote><h5 id="覆盖预定义的环境变量" tabindex="-1"><a class="header-anchor" href="#覆盖预定义的环境变量"><span>覆盖预定义的环境变量</span></a></h5><ol><li>工作目录中的<code>.env</code>文件</li><li>Shell环境变量</li><li>命令行</li></ol><h4 id="插值" tabindex="-1"><a class="header-anchor" href="#插值"><span>插值</span></a></h4><p>插值（Interpolation）指的是在 <code>docker-compose.yml</code> 文件中通过引用环境变量来动态填充配置值。这种方式可以让 Compose 文件更灵活，尤其是在不同环境中复用配置时。插值功能允许在 Compose 文件的各项配置（如镜像名、端口、卷路径等）中使用外部定义的环境变量，确保配置的简洁性和可维护性。</p><p><strong>插值语法</strong></p><ul><li>直接替换 <ul><li><code>\${VAR}</code>：环境变量中的<code>VAR</code>值</li></ul></li><li>默认值 <ul><li><code>\${VAR:-default}</code>：若<code>VAR</code>已设置且不为空，则为<code>VAR</code>，否则为<code>default</code></li><li><code>\${VAR-default}</code>：若<code>VAR</code>已设置，则为<code>VAR</code>，否则为<code>default</code></li></ul></li><li>必须的值 <ul><li><code>\${VAR:?error}</code>：若<code>VAR</code>已设置且不为空，则为<code>VAR</code>，否则退出并报错</li><li><code>\${VAR?error}</code>：若<code>VAR</code>已设置，则为<code>VAR</code>，否则退出并报错</li></ul></li><li>可代替的值 <ul><li><code>\${VAR:+replacement}</code>:若<code>VAR</code>已设置且不为空，则为<code>replacement</code>,否则为空</li><li><code>\${VAR+replacement}</code>:若<code>VAR</code>已设置，则为<code>replacement</code>,否则为空</li></ul></li></ul><p><strong>设置用于插值的变量</strong></p><ol><li>SHELL环境变量</li><li>若未指定<code>--env-file</code>，则为本地工作目录的<code>.env</code>文件中的变量</li></ol><blockquote><p>可以使用<code>docker compose config --environment</code>检查可用的变量/值</p></blockquote><h4 id="env文件语法" tabindex="-1"><a class="header-anchor" href="#env文件语法"><span><code>.env</code>文件语法</span></a></h4><p>以下语法规则适用于环境文件：</p><ul><li>以<code>#</code>开头的行将作为注释处理并忽略。</li><li>空行将被忽略。</li><li>未加引号和双引号的 （<code>&quot;</code>） 值应用了插值。</li><li>每行表示一个键值对。值可以选择引用。 <ul><li><code>VAR=VAL</code> -&gt; <code>VAL</code></li><li><code>VAR=&quot;VAL&quot;</code> -&gt; <code>VAL</code></li><li><code>VAR=&#39;VAL&#39;</code> -&gt; <code>VAL</code></li></ul></li><li>未加引号的值的内联注释前面必须有空格。 <ul><li><code>VAR=VAL # comment</code> -&gt; <code>VAL</code></li><li><code>VAR=VAL# not a comment</code> -&gt; <code>VAL# not a comment</code></li></ul></li><li>带引号的值的内联注释必须跟在结束引号后面。 <ul><li><code>VAR=&quot;VAL # not a comment&quot;</code> -&gt; <code>VAL # not a comment</code></li><li><code>VAR=&quot;VAL&quot; # comment</code> -&gt; <code>VAL</code></li></ul></li><li>单引号 （<code>&#39;</code>） 值按字面意思使用。 <ul><li><code>VAR=&#39;$OTHER&#39;</code> -&gt; <code>$OTHER</code></li><li><code>VAR=&#39;\${OTHER}&#39;</code> -&gt; <code>\${OTHER}</code></li></ul></li><li>引号可以用<code>\\</code><ul><li><code>VAR=&#39;Let\\&#39;s go!&#39;</code> -&gt; <code>Let&#39;s go!</code></li><li><code>VAR=&quot;{\\&quot;hello\\&quot;: \\&quot;json\\&quot;}&quot;</code> -&gt; <code>{&quot;hello&quot;: &quot;json&quot;}</code></li></ul></li><li>常见的 shell 转义序列包括<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\\\</code> 和 在双引号值中受支持。 <ul><li><code>VAR=&quot;some\\tvalue&quot;</code> -&gt; <code>some value</code></li><li><code>VAR=&#39;some\\tvalue&#39;</code> -&gt; <code>some\\tvalue</code></li><li><code>VAR=some\\tvalue</code> -&gt; <code>some\\tvalue</code></li></ul></li></ul><h3 id="compose-watch" tabindex="-1"><a class="header-anchor" href="#compose-watch"><span>Compose Watch</span></a></h3><p><code>Compose Watch</code> 是 Docker Compose 的一个<strong>实验性功能</strong>，允许在服务的文件内容变化时自动触发重新构建和重启。这对于开发环境特别有用，因为它能在代码文件更新时自动反映在容器中，而无需手动重启服务，提升了开发效率。</p><p>启用实验性功能的方法有：</p><ol><li><p>在系统的环境变量中设置 <code>COMPOSE_EXPERIMENTAL</code>为<code>enabled</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">COMPOSE_EXPERIMENTAL</span><span class="token operator">=</span>enabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在<code>.env</code>文件中添加</p><div class="language-env line-numbers-mode" data-ext="env" data-title="env"><pre class="language-env"><code>COMPOSE_EXPERIMENTAL=enabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><code>watch</code>遵循以下文件路径规则：</p><ul><li>所有路径都相对于项目目录</li><li>以递归方式监视目录</li><li>不支持 <strong>glob</strong> 模式</li><li><code>.dockerignore</code>中定义的规则 <ul><li>使用<code>ignore</code>选项定义额外的被忽略路径</li><li>常见IDEs（Vim、Emacs、JetBrains等）的临时/备份文件会自动忽略</li><li><code>.git</code>目录会自动被忽略</li></ul></li></ul><h4 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h4><ol><li>将<code>watch</code>部分添加到一个或多个<code>compose.yaml</code>服务中</li><li>运行<code>docker compose up --watch</code>以构建和启动Compose项目并启动文件观看模式。</li><li>使用您首选的IDE或编辑器编辑服务源文件。</li></ol><h4 id="action" tabindex="-1"><a class="header-anchor" href="#action"><span><code>action</code></span></a></h4><p><strong>Sync</strong></p><p><code>action</code>如果设置为<code>sync</code>，则 Compose 可确保对主机上的文件所做的任何更改都自动与服务容器中的相应文件匹配</p><p><code>sync</code>非常适合支持 “Hot Reload” 或等效功能的框架。</p><p>更一般地说，在许多开发用例中，<code>sync</code>可以代替bind mount。</p><p><strong>Rebuild</strong></p><p><code>action</code>如果设置为<code>rebuild</code>，则 Compose 会自动使用 BuildKit 构建新映像，并替换正在运行的服务容器。</p><p>该行为与运行<code>docker compose up --build &lt;svc&gt;</code>是相同的。</p><p>Rebuild 非常适合编译语言，或者作为需要对镜像完整重建的后备方案（例如 <code>package.json</code> ）。</p><p><strong>Sync+Restart</strong></p><p><code>action</code>如果设置为<code>sync+restart</code>，则 Compose 会将更改与服务容器同步并重新启动它。</p><p>当配置文件发生变化时，<code>sync+restart</code>是理想的选择，您不需要重建镜像，只需重新启动服务容器的主进程即可。例如，当您更新数据库配置或<code>nginx.conf</code>文件时，它会很好地工作</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-目录结构 line-numbers-mode" data-ext="目录结构" data-title="目录结构"><pre class="language-目录结构"><code>myproject/
├── web/
│   ├── App.jsx
│   └── index.js
├── Dockerfile
├── compose.yaml
└── package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm start
    <span class="token key atrule">develop</span><span class="token punctuation">:</span>
      <span class="token key atrule">watch</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> sync
          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./web
          <span class="token key atrule">target</span><span class="token punctuation">:</span> /src/web
          <span class="token key atrule">ignore</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> node_modules/
        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> rebuild
          <span class="token key atrule">path</span><span class="token punctuation">:</span> package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，当运行<code>docker compose up --watch</code>时，使用从项目根目录中的Dockerfile构建的镜像启动Web服务的容器。Web服务为其命令运行<code>npm start</code>，然后启动应用程序的开发版本（Webpack、Vite、Turbopack等），该应用程序在Inbox中启用了Hot Mode Inbox。</p><p>服务启动后，监视模式开始监视目标目录和文件。然后，每当<code>web/</code>目录中的源文件发生更改时，Compose就会将该文件同步到容器内<code>/src/web</code>下的相应位置。例如<code>./web/App.jsx</code>被复制到<code>/src/web/App.jsx</code>。</p><p>复制后，分配器会更新正在运行的应用程序，而无需重新启动。</p><p>与源代码文件不同，添加新的依赖项不能实时完成，因此每当<code>Package.json</code>更改时，Compose都会重新构建镜像并重新创建Web服务容器。</p><hr><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm start
    <span class="token key atrule">develop</span><span class="token punctuation">:</span>
      <span class="token key atrule">watch</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> sync
          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./web
          <span class="token key atrule">target</span><span class="token punctuation">:</span> /app/web
          <span class="token key atrule">ignore</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> node_modules/
        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> sync+restart
          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./proxy/nginx.conf
          <span class="token key atrule">target</span><span class="token punctuation">:</span> /etc/nginx/conf.d/default.conf

  <span class="token key atrule">backend</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span>
      <span class="token key atrule">context</span><span class="token punctuation">:</span> backend
      <span class="token key atrule">target</span><span class="token punctuation">:</span> builder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此设置演示了如何使用Docker Compose中的同步+重启操作来高效地开发和测试具有前端Web服务器和后台服务的Node.js应用程序。该配置确保对应用程序代码和配置文件的更改快速同步和应用，并根据需要重新启动Web服务以反映更改。</p><h4 id="glob模式" tabindex="-1"><a class="header-anchor" href="#glob模式"><span>glob模式</span></a></h4><p><strong><code>\\*</code>（星号）</strong><br> 匹配任意数量的字符（包括零个字符）。它通常用来匹配文件名或目录中的任意部分。</p><p>示例：</p><ul><li><code>*.txt</code>：匹配当前目录下所有扩展名为 <code>.txt</code> 的文件。</li><li><code>dir/*.js</code>：匹配 <code>dir</code> 目录下所有扩展名为 <code>.js</code> 的文件。</li></ul><p><strong><code>?</code>（问号）</strong><br> 匹配一个字符（只能匹配一个字符）。通常用于匹配特定位置的单个字符。</p><p>示例：</p><ul><li><code>file?.txt</code>：匹配 <code>file1.txt</code>、<code>fileA.txt</code> 等，但不匹配 <code>file10.txt</code>。</li></ul><p><strong><code>[...]</code>（方括号）</strong><br> 匹配方括号内的任意单个字符。可以指定一个字符集，匹配其中任意一个字符。</p><p>示例：</p><ul><li><code>file[123].txt</code>：匹配 <code>file1.txt</code>、<code>file2.txt</code>、<code>file3.txt</code>，但不匹配 <code>file4.txt</code>。</li><li><code>file[a-d].txt</code>：匹配 <code>filea.txt</code>、<code>fileb.txt</code>、<code>filec.txt</code>、<code>filed.txt</code>。</li></ul><p><strong><code>{}</code>（花括号）</strong><br> 花括号用来指定多个选项的匹配，类似于正则表达式中的替代符号。</p><p>示例：</p><ul><li><code>file.{txt,md}</code>：匹配 <code>file.txt</code> 或 <code>file.md</code>。</li></ul><p><strong><code>\\**</code>（双星号）</strong><br> 匹配零个或多个目录（递归匹配）。这是一个扩展特性，不是所有的 glob 实现都支持。在 Docker Compose 中使用时，可以用来匹配子目录。</p><p>示例：</p><ul><li><code>dir/**/*.js</code>：匹配 <code>dir</code> 目录及其所有子目录下的 <code>.js</code> 文件。</li><li><code>**/*.txt</code>：匹配当前目录及其所有子目录下的 <code>.txt</code> 文件。</li></ul><h3 id="compose-secrets" tabindex="-1"><a class="header-anchor" href="#compose-secrets"><span>Compose Secrets</span></a></h3><p><strong>密钥</strong>（Secrets）主要用于管理和保护敏感信息（如 API 密钥、数据库密码等），使其能够安全地传递到容器中。Docker Compose 提供了一种通过 <code>secrets</code> 配置来处理和使用这些敏感数据的机制，通常用于确保在容器之间安全地传递敏感信息，而不会将这些信息暴露在配置文件中。</p><p><strong>特点</strong></p><ul><li><strong>加密存储</strong>：所有密钥都会加密存储，只有需要它们的服务才能访问。</li><li><strong>仅对服务暴露</strong>：Secrets 不会被暴露给 Docker 容器之外的进程，只有通过 Docker Compose 或 Docker Swarm 部署的服务能够访问。</li><li><strong>有限的生命周期</strong>：Secrets 会在需要时自动传递给容器，而不会保存在容器中，生命周期有限。</li></ul><p><strong>使用案例</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.9&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> myapp
    <span class="token key atrule">secrets</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db_password
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DB_PASSWORD=/run/secrets/db_password

<span class="token key atrule">secrets</span><span class="token punctuation">:</span>
  <span class="token key atrule">db_password</span><span class="token punctuation">:</span>
    <span class="token key atrule">file</span><span class="token punctuation">:</span> ./db_password.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>db_password</code> 是我们定义的 secret。</li><li><code>file: ./db_password.txt</code> 指定了存储敏感数据的文件（可以是本地文件路径）。</li><li>在 <code>web</code> 服务中通过 <code>secrets</code> 字段将 <code>db_password</code> 添加到服务中，并在环境变量中使用 <code>/run/secrets/db_password</code> 来访问这个密钥。</li></ul><h3 id="compose-network" tabindex="-1"><a class="header-anchor" href="#compose-network"><span>Compose network</span></a></h3><p>在 Docker Compose 中，每个服务默认都会连接到一个自动创建的网络。这个网络的名称是由 Compose 项目名称和 <code>_default</code> 后缀组成的。例如，如果你的 Compose 项目名称是 <code>myapp</code>，默认的网络名称将是 <code>myapp_default</code>。</p><p>在默认的情况下，Docker Compose 会创建一个桥接网络（bridge network）。在同一个网络中的容器可以相互通信，而默认网络对于容器间的 DNS 解析和通信是透明的。</p><p><strong>默认网络的行为：</strong></p><ul><li>每个服务可以通过服务名访问其他服务。</li><li>默认情况下，不同 Compose 项目中的容器之间是隔离的。</li></ul><p><strong>更新网络上的容器：</strong></p><p>如果您对服务进行配置更改并运行<code>docker compose up</code>更新，旧容器将被删除，新容器将使用不同的 IP 地址（但名称相同）加入网络。正在运行的容器可以查找该名称并连接到新地址，但旧地址将停止工作。</p><p>如果任何容器与旧容器有连接，则这些连接将被关闭。容器负责检测此情况，再次查找名称并重新连接。</p><blockquote><p>尽可能通过名称而不是 IP 引用容器。否则，您需要不断更新您使用的 IP 地址。</p></blockquote><p><strong>配置默认网络</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8000:8000&quot;</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token comment"># Use a custom driver</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>driver<span class="token punctuation">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置自定义网络：</strong></p><p>可以在 Compose 文件的 <code>networks</code> 部分定义一个或多个自定义网络。然后，使用 <code>networks</code> 关键字将服务连接到这些网络。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.9&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> myapp
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> front
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> back
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>
  	<span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  	<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  	  <span class="token punctuation">-</span> front
  	  <span class="token punctuation">-</span> back

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">front</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge
  <span class="token key atrule">back</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>front</code> 和 <code>back</code> 是两个自定义网络：</p><ul><li><code>web</code> 服务连接到 <code>front</code> 网络。</li><li><code>db</code> 服务连接到 <code>back</code> 网络。</li><li><code>proxy</code>连接到 <code>front</code> 和 <code>back</code> 网络，<code>web </code>和 <code>db </code>不能直接通信。</li></ul><blockquote><p>其它知识点：</p><ul><li>可以通过为每个连接的网络设置<a href="https://docs.docker.com/reference/compose-file/services/#ipv4_address-ipv6_address" target="_blank" rel="noopener noreferrer">ipv4_address 和/或 ipv6_address</a>来为网络配置静态 IP 地址 。</li><li>网络也可以被赋予 <a href="https://docs.docker.com/reference/compose-file/networks/#name" target="_blank" rel="noopener noreferrer">自定义名称</a>：</li></ul></blockquote><p><strong>使用现有网络</strong></p><p>如果你希望容器加入现有网络，请使用以下<a href="https://docs.docker.com/reference/compose-file/networks/#external" target="_blank" rel="noopener noreferrer"><code>external</code>选项</a></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token comment"># ...</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">network1</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pre<span class="token punctuation">-</span>existing<span class="token punctuation">-</span>network
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compose不会尝试创建一个名为 <code>[projectname]_default的网络</code>，而是寻找一个名为 <code>my-pre-existing-network</code> 的网络并将您应用的容器连接到该网络。</p><h3 id="使用多个compose文件" tabindex="-1"><a class="header-anchor" href="#使用多个compose文件"><span>使用多个Compose文件</span></a></h3><p>使用多个 Compose 文件，您可以针对不同的环境或工作流自定义 Compose 应用程序。这对于可能使用数十个容器且所有权分布在多个团队的大型应用程序非常有用。</p><h4 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>Merge</span></a></h4><p>默认情况下，Compose 会读取两个文件，一个<code>compose.yaml</code>和可选<code>compose.override.yaml</code>文件。按照惯例，<code>compose.yaml</code> 包含您的基本配置。覆盖文件可以包含现有服务或全新服务的配置覆盖。</p><p>如果两个文件中都定义了一个服务，Compose 将使用下面描述的规则和 <a href="https://docs.docker.com/reference/compose-file/merge/" target="_blank" rel="noopener noreferrer">Compose 规范</a>中描述的规则合并配置。</p><p><strong>使用方法</strong></p><p>要使用多个覆盖文件或具有不同名称的覆盖文件，您可以使用预定义的 <a href="https://docs.docker.com/compose/how-tos/environment-variables/envvars/#compose_file" target="_blank" rel="noopener noreferrer">COMPOSE_FILE</a>环境变量，或使用<code>-f</code>选项指定文件列表。</p><p>Compose 按照命令行中指定的顺序合并文件。后续文件可能会合并、覆盖或添加到其前一个文件。</p><p>例如：<code>docker compose -f compose.yaml -f compose.admin.yaml run backup_db</code></p><p>该<code>compose.yaml</code>文件可能指定一项<code>webapp</code>服务。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">webapp</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> examples/web
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;8000:8000&quot;</span>
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;/data&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以<code>compose.admin.yaml</code>指定相同的服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">webapp</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何匹配的字段都会覆盖前一个文件。新值会添加到<code>webapp</code>服务配置中：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">webapp</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> examples/web
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;8000:8000&quot;</span>
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;/data&quot;</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>合并规则</strong></p><p>路径是相对于基础文件进行评估的。使用多个 Compose 文件时，必须确保文件中的所有路径都相对于基础 Compose 文件（使用<code>-f</code>指定的第一个 Compose 文件）。这是必需的，因为覆盖文件不必是有效的 Compose 文件。覆盖文件可以包含小段配置。跟踪服务的哪个片段与哪个路径相关既困难又令人困惑，因此为了让路径更容易理解，所有路径都必须相对于基础文件进行定义。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以使用<code>docker compose config</code>来检查合并的配置并避免与路径相关的问题。</p></div><p>Compose 将配置从原始服务复制到本地服务。如果原始服务和本地服务中都定义了配置选项，则本地值将替换或扩展原始值。</p><ul><li><p>对于单值选项（如<code>image</code>、<code>command</code>或<code>mem_limit</code>），新值将替换旧值。</p><p>原有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python app.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python otherapp.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python otherapp.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于多值选项<code>ports</code>、<code>expose</code>、<code>external_links</code>、<code>dns</code>、<code>dns_search</code>和<code>tmpfs</code>，Compose 将连接两组值：</p><p>原有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;4000&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3000&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;4000&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于<code>environment</code>、<code>labels</code>、<code>volumes</code>和<code>devices</code>，Compose 会将条目“合并”在一起，其中本地定义的值优先。对于<code>environment</code>和<code>labels</code>，环境变量或标签名称决定使用哪个值：</p><p>原有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> FOO=original
      <span class="token punctuation">-</span> BAR=original
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> BAR=local
      <span class="token punctuation">-</span> BAZ=local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> FOO=original
      <span class="token punctuation">-</span> BAR=local
      <span class="token punctuation">-</span> BAZ=local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>volumes</code>和 的条目<code>devices</code>使用容器中的挂载路径合并：</p><p>原有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./original<span class="token punctuation">:</span>/foo
      <span class="token punctuation">-</span> ./original<span class="token punctuation">:</span>/bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./local<span class="token punctuation">:</span>/bar
      <span class="token punctuation">-</span> ./local<span class="token punctuation">:</span>/baz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./original<span class="token punctuation">:</span>/foo
      <span class="token punctuation">-</span> ./local<span class="token punctuation">:</span>/bar
      <span class="token punctuation">-</span> ./local<span class="token punctuation">:</span>/baz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>有关更多合并规则，请参阅 Compose 规范中的<a href="https://docs.docker.com/reference/compose-file/merge/" target="_blank" rel="noopener noreferrer">合并与覆盖。</a></p></blockquote><h4 id="extend" tabindex="-1"><a class="header-anchor" href="#extend"><span>Extend</span></a></h4><p>Docker Compose的<a href="https://docs.docker.com/reference/compose-file/services/#extends" target="_blank" rel="noopener noreferrer"><code>extends</code>属性</a>可以在不同的文件之间，甚至完全不同的项目之间共享通用配置。</p><p>如果有多个服务重复使用一组通用的配置选项，那么扩展服务会很有用。<code>extends</code>您可以在一个地方定义一组通用的服务选项，并从任何地方引用它。您可以引用另一个 Compose 文件并选择您想在自己的应用程序中使用的服务，并能够根据自己的需要覆盖某些属性。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>当您使用多个 Compose 文件时，必须确保文件中的所有路径都相对于基本 Compose 文件（即主项目文件夹中的 Compose 文件）。这是必需的，因为扩展文件不必是有效的 Compose 文件。</p></div><p><strong>从另一个文件扩展服务</strong></p><p>示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">extends</span><span class="token punctuation">:</span>
      <span class="token key atrule">file</span><span class="token punctuation">:</span> common<span class="token punctuation">-</span>services.yml
      <span class="token key atrule">service</span><span class="token punctuation">:</span> webapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这指示 Compose 仅重复使用文件<code>webapp</code>中定义的服务的属性<code>common-services.yml</code>。<code>webapp</code>服务本身不是最终项目的一部分。</p><p>如果<code>common-services.yml</code> 看起来像这样：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8000:8000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;/data&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您获得的结果与使用<code>docker-compose.yml</code>在<code>web</code>下直接定义的相同<code>build</code>、<code>ports</code>和<code>volumes</code>配置值所写的结果完全相同。</p><p>要在从另一个文件扩展服务时将该服务包含<code>webapp</code>在最终项目中，您需要在当前 Compose 文件中明确包含这两项服务。例如（注意，这是一个非规范示例）：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> alpine
    <span class="token key atrule">command</span><span class="token punctuation">:</span> echo
    <span class="token key atrule">extends</span><span class="token punctuation">:</span>
      <span class="token key atrule">file</span><span class="token punctuation">:</span> common<span class="token punctuation">-</span>services.yml
      <span class="token key atrule">service</span><span class="token punctuation">:</span> webapp
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">extends</span><span class="token punctuation">:</span>
      <span class="token key atrule">file</span><span class="token punctuation">:</span> common<span class="token punctuation">-</span>services.yml
      <span class="token key atrule">service</span><span class="token punctuation">:</span> webapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用 <a href="https://docs.docker.com/compose/how-tos/multiple-compose-files/include/" target="_blank" rel="noopener noreferrer">include</a>。</p><p><strong>在同一个文件中扩展服务</strong></p><p>如果在同一个 Compose 文件中定义服务并从另一个服务扩展一个服务，则原始服务和扩展服务都将成为最终配置的一部分。例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> alpine
    <span class="token key atrule">extends</span><span class="token punctuation">:</span> webapp
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DEBUG=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在同一个文件内以及从另一个文件扩展服务</strong></p><p>可以进一步在本地定义或重新定义配置 <code>compose.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">extends</span><span class="token punctuation">:</span>
      <span class="token key atrule">file</span><span class="token punctuation">:</span> common<span class="token punctuation">-</span>services.yml
      <span class="token key atrule">service</span><span class="token punctuation">:</span> webapp
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DEBUG=1
    <span class="token key atrule">cpu_shares</span><span class="token punctuation">:</span> <span class="token number">5</span>

  <span class="token key atrule">important_web</span><span class="token punctuation">:</span>
    <span class="token key atrule">extends</span><span class="token punctuation">:</span> web
    <span class="token key atrule">cpu_shares</span><span class="token punctuation">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="include" tabindex="-1"><a class="header-anchor" href="#include"><span>Include</span></a></h4><div class="hint-container caution"><p class="hint-container-title">警告</p><p>docker com­pose 中 in­clude 的原理类似于把被 in­clude 文件的内容复制粘贴进当前的文件，所以与 <code>Extend</code> 与 <code>Merge</code> 的行为不同，同名的资源将不会被合并，而是直接报错 <code>defines conflicting service/network</code>，所以仅建议将 in­clude 用于拆分文件</p></div><p>基础示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">A</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> A
  <span class="token key atrule">B</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> B
  <span class="token key atrule">C</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上文件使用 in­clude 选项可以拆分为以下文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># a.yml</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">A</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># b.yml</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">B</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># compose.yml</span>
<span class="token key atrule">include</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> a.yml
  <span class="token punctuation">-</span> b.yml

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">C</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时使用 <code>docker compose config</code> 命令解析配置文件，可以看到 com­pose 文件被解析为了:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>❯ docker compose config
<span class="token key atrule">name</span><span class="token punctuation">:</span> compose
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">A</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token null important">null</span>
  <span class="token key atrule">B</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token null important">null</span>
  <span class="token key atrule">C</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token null important">null</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> compose_default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>docker compose up -d</code> 即可启动全部服务</p><h2 id="portainter" tabindex="-1"><a class="header-anchor" href="#portainter"><span>Portainter</span></a></h2><p>Docker可视化工具：<a href="https://docs.portainer.io/start/intro" target="_blank" rel="noopener noreferrer">Portainer</a></p>`,415),c=[o];function t(i,p){return s(),e("div",null,c)}const u=n(l,[["render",t],["__file","senior.html.vue"]]),v=JSON.parse('{"path":"/frame/docker/senior.html","title":"高级篇","lang":"zh-CN","frontmatter":{"title":"高级篇","shortTitle":"高级篇","description":null,"date":"2024-06-16T22:11:18.000Z","categories":["容器"],"tags":["Docker"]},"headers":[{"level":2,"title":"Docker网络","slug":"docker网络","link":"#docker网络","children":[{"level":3,"title":"相关命令","slug":"相关命令","link":"#相关命令","children":[]},{"level":3,"title":"网络类型","slug":"网络类型","link":"#网络类型","children":[]}]},{"level":2,"title":"高级网络配置","slug":"高级网络配置","link":"#高级网络配置","children":[{"level":3,"title":"容器访问控制","slug":"容器访问控制","link":"#容器访问控制","children":[]},{"level":3,"title":"端口映射实现","slug":"端口映射实现","link":"#端口映射实现","children":[]},{"level":3,"title":"配置docker0网桥","slug":"配置docker0网桥","link":"#配置docker0网桥","children":[]},{"level":3,"title":"自定义网桥","slug":"自定义网桥","link":"#自定义网桥","children":[]},{"level":3,"title":"编辑网络配置文件","slug":"编辑网络配置文件","link":"#编辑网络配置文件","children":[]},{"level":3,"title":"配置 HTTP/HTTPS 网络代理","slug":"配置-http-https-网络代理","link":"#配置-http-https-网络代理","children":[]}]},{"level":2,"title":"Docker Compose","slug":"docker-compose","link":"#docker-compose","children":[{"level":3,"title":"指定项目名称","slug":"指定项目名称","link":"#指定项目名称","children":[]},{"level":3,"title":"生命周期钩子","slug":"生命周期钩子","link":"#生命周期钩子","children":[]},{"level":3,"title":"profiles配置集","slug":"profiles配置集","link":"#profiles配置集","children":[]},{"level":3,"title":"控制启动顺序","slug":"控制启动顺序","link":"#控制启动顺序","children":[]},{"level":3,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":3,"title":"Compose Watch","slug":"compose-watch","link":"#compose-watch","children":[]},{"level":3,"title":"Compose Secrets","slug":"compose-secrets","link":"#compose-secrets","children":[]},{"level":3,"title":"Compose network","slug":"compose-network","link":"#compose-network","children":[]},{"level":3,"title":"使用多个Compose文件","slug":"使用多个compose文件","link":"#使用多个compose文件","children":[]}]},{"level":2,"title":"Portainter","slug":"portainter","link":"#portainter","children":[]}],"git":{"createdTime":1730350317000,"updatedTime":1739108242000,"contributors":[{"name":"Zhiyun Qin","email":"96156298+Okita1027@users.noreply.github.com","commits":8}]},"readingTime":{"minutes":40.27,"words":12081},"filePathRelative":"frame/docker/senior.md","localizedDate":"2024年6月17日"}');export{u as comp,v as data};
