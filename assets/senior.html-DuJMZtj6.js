import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as o,d as a,a as n,b as t,e,o as l}from"./app-CJZ--YWM.js";const c={},u=t(`<h2 id="大key" tabindex="-1"><a class="header-anchor" href="#大key"><span>大Key</span></a></h2><h3 id="more-key" tabindex="-1"><a class="header-anchor" href="#more-key"><span>More Key</span></a></h3><p>生产环境下，可能会有大量key，此时若想查找某个key，不能使用<code>keys *</code>，它的时间复杂度是O(n),会造成系统严重的卡顿。</p><p>诸如<code>keys</code>/<code>flushdb</code>/<code>flushall</code>等危险的命令应该在配置文件中禁用！</p><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>rename- command keys &quot;&quot;
rename- command flushdb &quot;&quot;
rename- command flushall &quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>代替<code>keys</code>的查找命令为<code>scan</code>，其变体有<code>hscan</code>、<code>zscan</code>……</p><p>SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。</p><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>SCAN cursor <span class="token punctuation">[</span>MATCH pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>cursor: 游标</li><li>pattern: 匹配的模式</li><li>count: 指定从数据集里返回多少元素，默认为 10</li></ul><p>SCAN 返回一个包含两个元素的数组</p><ul><li>第一个元素是用于进行下一次迭代的新游标，</li><li>第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。如果新游标返回零表示迭代已结束。</li></ul><p>SCAN的遍历顺序</p><p>非常特别，它不是从第一维数组的第零位一直遍历到末尾，而是采用了高位进位加法来遍历。之所以使用这样特殊的方式进行遍历，是考虑到字典的扩容和缩容时避免槽位的遍历重复和遗漏。</p><p>DEMO案例</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCAN <span class="token number">0</span> MATCH * COUNT <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCAN <span class="token number">2</span> MATCH * COUNT <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;0&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="big-key" tabindex="-1"><a class="header-anchor" href="#big-key"><span>Big Key</span></a></h3><p><strong>Big Key 判定规则</strong></p><ul><li>Key本身的数据量过大：一个String类型的Key，它的值为 5 MB</li><li>Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个</li><li>Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB</li></ul><blockquote><p>阿里开发规范：</p><ul><li>String控制在 10KB,hash、list、zest、set元素个数不超过5000；</li><li>非字符串的bigkey,不能使用del删除，要用hscan、sscan、zscan方式渐进删除，同时防止bigkey过期时间自动删除的问题</li></ul></blockquote><p><strong>Big Key的危害</strong></p><ul><li>网络阻塞 <ul><li>对BigKey执行读请求时，少量的QPS就可能导致带宽使用率被占满，导致Redis实例，乃至所在物理机变慢</li></ul></li><li>数据倾斜 <ul><li>BigKey所在的Redis实例内存使用率远超其他实例，无法使数据分片的内存资源达到均衡</li></ul></li><li>Redis阻塞 <ul><li>对元素较多的hash、list、zset等做运算会耗时较久，使主线程被阻塞</li></ul></li><li>CPU压力 <ul><li>对BigKey的数据序列化和反序列化会导致CPU的使用率飙升，影响Redis实例和本机其它应用</li></ul></li></ul><p><strong>如何发现</strong></p><ol><li>key小于10KB，则使用–bigkeys</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 每隔 100 条 scan 指令就会休眠 0.1s，ops 就不会剧烈抬升，但是扫描的时间会变长</span>
redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">7001</span> –-bigkeys <span class="token parameter variable">-i</span> <span class="token number">0.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用memory usage （此指令CPU占用率高，利用strlen、hlen等命令判断key的长度即可）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>MEMORY USAGE key <span class="token punctuation">[</span>SAMPLES count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><p>利用第三方工具，如 Redis-Rdb-Tools 分析RDB快照文件，全面分析内存使用情况</p><p>https://github.com/sripathikrishnan/redis-rdb-tools</p></li><li><p>网络监控</p><ul><li>自定义工具，监控进出Redis的网络数据，超出预警值时主动告警</li><li>一般阿里云搭建的云服务器就有相关监控页面</li></ul></li></ol><p><strong>如何删除</strong></p><ul><li><p>String：一般使用<code>del</code>,若过大则使用异步删除命令<code>unlink</code></p></li><li><p>hash:使用<code>hscan</code>每次获取少量的field-value,再使用<code>hdel</code>删除每个field</p><ul><li><p>HSCAN 命令基本语法:<code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></p><ul><li>cursor-游标</li><li>pattern-匹配的模式</li><li>count-指定从数据集里返回多少元素，默认值为 10</li></ul></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delBigList</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> biglistKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> llen <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span>bigListkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>counter<span class="token operator">&lt;</span>llen<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//每次从左侧截每100个</span>
        jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span>bigListKey<span class="token punctuation">,</span> left<span class="token punctuation">,</span> llen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        counter <span class="token operator">+=</span> left<span class="token punctuation">;</span>
        <span class="token comment">//最终删除key</span>
        jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>bigListkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li></ul></li><li><p>list:使用<code>ltrim</code>渐进式逐步删除，知道全部删除完成</p><ul><li><p><code>LTRIM KEY_NAME START STOP</code>:删除START——STOP之外的元素</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delBiglist</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> biglistKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> llen <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span>bigListKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> counter <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>counter<span class="token operator">&lt;</span>llen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//每次从左侧截每100个</span>
        jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span>bigListKey<span class="token punctuation">,</span> left<span class="token punctuation">,</span> llen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        counter <span class="token operator">+=</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//最终删除key</span>
    jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>bigListKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>set:使用<code>sscan</code>每次获取部分元素，再使用<code>srem</code>删除每个元素</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delBigSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> bigsetkey<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ScanParams</span> scanParams <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ScanParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> cursor <span class="token operator">=</span> “<span class="token number">0</span>”<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScanResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>scanResult <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">sscan</span><span class="token punctuation">(</span>bigSetKey<span class="token punctuation">,</span>cursor<span class="token punctuation">,</span> scanParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>memberList<span class="token operator">=</span>scanResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>memberList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>memberList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> member <span class="token operator">:</span>memberList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        		jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span>bigSetKey<span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cursor <span class="token operator">=</span>scanResult<span class="token punctuation">.</span><span class="token function">getStringCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">//删除bigkey</span>
    jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>bigSetKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>zset:使用<code>zscan</code>每次获取部分元素，再使用<code>zremrangebyrank</code>删除每个元素</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delBigZset</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> bigZsetKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ScanParams</span> scanParams <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ScanParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> cursor <span class="token operator">=</span>“<span class="token number">0</span>”<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScanResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span>scanResult <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zscan</span><span class="token punctuation">(</span>bigZsetKey<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> scanParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span>tupleList<span class="token operator">=</span>scanResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tupleList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tupleList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span>tupleList<span class="token punctuation">)</span><span class="token punctuation">{</span>
        		jedis<span class="token punctuation">.</span><span class="token function">zrem</span><span class="token punctuation">(</span>bigZsetKey<span class="token punctuation">,</span>tuple<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cursor <span class="token operator">=</span>scanResult<span class="token punctuation">.</span><span class="token function">getStringCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除bigkey</span>
    jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>bigZsetkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p><strong>生产调优</strong></p><p>在Redis配置文件中配置LAZY FREEING</p><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>lazy-free-lazy-server-del yes
replica-lazy-flush yes
lazyfree-lazy-user-del yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="恰当的key设计" tabindex="-1"><a class="header-anchor" href="#恰当的key设计"><span>恰当的Key设计</span></a></h3><p>Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定：</p><ul><li>遵循基本格式：[业务名称]:[数据名]:[id]</li><li>长度不超过44字节</li><li>不包含特殊字符</li></ul><p>例如：我们的登录业务，保存用户信息，其key可以设计成如下格式：</p><p><code>login:user:10</code></p><ul><li>login:业务名称</li><li>user:数据名称</li><li>10:数据ID</li></ul><p>这样设计的好处：</p><ul><li>可读性强</li><li>避免key冲突</li><li>方便管理</li><li>更节省内存： key是string类型，底层编码包含int、embstr和raw三种。embstr在小于44字节使用，采用连续内存空间，内存占用更小。当字节数大于44字节时，会转为raw模式存储，在raw模式下，内存空间不是连续的，而是采用一个指针指向了另外一段内存空间，在这段空间里存储SDS内容，这样空间不连续，访问的时候性能也就会收到影响，还有可能产生内存碎片</li></ul><h2 id="批处理优化" tabindex="-1"><a class="header-anchor" href="#批处理优化"><span>批处理优化</span></a></h2><h3 id="客户端与redis的交互流程" tabindex="-1"><a class="header-anchor" href="#客户端与redis的交互流程"><span>客户端与Redis的交互流程</span></a></h3><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior01.png" alt="单个命令的执行流程" tabindex="0" loading="lazy"><figcaption>单个命令的执行流程</figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Redis处理指令是很快的，主要花费的时候在于网络传输。于是乎很容易想到将多条指令批量的传输给redis</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mset" tabindex="-1"><a class="header-anchor" href="#mset"><span>MSet</span></a></h3><p>Redis提供了很多Mxxx这样的命令，可以实现批量插入数据，例如：</p><ul><li>mset</li><li>hmset</li></ul><p>利用mset批量插入10万条数据</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testMxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
    <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;test:key_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> e <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>Pipeline</span></a></h3><p>MSET虽然可以批处理，但是却只能操作部分数据类型，因此如果有对复杂数据类型的批处理需要，建议使用Pipeline</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建管道</span>
    <span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 放入命令到管道</span>
        pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;test:key_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">&quot;value_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 每放入1000条命令，批量执行</span>
            pipeline<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> e <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集群下的批处理" tabindex="-1"><a class="header-anchor" href="#集群下的批处理"><span>集群下的批处理</span></a></h3><p>如MSET或Pipeline这样的批处理需要在一次请求中携带多条命令，而此时如果Redis是一个集群，那批处理命令的多个key必须落在一个插槽中，否则就会导致执行失败。大家可以想一想这样的要求其实很难实现，因为我们在批处理时，可能一次要插入很多条数据，这些数据很有可能不会都落在相同的节点上，这就会导致报错了</p><p>有4种解决方案</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>第一种方案：串行执行，所以这种方式没有什么意义，当然，执行起来就很简单了，缺点就是耗时过久。</p></li><li><p>第二种方案：串行slot，简单来说，就是执行前，客户端先计算一下对应的key的slot，一样slot的key就放到一个组里边，不同的，就放到不同的组里边，然后对每个组执行pipeline的批处理，他就能串行执行各个组的命令，这种做法比第一种方法耗时要少，但是缺点呢，相对来说复杂一点，所以这种方案还需要优化一下</p></li><li><p>第三种方案：并行slot，相较于第二种方案，在分组完成后串行执行，第三种方案，就变成了并行执行各个命令，所以他的耗时就非常短，但是实现呢，也更加复杂。</p></li><li><p>第四种：hash_tag，redis计算key的slot的时候，其实是根据key的有效部分来计算的，通过这种方式就能一次处理所有的key，这种方式耗时最短，实现也简单，但是如果通过操作key的有效部分，那么就会导致所有的key都落在一个节点上，产生数据倾斜的问题，所以<strong>推荐使用第三种方式</strong>。</p></li></ul><h2 id="慢查询优化" tabindex="-1"><a class="header-anchor" href="#慢查询优化"><span>慢查询优化</span></a></h2><p>**定义：**在Redis执行时耗时超过某个阈值的命令，称为慢查询。</p><p>**危害：**由于Redis是单线程的，所以当客户端发出指令后，他们都会进入到redis底层的queue来执行，如果此时有一些慢查询的数据，就会导致大量请求阻塞，从而引起报错，所以我们需要解决慢查询问题。</p><p>慢查询的阈值可以通过配置指定：</p><ul><li>slowlog-log-slower-than：慢查询阈值，单位是微秒。默认是10000，建议1000。</li></ul><p>慢查询会被放入慢查询日志中，日志的长度有上限，可以通过配置指定：</p><ul><li>slowlog-max-len：慢查询日志（本质是一个队列）的长度。默认是128，建议1000。</li></ul><p>修改这两个配置可以使用 <code>config set</code>命令。</p><p><strong>查看慢查询</strong></p><ul><li><code>slowlog len</code>：查询慢查询日志长度</li><li><code>slowlog get [n]</code>：读取n条慢查询日志</li><li><code>slowlog reset</code>：清空慢查询列表</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior05.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="内存划分、配置" tabindex="-1"><a class="header-anchor" href="#内存划分、配置"><span>内存划分、配置</span></a></h2><p>当Redis内存不足时，可能导致Key频繁被删除、响应时间变长、QPS不稳定等问题。当内存使用率达到90%以上时就需要我们警惕，并快速定位到内存占用的原因。</p><p><strong>碎片问题分析</strong></p><p>Redis底层分配并不是这个key有多大，他就会分配多大，而是有他自己的分配策略，比如8,16,20等等，假定当前key只需要10个字节，此时分配8肯定不够，那么他就会分配16个字节，多出来的6个字节就不能被使用，这就是我们常说的 碎片问题</p><p><strong>进程内存问题分析</strong></p><p>这片内存，通常都可以忽略不计</p><p><strong>缓冲区内存问题分析</strong></p><p>一般包括客户端缓冲区、AOF缓冲区、复制缓冲区等。客户端缓冲区又包括输入缓冲区和输出缓冲区两种。这部分内存占用波动较大，所以这片内存也是我们需要重点分析的内存问题。</p><table><thead><tr><th style="text-align:center;"><strong>内存占用</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">数据内存</td><td style="text-align:center;">是Redis最主要的部分，存储Redis的键值信息。主要问题是BigKey问题、内存碎片问题</td></tr><tr><td style="text-align:center;">进程内存</td><td style="text-align:center;">Redis主进程本身运⾏肯定需要占⽤内存，如代码、常量池等等；这部分内存⼤约⼏兆，在⼤多数⽣产环境中与Redis数据占⽤的内存相⽐可以忽略。</td></tr><tr><td style="text-align:center;">缓冲区内存</td><td style="text-align:center;">一般包括客户端缓冲区、AOF缓冲区、复制缓冲区等。客户端缓冲区又包括输入缓冲区和输出缓冲区两种。这部分内存占用波动较大，不当使用BigKey，可能导致内存溢出。</td></tr></tbody></table><p>于是我们就需要通过一些命令，可以查看到Redis目前的内存分配状态：</p><ul><li><code>info memory</code>：查看内存分配的情况</li><li><code>memory xxx</code>：查看key的主要占用情况</li></ul><p>看到了这些配置，最关键的缓存区内存如何定位和解决呢？</p><p>内存缓冲区常见的有三种：</p><ul><li>复制缓冲区：主从复制的repl_backlog_buf，如果太小可能导致频繁的全量复制，影响性能。通过replbacklog-size来设置，默认1MB</li><li>AOF缓冲区：AOF刷盘之前的缓存区域，AOF执行rewrite的缓冲区。无法设置容量上限</li><li>客户端缓冲区：分为输入缓冲区和输出缓冲区，输入缓冲区最大1G且不能设置。输出缓冲区可以设置</li></ul><p>复制缓冲区和AOF缓冲区不会有问题，最关键就是客户端缓冲区的问题</p><p>客户端缓冲区：指的就是我们发送命令时，客户端用来缓存命令的一个缓冲区，也就是我们向redis输入数据的输入端缓冲区和redis向客户端返回数据的响应缓存区，输入缓冲区最大1G且不能设置，所以这一块根本不用担心，如果超过了这个空间，redis会直接断开，因为本来此时此刻就代表着redis处理不过来了，我们需要担心的就是输出端缓冲区</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior06.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在使用redis过程中，处理大量的big value，会导致输出结果过多，如果输出缓存区过大，会导致redis直接断开，而默认配置的情况下是没有大小的，内存可能一下子被占满，会直接导致redis断开，解决方案有两个</p><p>1、设置一个大小</p><p>2、增加我们带宽的大小，避免我们出现大量数据从而直接超过了redis的承受能力</p><h2 id="多级缓存" tabindex="-1"><a class="header-anchor" href="#多级缓存"><span>多级缓存</span></a></h2><p>传统的缓存策略一般是请求到达Tomcat后，先查询Redis，如果未命中则查询数据库</p>`,94),r=t("<p>存在下面的问题：</p><ul><li><p>请求要经过Tomcat处理，Tomcat的性能成为整个系统的瓶颈</p></li><li><p>Redis缓存失效时，会对数据库产生冲击</p></li></ul><p>多级缓存就是充分利用请求处理的每个环节，分别添加缓存，减轻Tomcat压力，提升服务性能：</p><ul><li>浏览器访问静态资源时，优先读取浏览器本地缓存</li><li>访问非静态资源（ajax查询数据）时，访问服务端</li><li>请求到达Nginx后，优先读取Nginx本地缓存</li><li>如果Nginx本地缓存未命中，则去直接查询Redis（不经过Tomcat）</li><li>如果Redis查询未命中，则查询Tomcat</li><li>请求进入Tomcat后，优先查询JVM进程缓存</li><li>如果JVM进程缓存未命中，则查询数据库</li></ul>",4),d=n("p",null,[e("在多级缓存架构中，Nginx内部需要编写本地缓存查询、Redis查询、Tomcat查询的业务逻辑，因此这样的nginx服务不再是一个"),n("strong",null,"反向代理服务器"),e("，而是一个编写"),n("strong",null,"业务的Web服务器了"),e("。")],-1),k=n("p",null,"因此这样的业务Nginx服务也需要搭建集群来提高并发，再有专门的nginx服务来做反向代理，如图：",-1),v=n("p",null,"另外，我们的Tomcat服务将来也会部署为集群模式：",-1),m=t('<p>可见，多级缓存的关键有两个：</p><ul><li><p>一个是在nginx中编写业务，实现nginx本地缓存、Redis、Tomcat的查询</p><ul><li>OpenResty框架结合Lua语言</li></ul></li><li><p>另一个就是在Tomcat中实现JVM进程缓存</p><ul><li>Caffeine</li></ul></li></ul><h2 id="缓存双写一致性更新策略" tabindex="-1"><a class="header-anchor" href="#缓存双写一致性更新策略"><span>缓存双写一致性更新策略</span></a></h2><h3 id="同步策略" tabindex="-1"><a class="header-anchor" href="#同步策略"><span>同步策略</span></a></h3><p>缓存数据同步的常见方式有三种：</p><p><strong>设置有效期</strong>：给缓存设置有效期，到期后自动删除。再次查询时更新</p><ul><li>优势：简单、方便</li><li>缺点：时效性差，缓存过期之前可能不一致</li><li>场景：更新频率较低，时效性要求低的业务</li></ul><p><strong>同步双写</strong>：在修改数据库的同时，直接修改缓存</p><ul><li>优势：时效性强，缓存与数据库强一致</li><li>缺点：有代码侵入，耦合度高；</li><li>场景：对一致性、时效性要求较高的缓存数据</li></ul><p>**异步通知：**修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p><ul><li>优势：低耦合，可以同时通知多个缓存服务</li><li>缺点：时效性一般，可能存在中间不一致状态</li><li>场景：时效性要求一般，有多个服务需要同步</li></ul><h3 id="同步双写更新策略" tabindex="-1"><a class="header-anchor" href="#同步双写更新策略"><span>同步双写更新策略</span></a></h3><p><strong>先更新数据库后删除缓存</strong></p><ul><li>尝试使用双检加锁机制lock住MySQL，只让一个请求线程回写Redis，完成数据一致性。</li><li>当MySQL有记录改动时，若想立刻同步反应到Redis，可以使用Canal 、 Flink CDC这样的框架。</li><li>可以把要删除的缓存值或是要更新的数据库值暂存到消息队列中，当程序没有成功地删除缓存或更新数据库时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。</li><li>如果业务层要求必须读取一致性的数据，那就需要在更新数据库时，先在Redis缓存客户端暂停并发读请求，等数据库更新完、缓存值删除后，再读取数据，从而保证数据一致性，这是理论可以达到的效果，但实际不推荐，真实生产环境中，分布式下很难做到实时一致性，一般都是最终一致性。</li></ul><p><strong>延时双删</strong></p><ul><li>先删除缓存，预估其它业务的等待时间，休眠对应的时间后再次删除缓存。其它线程读取数据时发现缓存缺失，就会从数据库中读取最新的值了。</li><li>若想回避延时带来的吞吐量降低，可以将第二次删除改成异步操作。</li></ul><h3 id="异步通知更新策略" tabindex="-1"><a class="header-anchor" href="#异步通知更新策略"><span>异步通知更新策略</span></a></h3>',17),g=n("p",null,"消息队列",-1),b=n("ul",null,[n("li",null,"商品服务完成对数据的修改后，只需要发送一条消息到MQ中。"),n("li",null,"缓存服务监听MQ消息，然后完成对缓存的更新")],-1),h=n("p",null,"有少量的代码侵入",-1),f=n("p",null,"Canal",-1),y=n("ul",null,[n("li",null,"商品服务完成商品修改后，业务直接结束，没有任何代码侵入"),n("li",null,"Canal监听MySQL变化，当发现变化后，立即通知缓存服务"),n("li",null,"缓存服务接收到canal通知，更新缓存")],-1),w=n("p",null,"代码零侵入",-1),S=n("li",null,[n("p",null,"Flink CDC")],-1),q=t(`<h2 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog"><span>HyperLogLog</span></a></h2><p>为什么只占用12KB？</p><p>每个 HyperLogLog 实例将输入的哈希值分布到 <strong>16384 个寄存器</strong>（也称为桶或槽）中，每个寄存器存储某个哈希值的 &quot;前导零&quot; 的最大长度。由于 Redis 采用 6 位来存储每个寄存器的最大前导零长度，因此 <strong>16384 个寄存器</strong> 需要：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>16384 (寄存器数) × 6 (每个寄存器占用的位) / 8 (每字节位数) = 12288 字节 = 12 KB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>案例：亿级UV的Redis统计方案</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HyperLogLogService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 模拟后台有用户点击首页，每个用户来自不同ip地址
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;------模拟后台有用户点击首页，每个用户来自不同ip地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ip <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Long</span> hll <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hll&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ip={},该ip地址访问首页的次数={}&quot;</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>hll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//暂停几秒钟线程</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HyperLogLogController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/uv&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">uv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//pfcount</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">&quot;hll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="geo" tabindex="-1"><a class="header-anchor" href="#geo"><span>GEO</span></a></h2><p>案例代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeoService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CITY</span> <span class="token operator">=</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">geoAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;天安门&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.403963</span><span class="token punctuation">,</span><span class="token number">39.915119</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;故宫&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.403414</span> <span class="token punctuation">,</span><span class="token number">39.924091</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;长城&quot;</span> <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.024067</span><span class="token punctuation">,</span><span class="token number">40.362639</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Point</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取经纬度坐标</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//geohash算法生成的base32编码值</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">Distance</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token class-name">String</span> member1<span class="token punctuation">,</span> <span class="token class-name">String</span> member2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取两个给定位置之间的距离</span>
        <span class="token class-name">Distance</span> distance<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member1<span class="token punctuation">,</span>member2<span class="token punctuation">,</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>DistanceUnit</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> distance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//通过经度，纬度查找附近的,北京王府井位置116.418017,39.914402</span>
        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">116.418017</span><span class="token punctuation">,</span> <span class="token number">39.914402</span><span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">.</span><span class="token function">getMultiplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回50条</span>
        <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span> args <span class="token operator">=</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span><span class="token punctuation">.</span><span class="token function">newGeoRadiusArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> geoResults<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>circle<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> geoResults<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//通过地方查找附近</span>
        <span class="token class-name">String</span> member<span class="token operator">=</span><span class="token string">&quot;天安门&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//返回50条</span>
        <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span> args <span class="token operator">=</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span><span class="token punctuation">.</span><span class="token function">newGeoRadiusArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//半径10公里内</span>
        <span class="token class-name">Distance</span> distance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Distance</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> geoResults<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">,</span> distance<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> geoResults<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;美团地图位置附近的酒店推送GEO&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeoController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">GeoService</span> geoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;添加坐标geoadd&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geoadd&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">geoAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">geoAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;获取经纬度坐标geopos&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geopos&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;获取经纬度生成的base32编码值geohash&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geohash&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;获取两个给定位置之间的距离&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geodist&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Distance</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token class-name">String</span> member1<span class="token punctuation">,</span> <span class="token class-name">String</span> member2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span>member2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;通过经度纬度查找北京王府井附近的&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/georadius&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">radiusByxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;通过地方查找附近,本例写死天安门作为地址&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/georadiusByMember&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> geoService<span class="token punctuation">.</span><span class="token function">radiusByMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span>布隆过滤器</span></a></h2><p>布隆过滤器(Bloom Filter) 是一种专门用来解决去重问题的高级数据结构。</p><p>实质就是一个大型位数组和几个不同的无偏hash函数(无偏表示分布均匀)。由一个初值都为零的bit数组和多个哈希函数构成，用来快速判断某个数据是否存在。但是跟 HyperLogLog 一样，它也一样有那么一点点不精确，也存在一定的误判概率</p><p><strong>特点</strong></p><ul><li>不能删除元素：标准布隆过滤器不支持删除操作，因为删除操作可能会影响其他元素的查询结果。</li><li>判定元素是否存在时：存在代表大概率存在；不存在代表一定不存在。</li></ul><p><strong>原理</strong></p><ul><li>添加key时：使用多个hash函数对key进行hash运算得到一个整数索引值，对位数组长度进行取模运算得到一个位置，每个hash函数都会得到一个不同的位置，将这几个位置都置1就完成了add操作。</li><li>查询key时：只要有其中一位是零就表示这个key不存在，但如果都是1，则不一定存在对应的key。</li></ul><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterInit</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span><span class="token comment">//初始化白名单数据，故意差异化数据演示效果......</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//白名单客户预加载到布隆过滤器</span>
        <span class="token class-name">String</span> uid <span class="token operator">=</span> <span class="token string">&quot;customer:12&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//1 计算hashcode，由于可能有负数，直接取绝对值</span>
        <span class="token keyword">int</span> hashValue <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>uid<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2 通过hashValue和2的32次方取余后，获得对应的下标坑位</span>
        <span class="token keyword">long</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hashValue <span class="token operator">%</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>uid<span class="token operator">+</span><span class="token string">&quot; 对应------坑位index:{}&quot;</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3 设置redis里面bitmap对应坑位，该有值设置为1</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token string">&quot;whitelistCustomer&quot;</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUtils</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkWithBloomFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> checkItem<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> hashValue <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hashValue <span class="token operator">%</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> existOK <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBit</span><span class="token punctuation">(</span>checkItem<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;-----&gt;key:&quot;</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">&quot;\\t对应坑位index:&quot;</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">&quot;\\t是否存在:&quot;</span><span class="token operator">+</span>existOK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> existOK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerSerivce</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CACHE_KEY_CUSTOMER</span> <span class="token operator">=</span> <span class="token string">&quot;customer:&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">CustomerMapper</span> customerMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">CheckUtils</span> checkUtils<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//到数据库里面，重新捞出新数据出来，做缓存</span>
            customer<span class="token operator">=</span>customerMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//缓存key</span>
            <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token constant">CACHE_KEY_CUSTOMER</span><span class="token operator">+</span>customer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//往mysql里面插入成功随后再从mysql查询出来，再插入redis</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">findCustomerById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> customerId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">//缓存key的名称</span>
        <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token constant">CACHE_KEY_CUSTOMER</span><span class="token operator">+</span>customerId<span class="token punctuation">;</span>

        <span class="token comment">//1 查询redis</span>
        customer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//redis无，进一步查询mysql</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>customer<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//2 从mysql查出来customer</span>
            customer<span class="token operator">=</span>customerMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// mysql有，redis无</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//3 把mysql捞到的数据写入redis，方便下次查询能redis命中。</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * BloomFilter → redis → mysql
     * 白名单：whitelistCustomer
     * <span class="token keyword">@param</span> <span class="token parameter">customerId</span>
     * <span class="token keyword">@return</span>
     */</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">CheckUtils</span> checkUtils<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span> findCustomerByIdWithBloomFilter <span class="token punctuation">(</span><span class="token class-name">Integer</span> customerId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">//缓存key的名称</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">CACHE_KEY_CUSTOMER</span> <span class="token operator">+</span> customerId<span class="token punctuation">;</span>

        <span class="token comment">//布隆过滤器check，无是绝对无，有是可能有</span>
        <span class="token comment">//===============================================</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>checkUtils<span class="token punctuation">.</span><span class="token function">checkWithBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;whitelistCustomer&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;白名单无此顾客信息:{}&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//===============================================</span>

        <span class="token comment">//1 查询redis</span>
        customer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//redis无，进一步查询mysql</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2 从mysql查出来customer</span>
            customer <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// mysql有，redis无</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//3 把mysql捞到的数据写入redis，方便下次查询能redis命中。</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;客户Customer接口+布隆过滤器讲解&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">CustomerSerivce</span> customerSerivce<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;数据库初始化2条Customer数据&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/customer/add&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            customer<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">&quot;customer&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">&quot;1381111xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setBirth</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            customerSerivce<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;单个用户查询，按customerid查用户信息&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/customer/{id}&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">findCustomerById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> customerSerivce<span class="token punctuation">.</span><span class="token function">findCustomerById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;BloomFilter案例讲解&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/customerbloomfilter/{id}&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">findCustomerByIdWithBloomFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> customerSerivce<span class="token punctuation">.</span><span class="token function">findCustomerByIdWithBloomFilter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>布谷鸟过滤器</strong></p><p>能够解决布隆过滤器不能删除元素的问题，但成熟度和使用率不如布隆过滤器</p><h2 id="缓存预热、穿透、击穿、雪崩" tabindex="-1"><a class="header-anchor" href="#缓存预热、穿透、击穿、雪崩"><span>缓存预热、穿透、击穿、雪崩</span></a></h2><h3 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热"><span>缓存预热</span></a></h3><p>对于热点key，事先在<code>@postconstrct</code>中初始化白名单数据</p><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><p>缓存雪崩是指在分布式系统中，当大量缓存同时过期或失效，导致大量请求直接访问后端数据库，从而引发数据库负载骤增，可能造成系统崩溃的现象。</p><p><strong>预防/解决</strong></p><ol><li>将key设置为永不过期、随机的过期时间</li><li>缓存集群实现高可用 <ul><li>主从+哨兵</li><li>Redis Cluster</li><li>开启AOF、RDB，尽快恢复缓存集群</li></ul></li><li>双重缓存 <ul><li>ehcache本地缓存</li><li>Redis缓存</li></ul></li><li>服务限流、降级 <ul><li>Hystrix</li><li>Sentinel</li></ul></li><li>购买Redis云数据库</li></ol><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h3><p>定义：查询的数据不存在于Redis，也不存在于MySQL，频繁的此类查询会导致数据库压力过大而宕机。</p><p><strong>解决方案</strong></p><ol><li>缓存空对象</li><li>Google的布隆过滤器Guava</li></ol>`,37),R=t(`<h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><p>定义：大量的请求同时查询某个key，此时这个key突然失效，导致大量请求打到数据库上。</p><p>解决方案</p><ol><li>热点key不设置过期时间</li><li>采用双检加锁互斥更新</li><li>逻辑过期异步更新数据</li></ol><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h2><p><strong>特性</strong></p><ul><li>独占性：任何时刻只能有一个线程持有</li><li>高可用：集群环境下，不能因为某个节点宕机而出现获取锁/释放锁失败的情况</li><li>防死锁：有超时控制机制或撤销操作，有一个兜底的跳出方案</li><li>不乱抢：自己的锁只能自己释放，A线程不能 unlock B线程的锁</li><li>重入性：同一个节点的同一个线程获得锁之后，能够再次获取这个锁</li></ul><p><strong>自定义实现</strong></p><div class="language-JAVA line-numbers-mode" data-ext="JAVA" data-title="JAVA"><pre class="language-JAVA"><code>@Component
public class DistributedLockFactory
{
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    private String lockName;
    private String uuidValue;

    public DistributedLockFactory()
    {
        this.uuidValue = IdUtil.simpleUUID();//UUID
    }

    public Lock getDistributedLock(String lockType)
    {
        if(lockType == null) return null;

        if(lockType.equalsIgnoreCase(&quot;REDIS&quot;)){
            lockName = &quot;zzyyRedisLock&quot;;
            return new RedisDistributedLock(stringRedisTemplate,lockName,uuidValue);
        } else if(lockType.equalsIgnoreCase(&quot;ZOOKEEPER&quot;)){
            //TODO zookeeper版本的分布式锁实现
            return new ZookeeperDistributedLock();
        } else if(lockType.equalsIgnoreCase(&quot;MYSQL&quot;)){
            //TODO mysql版本的分布式锁实现
            return null;
        }
        return null;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JAVA line-numbers-mode" data-ext="JAVA" data-title="JAVA"><pre class="language-JAVA"><code>public class RedisDistributedLock implements java.util.concurrent.locks.Lock {
    private final StringRedisTemplate stringRedisTemplate;
    private final String lockName; // KEYS[1]
    private final String uuidValue; // ARGV[1]
    private long expireTime; // ARGV[2] in seconds

    private ScheduledExecutorService scheduler;

    public RedisDistributedLock(StringRedisTemplate stringRedisTemplate, String lockName, String uuidValue) {
        this.stringRedisTemplate = stringRedisTemplate;
        this.lockName = lockName;
        this.uuidValue = uuidValue + &quot;:&quot; + Thread.currentThread().getId();
        this.expireTime = 30L;
        this.scheduler = new ScheduledThreadPoolExecutor(1);
    }

    @Override
    public void lock() {
        tryLock(-1L, TimeUnit.SECONDS);
    }

    @Override
    public boolean tryLock() {
        try {
            return tryLock(-1L, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return false;
        }
    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        if (time != -1L) {
            this.expireTime = unit.toSeconds(time);
        }

        String script =
                &quot;if redis.call(&#39;exists&#39;, KEYS[1]) == 0 or redis.call(&#39;hexists&#39;, KEYS[1], ARGV[1]) == 1 then &quot; +
                        &quot;redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[1], 1) &quot; +
                        &quot;redis.call(&#39;expire&#39;, KEYS[1], ARGV[2]) &quot; +
                        &quot;return 1 &quot; +
                        &quot;else &quot; +
                        &quot;return 0 &quot; +
                        &quot;end&quot;;

        while (!stringRedisTemplate.execute(new DefaultRedisScript&lt;&gt;(script, Boolean.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime))) {
            TimeUnit.MILLISECONDS.sleep(50);
        }
        renewExpire();
        return true;
    }

    @Override
    public void unlock() {
        String script =
                &quot;if redis.call(&#39;hexists&#39;, KEYS[1], ARGV[1]) == 0 then &quot; +
                        &quot;return nil &quot; +
                        &quot;elseif redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[1], -1) == 0 then &quot; +
                        &quot;return redis.call(&#39;del&#39;, KEYS[1]) &quot; +
                        &quot;else &quot; +
                        &quot;return 0 &quot; +
                        &quot;end&quot;;

        Long flag = stringRedisTemplate.execute(new DefaultRedisScript&lt;&gt;(script, Long.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime));
        if (flag == null) {
            throw new RuntimeException(&quot;This lock doesn&#39;t EXIST&quot;);
        }
        if (scheduler != null) {
            scheduler.shutdownNow();
        }
    }

    private void renewExpire() {
        String script =
                &quot;if redis.call(&#39;hexists&#39;, KEYS[1], ARGV[1]) == 1 then &quot; +
                        &quot;return redis.call(&#39;expire&#39;, KEYS[1], ARGV[2]) &quot; +
                        &quot;else &quot; +
                        &quot;return 0 &quot; +
                        &quot;end&quot;;

        scheduler.scheduleAtFixedRate(() -&gt; {
            if (stringRedisTemplate.execute(new DefaultRedisScript&lt;&gt;(script, Boolean.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime))) {
                renewExpire();
            }
        }, (this.expireTime * 1000) / 3, (this.expireTime * 1000) / 3, TimeUnit.MILLISECONDS);
    }

    @Override
    public void lockInterruptibly() throws InterruptedException {
        try {
            if (!tryLock(-1L, TimeUnit.SECONDS)) {
                throw new InterruptedException();
            }
        } catch (InterruptedException e) {
            throw e;
        }
    }

    @Override
    public Condition newCondition() {
        throw new UnsupportedOperationException(&quot;Distributed locks do not support conditions&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JAVA line-numbers-mode" data-ext="JAVA" data-title="JAVA"><pre class="language-JAVA"><code>@Service
@Slf4j
public class InventoryService
{
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    @Value(&quot;\${server.port}&quot;)
    private String port;
    @Autowired
    private DistributedLockFactory distributedLockFactory;

    public String sale()
    {
        String retMessage = &quot;&quot;;
        Lock redisLock = distributedLockFactory.getDistributedLock(&quot;redis&quot;);
        redisLock.lock();
        try
        {
            //1 查询库存信息
            String result = stringRedisTemplate.opsForValue().get(&quot;inventory001&quot;);
            //2 判断库存是否足够
            Integer inventoryNumber = result == null ? 0 : Integer.parseInt(result);
            //3 扣减库存
            if(inventoryNumber &gt; 0) {
                stringRedisTemplate.opsForValue().set(&quot;inventory001&quot;,String.valueOf(--inventoryNumber));
                retMessage = &quot;成功卖出一个商品，库存剩余: &quot;+inventoryNumber;
                System.out.println(retMessage);
                //暂停几秒钟线程,为了测试自动续期
                try { TimeUnit.SECONDS.sleep(120); } catch (InterruptedException e) { e.printStackTrace(); }
            }else{
                retMessage = &quot;商品卖完了，o(╥﹏╥)o&quot;;
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            redisLock.unlock();
        }
        return retMessage+&quot;\\t&quot;+&quot;服务端口号：&quot;+port;
    }


    private void testReEnter()
    {
        Lock redisLock = distributedLockFactory.getDistributedLock(&quot;redis&quot;);
        redisLock.lock();
        try
        {
            System.out.println(&quot;################测试可重入锁####################################&quot;);
        }finally {
            redisLock.unlock();
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="红锁" tabindex="-1"><a class="header-anchor" href="#红锁"><span>红锁</span></a></h3><p><strong>产生背景</strong></p>`,13),x=t(`<ol><li>客户A通过Redis的set命令成功建立分布式锁并持有锁</li><li>正常情况下主从机都有分布式锁</li><li>突然出现故障，但Master还没来得及同步数据给Slave，此时Slave机器上没有对应的锁信息</li><li>从机Slave上位，变成新的Master主机</li><li>客户B建锁成功，此时出现了：两个线程获取到了锁，可能会导致各种意外情况发生，例如脏读</li></ol><blockquote><p>CAP定理的CP遭到了破坏，并且Redis无论单机、主从、哨兵均有此风险</p></blockquote><p>Redlock算法，用来实现<strong>基于多个实例的</strong>分布式锁。</p><p>锁变量由多个实例维护，即使有实例发生了故障，锁变量仍然是存在的，客户端还是可以完成锁操作。</p><p>该方案基于（set 加锁、Lua 脚本解锁）进行改良，大致方案如下：</p><p>假设我们有N个Redis主节点，例如 N = 5，这些节点是完全独立的，不使用复制或任何其他隐式协调系统，为了取到锁，客户端执行以下操作：</p><ol><li>获取当前时间，以毫秒为单位</li><li>依次尝试从5个实例，使用相同的 key 和随机值（例如 UUID）获取锁。当向Redis 请求获取锁时，客户端应该设置一个超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以防止客户端在试图与一个宕机的 Redis 节点对话时长时间处于阻塞状态。如果一个实例不可用，客户端应该尽快尝试去另外一个 Redis 实例请求获取锁；</li><li>客户端通过当前时间减去步骤 1 记录的时间来计算获取锁使用的时间。当且仅当从大多数（N/2+1，这里是 3 个节点）的 Redis 节点都取到锁，并且获取锁使用的时间小于锁失效时间时，锁才算获取成功；</li><li>如果取到了锁，其真正有效时间等于初始有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</li><li>如果由于某些原因未能获得锁（无法在至少 N/2 + 1 个 Redis 实例获取锁、或获取锁的时间超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些Redis实例根本就没有加锁成功，防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）。</li></ol><blockquote><p>该方案为了解决数据不一致的问题，直接舍弃了异步复制只使用 master 节点，同时由于舍弃了slave，为了保证可用性，引入了N个节点，官方建议是 5</p></blockquote><p><strong>watch_dog自动延期机制</strong></p><p>客户端A加锁成功，就会启动一个watch dog看门狗，他是一个后台线程，会每隔10秒检查一下，如果客户端A还持有锁key，那么就会不断的延长锁key的生存时间，默认每次续命又从30秒新开始</p><h3 id="redission" tabindex="-1"><a class="header-anchor" href="#redission"><span>Redission</span></a></h3><p><strong>快速上手</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.13.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">LettuceConnectionFactory</span> lettuceConnectionFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>lettuceConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置key序列化方式string</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置value的序列化方式json</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//单Redis节点模式</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Redisson</span> <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.111.175:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;redis分布式锁测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InventoryController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">InventoryService</span> inventoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;扣减库存，一次卖一个&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/inventory/sale&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> inventoryService<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;扣减库存saleByRedisson，一次卖一个&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/inventory/saleByRedisson&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saleByRedisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> inventoryService<span class="token punctuation">.</span><span class="token function">saleByRedisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InventoryService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DistributedLockFactory</span> distributedLockFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Redisson</span> redisson<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saleByRedisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">String</span> retMessage <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;zzyyRedisLock&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">RLock</span> redissonLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redissonLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//1 查询库存信息</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;inventory001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2 判断库存是否足够</span>
            <span class="token class-name">Integer</span> inventoryNumber <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//3 扣减库存</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>inventoryNumber <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;inventory001&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">--</span>inventoryNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                retMessage <span class="token operator">=</span> <span class="token string">&quot;成功卖出一个商品，库存剩余: &quot;</span><span class="token operator">+</span>inventoryNumber<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                retMessage <span class="token operator">=</span> <span class="token string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>redissonLock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> redissonLock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                redissonLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> retMessage<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token string">&quot;服务端口号：&quot;</span><span class="token operator">+</span>port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多机案例</strong></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">spring.redis.password</span><span class="token punctuation">=</span>
<span class="token key attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>
<span class="token key attr-name">spring.redis.mode</span><span class="token punctuation">=</span><span class="token value attr-value">single</span>

<span class="token key attr-name">spring.redis.pool.conn-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>
<span class="token key attr-name">spring.redis.pool.so-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>
<span class="token key attr-name">spring.redis.pool.size</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>

<span class="token key attr-name">spring.redis.single.address1</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.111.185:6381</span>
<span class="token key attr-name">spring.redis.single.address2</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.111.185:6382</span>
<span class="token key attr-name">spring.redis.single.address3</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.111.185:6383</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RedisProperties</span> redisProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> node <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;redis://&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> node <span class="token operator">:</span> <span class="token string">&quot;redis://&quot;</span> <span class="token operator">+</span> node<span class="token punctuation">;</span>
        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionMinimumIdleSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> node <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;redis://&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> node <span class="token operator">:</span> <span class="token string">&quot;redis://&quot;</span> <span class="token operator">+</span> node<span class="token punctuation">;</span>
        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionMinimumIdleSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> node <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;redis://&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> node <span class="token operator">:</span> <span class="token string">&quot;redis://&quot;</span> <span class="token operator">+</span> node<span class="token punctuation">;</span>
        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionMinimumIdleSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 单机
     */</span>
    <span class="token comment">/*@Bean
    public Redisson redisson()
    {
        Config config = new Config();

        config.useSingleServer().setAddress(&quot;redis://192.168.111.147:6379&quot;).setDatabase(0);

        return (Redisson) Redisson.create(config);
    }*/</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPoolProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxWait<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> connTimeout<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> soTimeout<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 池大小
     */</span>
    <span class="token keyword">private</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.redis&quot;</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> database<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 等待节点回复命令的时间。该时间从命令发送成功时开始计时
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> mode<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 池配置
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisPoolProperties</span> pool<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 单机信息配置
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisSingleProperties</span> single<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSingleProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> address1<span class="token punctuation">;</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> address2<span class="token punctuation">;</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> address3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedLockController</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CACHE_KEY_REDLOCK</span> <span class="token operator">=</span> <span class="token string">&quot;ATGUIGU_REDLOCK&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RedissonClient</span> redissonClient1<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RedissonClient</span> redissonClient2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RedissonClient</span> redissonClient3<span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> isLockBoolean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/multiLock&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMultiLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">String</span> uuid <span class="token operator">=</span>  <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> uuidValue <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RLock</span> lock1 <span class="token operator">=</span> redissonClient1<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">CACHE_KEY_REDLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RLock</span> lock2 <span class="token operator">=</span> redissonClient2<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">CACHE_KEY_REDLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RLock</span> lock3 <span class="token operator">=</span> redissonClient3<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">CACHE_KEY_REDLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RedissonMultiLock</span> redLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedissonMultiLock</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">,</span> lock3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuidValue<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token string">&quot;---come in biz multiLock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuidValue<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token string">&quot;---task is over multiLock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;multiLock exception &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            redLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放分布式锁成功key:{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">CACHE_KEY_REDLOCK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">&quot;multiLock task is over  &quot;</span><span class="token operator">+</span>uuidValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓存过期淘汰策略" tabindex="-1"><a class="header-anchor" href="#缓存过期淘汰策略"><span>缓存过期淘汰策略</span></a></h2><h3 id="默认内存配置" tabindex="-1"><a class="header-anchor" href="#默认内存配置"><span>默认内存配置</span></a></h3><p>查看Redis内存使用情况</p><ul><li><code>info memory</code></li><li><code>config get memory</code></li></ul><p>修改默认内存大小：</p><ul><li>打开Redis配置文件，设置maxmemory参数，单位是字节，（64位操作系统下，设置0代表无上限）设置推荐为物理机的3/4</li><li>使用命令：<code>config set maxmemory 1234</code>(该方式单次生效，重启后失效)</li></ul><p>数据不设置过期时间会很快导致OOM，数据写满后会触发内存淘汰。</p><h3 id="过期键的删除策略" tabindex="-1"><a class="header-anchor" href="#过期键的删除策略"><span>过期键的删除策略</span></a></h3><h4 id="立即删除" tabindex="-1"><a class="header-anchor" href="#立即删除"><span>立即删除</span></a></h4><p>立即删除能保证内存中数据的最大新鲜度，因为它保证过期键值会在过期后马上被删除，其所占用的内存也会随之释放。但是立即删除对cpu是最不友好的。因为删除操作会占用cpu的时间，如果刚好碰上了cpu很忙的时候，就会给cpu造成额外的压力。这会产生大量的性能消耗，同时也会影响数据的读取操作。</p><p>总结：对CPU不友好，用处理器性能换取存储空间（<strong>时间换空间</strong>）</p><h4 id="惰性删除" tabindex="-1"><a class="header-anchor" href="#惰性删除"><span>惰性删除</span></a></h4><p>数据到达过期时间，不做处理。等下次访问该数据时</p><ul><li><p>如果未过期，返回数据</p></li><li><p>发现已过期，删除，返回不存在</p></li></ul><p>惰性删除策略的缺点是，它对内存是最不友好的。</p><p>如果一个键已经过期，而这个键又仍然保留在redis中，那么只要这个过期键不被删除，它所占用的内存就不会释放。</p><p>在使用惰性删除策略时，如果数据库中有非常多的过期键，而这些过期键又恰好没有被访问到的话，那么它们也许永远也不会被删除(除非用户手动执行<code>FLUSHDB</code>)，我们甚至可以将这种情况看作是一种内存泄漏–无用的垃圾数据占用了大量的内存，而服务器却不会自己去释放它们，这对于运行状态非常依赖于内存的Redis服务器来说,肯定不是一个好消息</p><p>开启惰性删除：<code>lazyfree-lazy-eviction=yes</code></p><p>总结：对memory不友好，用存储空间换取处理器性能（<strong>空间换时间</strong>）</p><h4 id="定期删除" tabindex="-1"><a class="header-anchor" href="#定期删除"><span>定期删除</span></a></h4><p>通过一个定时任务，周期性的抽样部分过期的key，然后执行删除。执行周期有两种：</p><ul><li>Redis服务初始化函数initServer()中设置定时任务，按照server.hz的频率来执行过期key清理，模式为<em>SLOW</em></li><li>Redis的每个事件循环前会调用beforeSleep()函数，执行过期key清理，模式为<em>FAST</em></li></ul><p><strong>SLOW</strong>模式规则：</p><ol><li>执行频率受server.hz影响，默认为10，即每秒执行10次，每个执行周期100ms。</li><li>执行清理耗时不超过一次执行周期的25%.默认slow模式耗时不超过25ms</li><li>逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>如果没达到时间上限（25ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ol><p><strong>FAST</strong>模式规则（过期key比例小于10%不执行）：</p><ol><li>执行频率受beforeSleep()调用频率影响，但两次FAST模式间隔不低于2ms</li><li>执行清理耗时不超过1ms</li><li>逐个遍历db，逐个遍历DB中的bucket，抽取20个key判断是否过期</li><li>如果没达到时间上限（1ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ol><hr><p>以上几种方案可能存在的问题：</p><ul><li>定期删除时，从来没有被抽查到</li><li>惰性删除时，也从来没有被点中使用过</li></ul><p>上述问题会导致大量过期的key堆积在内存中，导致redis内存空间紧张或者很快耗尽，由此引出缓存淘汰策略</p><h3 id="缓存淘汰策略" tabindex="-1"><a class="header-anchor" href="#缓存淘汰策略"><span>缓存淘汰策略</span></a></h3><p><strong>2个维度</strong></p><ol><li>过期键中筛选</li><li>所有键中筛选</li></ol><p><strong>4个方面</strong></p><ol><li><p><strong>LRU</strong>：最近最少使用页面置换算法，淘汰最长时间未被使用的页面，看页面最后一次被使用到发生调度的时间长短，首先淘汰最长时间未被使用的页面。</p></li><li><p><strong>LFU</strong>：最近最不常用页面置换算法，淘汰一定时期内被访问次数最少的页，看一定时间段内页面被使用的频率，淘汰一定时期内被访问次数最少的页面</p><ul><li><p>举例</p><p>某次时期Time为10分钟,如果每分钟进行一次调页,主存块为3,若所需页面走向为2 1 2 1 2 3 4，假设到页面4时会发生缺页中断</p><ul><li>按LRU算法,应换页面1(1页面最久未被使用)</li><li>按LFU算法应换页面3(十分钟内,页面3只使用了一次)</li></ul><p>可见LRU关键是看页面最后一次被使用到发生调度的时间长短,而LFU关键是看一定时间段内页面被使用的频率</p></li></ul></li><li><p><strong>random</strong>:随机删除</p></li><li><p><strong>ttl</strong>：根据过期时间删除</p></li></ol><p><strong>8个选项</strong></p><ol><li><code>noeviction</code>:不会驱逐任何key,即使内存达到上限也不进行置换，所有能引起内存增加的命令都会返回ERROR（<strong>默认</strong>）</li><li><code>allkeys-lru</code>:对所有key使用LRU算法进行删除，优先删除最近最不经常使用的key，用以保存新数据（<strong>最泛用</strong>）</li><li><code>volatile-lru</code>:对所有设置了过期时间的key使用LRU算法进行删除</li><li><code>allkeys-random</code>:对所有key随机删除</li><li><code>volatile-random</code>:对所有设置了过期时间的key随机删除</li><li><code>volatile-ttl</code>:删除即将过期的key</li><li><code>allkeys-lfu</code>:对所有key使用LFU算法删除</li><li><code>volatile-lfu</code>:对所有设置了过期时间的key使用LFU算法进行删除</li></ol><p><strong>性能建议</strong></p><ul><li>避免存储BigKey</li><li>开启惰性删除：<code>lazyfree-lazy-eviction=yes</code></li></ul><h2 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构"><span>底层数据结构</span></a></h2><h3 id="sds" tabindex="-1"><a class="header-anchor" href="#sds"><span>SDS</span></a></h3><p>Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。</p><p>Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题：</p><ul><li>获取字符串长度的需要通过运算</li><li>非二进制安全</li><li>不可修改</li></ul><p>Redis构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称SDS。</p><p>例如：执行命令<code>set name Jack</code></p><p>Redis将在底层创建2个SDS，其中一个是包含&quot;name&quot;的SDS,另一个是包含“虎哥”的SDS。</p><p>SDS是一个结构体，源码如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior07.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中，一个包含字符串“name”的SDS结构如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior08.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>SDS之所以叫做动态字符串，是因为它具备动态扩容的能力，例如一个内容为“hi”的SDS：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior09.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假如我们要给SDS追加一段字符串“,Amy”，这里首先会申请新内存空间：</p><ul><li><p>如果新字符串小于1M，则新空间为<em>扩展后字符串长度的两倍+1</em>；</p></li><li><p>如果新字符串大于1M，则新空间为<em>扩展后字符串长度+1M+1</em>。</p></li></ul><p>这种机制称为<strong>内存预分配</strong>。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="intset" tabindex="-1"><a class="header-anchor" href="#intset"><span>intset</span></a></h3><p>IntSet是Redis中set集合的一种实现方式，基于整数数组来实现，并且具备长度可变、有序等特征。<br> 结构如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中的encoding包含三种模式，表示存储的整数大小不同：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在，数组中每个数字都在int16_t的范围内，因此采用的编码方式是INTSET_ENC_INT16，每部分占用的字节大小为：</p><ul><li>encoding：4字节</li><li>length：4字节</li><li>contents：2字节 * 3 = 6字节</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们向其中添加一个数字：50000，这个数字超出了int16_t的范围，intset会自动升级编码方式到合适的大小。<br> 以当前案例来说流程如下：</p><ol><li>升级编码为INTSET_ENC_INT32, 每个整数占4字节，并按照新的编码方式及元素个数扩容数组</li><li>倒序依次将数组中的元素拷贝到扩容后的正确位置</li><li>将待添加的元素放入数组末尾</li><li>最后，将inset的encoding属性改为INTSET_ENC_INT32，将length属性改为4</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>总结</strong></p><p>Intset可以看做是特殊的整数数组，具备一些特点：</p><ul><li>Redis会确保Intset中的元素唯一、有序</li><li>具备类型升级机制，可以节省内存空间</li><li>底层采用二分查找方式来查询</li></ul><h3 id="dict" tabindex="-1"><a class="header-anchor" href="#dict"><span>Dict</span></a></h3><p>Redis是一个键值型（Key-Value Pair）的数据库，我们可以根据键实现快速的增删改查。而键与值的映射关系正是通过Dict来实现的。<br> Dict由三部分组成，分别是：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当我们向Dict添加键值对时，Redis首先根据key计算出hash值（h），然后利用 h &amp; sizemask来计算元素应该存储到数组中的哪个索引位置。我们存储k1=v1，假设k1的哈希值h=1，则1&amp;3=1，因此k1=v1要存储到数组角标1位置。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Dict由三部分组成，分别是：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior18.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Dict的扩容</strong></p><p>Dict中的HashTable就是数组结合单向链表的实现，当集合中元素较多时，必然导致哈希冲突增多，链表过长，则查询效率会大大降低。<br> Dict在每次新增键值对时都会检查负载因子（LoadFactor = used/size） ，满足以下两种情况时会触发哈希表扩容：</p><ul><li>哈希表的 LoadFactor &gt;= 1，并且服务器没有执行 BGSAVE 或者 BGREWRITEAOF 等后台进程；</li><li>哈希表的 LoadFactor &gt; 5 ；</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior20.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior21.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Dict的rehash</strong></p><p>不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的size和sizemask变化，而key的查询与sizemask有关。因此必须对哈希表中的每一个key重新计算索引，插入新的哈希表，这个过程称为rehash。过程是这样的：</p><ol><li><p>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：</p><ul><li>如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n</li><li>如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）</li></ul></li><li><p>按照新的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]</p></li><li><p>设置dict.rehashidx = 0，标示开始rehash</p></li><li><p>将dict.ht[0]中的每一个dictEntry都rehash到dict.ht[1]</p></li><li><p>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</p></li><li><p>将rehashidx赋值为-1，代表rehash结束</p></li><li><p>在rehash过程中，新增操作，则直接写入ht[1]，查询、修改和删除则会在dict.ht[0]和dict.ht[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空</p></li></ol><p>整个过程可以描述成：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior22.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>总结</strong></p><p>Dict的结构：</p><ul><li>类似Java的HashTable，底层是数组加链表来解决哈希冲突</li><li>Dict包含两个哈希表，ht[0]平常用，ht[1]用来rehash</li></ul><p>Dict的伸缩：</p><ul><li>当LoadFactor大于5或者LoadFactor大于1并且没有子进程任务时，Dict扩容</li><li>当LoadFactor小于0.1时，Dict收缩</li><li>扩容大小为第一个大于等于used + 1的2^n</li><li>收缩大小为第一个大于等于used 的2^n</li><li>Dict采用渐进式rehash，每次访问Dict时执行一次rehash</li><li>rehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表</li></ul><h3 id="ziplist" tabindex="-1"><a class="header-anchor" href="#ziplist"><span>ZipList</span></a></h3><p>ZipList 是一种特殊的“双端链表” ，由一系列特殊编码的连续内存块组成。可以在任意一端进行压入/弹出操作, 并且该操作的时间复杂度为 O(1)。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior24.png" alt="image-20241023090358960" tabindex="0" loading="lazy"><figcaption>image-20241023090358960</figcaption></figure><table><thead><tr><th>属性</th><th>类型</th><th>长度</th><th>用途</th></tr></thead><tbody><tr><td>zlbytes</td><td>uint32_t</td><td>4字节</td><td>记录整个压缩列表占用的内存字节数</td></tr><tr><td>zltail</td><td>uint32_t</td><td>4字节</td><td>记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过这个偏移量，可以确定表尾节点的地址。</td></tr><tr><td>zllen</td><td>uint16_t</td><td>2字节</td><td>记录了压缩列表包含的节点数量。 最大值为UINT16_MAX （65534），如果超过这个值，此处会记录为65535，但节点的真实数量需要遍历整个压缩列表才能计算得出。</td></tr><tr><td>entry</td><td>列表节点</td><td>不定</td><td>压缩列表包含的各个节点，节点的长度由节点保存的内容决定。</td></tr><tr><td>zlend</td><td>uint8_t</td><td>1字节</td><td>特殊值 0xFF （十进制 255 ），用于标记压缩列表的末端。</td></tr></tbody></table><p><strong>ZipListEntry</strong></p><p>ZipList 中的Entry并不像普通链表那样记录前后节点的指针，因为记录两个指针要占用16个字节，浪费内存。而是采用了下面的结构：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior25.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>previous_entry_length：前一节点的长度，占1个或5个字节。</p><ul><li>如果前一节点的长度小于254字节，则采用1个字节来保存这个长度值</li><li>如果前一节点的长度大于254字节，则采用5个字节来保存这个长度值，第一个字节为0xfe，后四个字节才是真实长度数据</li></ul></li><li><p>encoding：编码属性，记录content的数据类型（字符串还是整数）以及长度，占用1个、2个或5个字节</p></li><li><p>contents：负责保存节点的数据，可以是字符串或整数</p></li></ul><p>ZipList中所有存储长度的数值均采用小端字节序，即低位字节在前，高位字节在后。例如：数值0x1234，采用小端字节序后实际存储值为：0x3412</p><p><strong>Encoding编码</strong></p><p>ZipListEntry中的encoding编码分为字符串和整数两种：<br> 字符串：如果encoding是以“00”、“01”或者“10”开头，则证明content是字符串</p><table><thead><tr><th><strong>编码</strong></th><th><strong>编码长度</strong></th><th><strong>字符串大小</strong></th></tr></thead><tbody><tr><td>|00pppppp|</td><td>1 bytes</td><td>&lt;= 63 bytes</td></tr><tr><td>|01pppppp|qqqqqqqq|</td><td>2 bytes</td><td>&lt;= 16383 bytes</td></tr><tr><td>|10000000|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt|</td><td>5 bytes</td><td>&lt;= 4294967295 bytes</td></tr></tbody></table><p>例如，我们要保存字符串：“ab”和 “bc”</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior26.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ZipListEntry中的encoding编码分为字符串和整数两种：</p><ul><li>整数：如果encoding是以“11”开始，则证明content是整数，且encoding固定只占用1个字节</li></ul><table><thead><tr><th><strong>编码</strong></th><th><strong>编码长度</strong></th><th><strong>整数类型</strong></th></tr></thead><tbody><tr><td>11000000</td><td>1</td><td>int16_t（2 bytes）</td></tr><tr><td>11010000</td><td>1</td><td>int32_t（4 bytes）</td></tr><tr><td>11100000</td><td>1</td><td>int64_t（8 bytes）</td></tr><tr><td>11110000</td><td>1</td><td>24位有符整数(3 bytes)</td></tr><tr><td>11111110</td><td>1</td><td>8位有符整数(1 bytes)</td></tr><tr><td>1111xxxx</td><td>1</td><td>直接在xxxx位置保存数值，范围从0001~1101，减1后结果为实际值</td></tr></tbody></table><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior27.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior28.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="连锁更新问题" tabindex="-1"><a class="header-anchor" href="#连锁更新问题"><span>连锁更新问题</span></a></h4><p>ZipList的每个Entry都包含previous_entry_length来记录上一个节点的大小，长度是1个或5个字节：<br> 如果前一节点的长度小于254字节，则采用1个字节来保存这个长度值<br> 如果前一节点的长度大于等于254字节，则采用5个字节来保存这个长度值，第一个字节为0xfe，后四个字节才是真实长度数据<br> 现在，假设我们有N个连续的、长度为250~253字节之间的entry，因此entry的previous_entry_length属性用1个字节即可表示，如图所示：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior29.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ZipList这种特殊情况下产生的连续多次空间扩展操作称之为连锁更新（Cascade Update）。新增、删除都可能导致连锁更新的发生。</p><p><strong>ZipList特性总结</strong></p><ul><li>压缩列表的可以看做一种连续内存空间的&quot;双向链表&quot;</li><li>列表的节点之间不是通过指针连接，而是记录上一节点和本节点长度来寻址，内存占用较低</li><li>如果列表数据过多，导致链表过长，可能影响查询性能</li><li>增或删较大数据时有可能发生连续更新问题</li></ul><h3 id="quicklist" tabindex="-1"><a class="header-anchor" href="#quicklist"><span>QuickList</span></a></h3><p>问题1：ZipList虽然节省内存，但申请内存必须是连续空间，如果内存占用较多，申请内存效率很低。怎么办？</p><p>​ 答：为了缓解这个问题，我们必须限制ZipList的长度和entry大小。</p><p>问题2：但是我们要存储大量数据，超出了ZipList最佳的上限该怎么办？</p><p>​ 答：我们可以创建多个ZipList来分片存储数据。</p><p>问题3：数据拆分后比较分散，不方便管理和查找，这多个ZipList如何建立联系？</p><p>​ 答：Redis在3.2版本引入了新的数据结构QuickList，它是一个双端链表，只不过链表中的每个节点都是一个ZipList。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior30.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了避免QuickList中的每个ZipList中entry过多，Redis提供了一个配置项：list-max-ziplist-size来限制。<br> 如果值为正，则代表ZipList的允许的entry个数的最大值<br> 如果值为负，则代表ZipList的最大内存大小，分5种情况：</p><ul><li>-1：每个ZipList的内存占用不能超过4kb</li><li>-2：每个ZipList的内存占用不能超过8kb</li><li>-3：每个ZipList的内存占用不能超过16kb</li><li>-4：每个ZipList的内存占用不能超过32kb</li><li>-5：每个ZipList的内存占用不能超过64kb</li></ul><p>其默认值为 -2：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior31.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以下是QuickList的和QuickListNode的结构源码：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior32.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们接下来用一段流程图来描述当前的这个结构</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior33.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>QuickList特点总结</strong></p><ul><li>是一个节点为ZipList的双端链表</li><li>节点采用ZipList，解决了传统链表的内存占用问题</li><li>控制了ZipList大小，解决连续内存空间申请效率问题</li><li>中间节点可以压缩，进一步节省了内存</li></ul><h3 id="skiplist" tabindex="-1"><a class="header-anchor" href="#skiplist"><span>SkipList</span></a></h3><p>SkipList（跳表）首先是链表，但与传统链表相比有几点差异：<br> 元素按照升序排列存储<br> 节点可能包含多个指针，指针跨度不同。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior34.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>SkipList（跳表）首先是链表，但与传统链表相比有几点差异：<br> 元素按照升序排列存储<br> 节点可能包含多个指针，指针跨度不同。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior35.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>SkipList（跳表）首先是链表，但与传统链表相比有几点差异：<br> 元素按照升序排列存储<br> 节点可能包含多个指针，指针跨度不同。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior36.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>SkipList的特点总结</strong></p><ul><li>跳跃表是一个双向链表，每个节点都包含score和ele值</li><li>节点按照score值排序，score值一样则按照ele字典排序</li><li>每个节点都可以包含多层指针，层数是1到32之间的随机数</li><li>不同层指针到下一个节点的跨度不同，层级越高，跨度越大</li><li>增删改查效率与红黑树基本一致，实现却更简单</li></ul><h3 id="redisobject" tabindex="-1"><a class="header-anchor" href="#redisobject"><span>RedisObject</span></a></h3><p>Redis中的任意数据类型的键和值都会被封装为一个RedisObject，也叫做Redis对象，源码如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior37.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>什么是redisObject？</strong><br> 从Redis的使用者的角度来看，⼀个Redis节点包含多个database（非cluster模式下默认是16个，cluster模式下只能是1个），而一个database维护了从key space到object space的映射关系。这个映射关系的key是string类型，⽽value可以是多种数据类型，比如：<br> string, list, hash、set、sorted set等。我们可以看到，key的类型固定是string，而value可能的类型是多个。<br> ⽽从Redis内部实现的⾓度来看，database内的这个映射关系是用⼀个dict来维护的。dict的key固定用⼀种数据结构来表达就够了，这就是动态字符串sds。而value则比较复杂，为了在同⼀个dict内能够存储不同类型的value，这就需要⼀个通⽤的数据结构，这个通用的数据结构就是robj，全名是redisObject。</p><p><strong>Redis的编码方式</strong></p><p>Redis中会根据存储的数据类型不同，选择不同的编码方式，共包含11种不同类型：</p><table><thead><tr><th><strong>编号</strong></th><th><strong>编码方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>0</td><td>OBJ_ENCODING_RAW</td><td>raw编码动态字符串</td></tr><tr><td>1</td><td>OBJ_ENCODING_INT</td><td>long类型的整数的字符串</td></tr><tr><td>2</td><td>OBJ_ENCODING_HT</td><td>hash表（字典dict）</td></tr><tr><td>3</td><td>OBJ_ENCODING_ZIPMAP</td><td>已废弃</td></tr><tr><td>4</td><td>OBJ_ENCODING_LINKEDLIST</td><td>双端链表</td></tr><tr><td>5</td><td>OBJ_ENCODING_ZIPLIST</td><td>压缩列表</td></tr><tr><td>6</td><td>OBJ_ENCODING_INTSET</td><td>整数集合</td></tr><tr><td>7</td><td>OBJ_ENCODING_SKIPLIST</td><td>跳表</td></tr><tr><td>8</td><td>OBJ_ENCODING_EMBSTR</td><td>embstr的动态字符串</td></tr><tr><td>9</td><td>OBJ_ENCODING_QUICKLIST</td><td>快速列表</td></tr><tr><td>10</td><td>OBJ_ENCODING_STREAM</td><td>Stream流</td></tr></tbody></table><p><strong>五种数据结构</strong></p><p>Redis中会根据存储的数据类型不同，选择不同的编码方式。每种数据类型的使用的编码方式如下：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>编码方式</strong></th></tr></thead><tbody><tr><td>OBJ_STRING</td><td>int、embstr、raw</td></tr><tr><td>OBJ_LIST</td><td>LinkedList和ZipList(3.2以前)、QuickList（3.2以后）</td></tr><tr><td>OBJ_SET</td><td>intset、HT</td></tr><tr><td>OBJ_ZSET</td><td>ZipList、HT、SkipList</td></tr><tr><td>OBJ_HASH</td><td>ZipList、HT</td></tr></tbody></table><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><p>String是Redis中最常见的数据存储类型：</p><p>其基本编码方式是RAW，基于简单动态字符串（SDS）实现，存储上限为512mb。</p><p>如果存储的SDS长度小于44字节，则会采用EMBSTR编码，此时object head与SDS是一段连续空间。申请内存时</p><p>只需要调用一次内存分配函数，效率更高。</p><p>（1）底层实现⽅式：动态字符串sds 或者 long<br> String的内部存储结构⼀般是sds（Simple Dynamic String，可以动态扩展内存），但是如果⼀个String类型的value的值是数字，那么Redis内部会把它转成long类型来存储，从⽽减少内存的使用。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior38.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果存储的字符串是整数值，并且大小在LONG_MAX范围内，则会采用INT编码：直接将数据保存在RedisObject的ptr指针位置（刚好8字节），不再需要SDS了。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior39.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior40.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior41.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确切地说，String在Redis中是⽤⼀个robj来表示的。</p><p>用来表示String的robj可能编码成3种内部表⽰：OBJ_ENCODING_RAW，OBJ_ENCODING_EMBSTR，OBJ_ENCODING_INT。<br> 其中前两种编码使⽤的是sds来存储，最后⼀种OBJ_ENCODING_INT编码直接把string存成了long型。<br> 在对string进行incr, decr等操作的时候，如果它内部是OBJ_ENCODING_INT编码，那么可以直接行加减操作；如果它内部是OBJ_ENCODING_RAW或OBJ_ENCODING_EMBSTR编码，那么Redis会先试图把sds存储的字符串转成long型，如果能转成功，再进行加减操作。对⼀个内部表示成long型的string执行append, setbit, getrange这些命令，针对的仍然是string的值（即⼗进制表示的字符串），而不是针对内部表⽰的long型进⾏操作。比如字符串”32”，如果按照字符数组来解释，它包含两个字符，它们的ASCII码分别是0x33和0x32。当我们执行命令setbit key 7 0的时候，相当于把字符0x33变成了0x32，这样字符串的值就变成了”22”。⽽如果将字符串”32”按照内部的64位long型来解释，那么它是0x0000000000000020，在这个基础上执⾏setbit位操作，结果就完全不对了。因此，在这些命令的实现中，会把long型先转成字符串再进行相应的操作。</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><p>Redis的List类型可以从首、尾操作列表中的元素：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior42.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>哪一个数据结构能满足上述特征？</p><ul><li>LinkedList ：普通链表，可以从双端访问，内存占用较高，内存碎片较多</li><li>ZipList ：压缩列表，可以从双端访问，内存占用低，存储上限低</li><li>QuickList：LinkedList + ZipList，可以从双端访问，内存占用较低，包含多个ZipList，存储上限高</li></ul><p>Redis的List结构类似一个双端链表，可以从首、尾操作列表中的元素：</p><p>在3.2版本之前，Redis采用ZipList和LinkedList来实现List，当元素数量小于512并且元素大小小于64字节时采用ZipList编码，超过则采用LinkedList编码。</p><p>在3.2版本之后，Redis统一采用QuickList来实现List：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior43.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h3><p>Set是Redis中的单列集合，满足下列特点：</p><ul><li>不保证有序性</li><li>保证元素唯一</li><li>求交集、并集、差集</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior44.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看出，Set对查询元素的效率要求非常高，思考一下，什么样的数据结构可以满足？<br> HashTable，也就是Redis中的Dict，不过Dict是双列集合（可以存键、值对）</p><p>Set是Redis中的集合，不一定确保元素有序，可以满足元素唯一、查询效率要求极高。<br> 为了查询效率和唯一性，set采用HT编码（Dict）。Dict中的key用来存储元素，value统一为null。<br> 当存储的所有数据都是整数，并且元素数量不超过set-max-intset-entries时，Set会采用IntSet编码，以节省内存</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior45.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结构如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior46.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="zset" tabindex="-1"><a class="header-anchor" href="#zset"><span>ZSET</span></a></h3><p>ZSet也就是SortedSet，其中每一个元素都需要指定一个score值和member值：</p><ul><li>可以根据score值排序后</li><li>member必须唯一</li><li>可以根据member查询分数</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior47.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，zset底层数据结构必须满足键值存储、键必须唯一、可排序这几个需求。之前学习的哪种编码结构可以满足？</p><ul><li>SkipList：可以排序，并且可以同时存储score和ele值（member）</li><li>HT（Dict）：可以键值存储，并且可以根据key找value</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior48.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior49.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当元素数量不多时，HT和SkipList的优势不明显，而且更耗内存。因此zset还会采用ZipList结构来节省内存，不过需要同时满足两个条件：</p><ul><li>元素数量小于zset_max_ziplist_entries，默认值128</li><li>每个元素都小于zset_max_ziplist_value字节，默认值64</li></ul><p>ziplist本身没有排序功能，而且没有键值对的概念，因此需要有zset通过编码实现：</p><ul><li>ZipList是连续内存，因此score和element是紧挨在一起的两个entry， element在前，score在后</li><li>score越小越接近队首，score越大越接近队尾，按照score值升序排列</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior50.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior51.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h3><p>Hash结构与Redis中的Zset非常类似：</p><ul><li>都是键值存储</li><li>都需求根据键获取值</li><li>键必须唯一</li></ul><p>区别如下：</p><ul><li>zset的键是member，值是score；hash的键和值都是任意值</li><li>zset要根据score排序；hash则无需排序</li></ul><p>（1）底层实现方式：压缩列表ziplist 或者 字典dict<br> 当Hash中数据项比较少的情况下，Hash底层才⽤压缩列表ziplist进⾏存储数据，随着数据的增加，底层的ziplist就可能会转成dict，具体配置如下：</p><p>hash-max-ziplist-entries 512</p><p>hash-max-ziplist-value 64</p><p>当满足上面两个条件其中之⼀的时候，Redis就使⽤dict字典来实现hash。<br> Redis的hash之所以这样设计，是因为当ziplist变得很⼤的时候，它有如下几个缺点：</p><ul><li>每次插⼊或修改引发的realloc操作会有更⼤的概率造成内存拷贝，从而降低性能。</li><li>⼀旦发生内存拷贝，内存拷贝的成本也相应增加，因为要拷贝更⼤的⼀块数据。</li><li>当ziplist数据项过多的时候，在它上⾯查找指定的数据项就会性能变得很低，因为ziplist上的查找需要进行遍历。</li></ul><p>总之，ziplist本来就设计为各个数据项挨在⼀起组成连续的内存空间，这种结构并不擅长做修改操作。⼀旦数据发⽣改动，就会引发内存realloc，可能导致内存拷贝。</p><p>hash结构如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior52.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>zset集合如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior53.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，Hash底层采用的编码与Zset也基本一致，只需要把排序有关的SkipList去掉即可：</p><p>Hash结构默认采用ZipList编码，用以节省内存。 ZipList中相邻的两个entry 分别保存field和value</p><p>当数据量较大时，Hash结构会转为HT编码，也就是Dict，触发条件有两个：</p><ul><li>ZipList中的元素数量超过了hash-max-ziplist-entries（默认512）</li><li>ZipList中的任意entry大小超过了hash-max-ziplist-value（默认64字节）</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior54.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="redis网络模型" tabindex="-1"><a class="header-anchor" href="#redis网络模型"><span>Redis网络模型</span></a></h2><h3 id="用户空间和内核态空间" tabindex="-1"><a class="header-anchor" href="#用户空间和内核态空间"><span>用户空间和内核态空间</span></a></h3><p>服务器大多都采用Linux系统，这里我们以Linux为例来讲解:</p><p>ubuntu和Centos 都是Linux的发行版，发行版可以看成对linux包了一层壳，任何Linux发行版，其系统内核都是Linux。我们的应用都需要通过Linux内核与硬件交互</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior55.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用户的应用，比如redis，mysql等其实是没有办法去执行访问我们操作系统的硬件的，所以我们可以通过发行版的这个壳子去访问内核，再通过内核去访问计算机硬件</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior56.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>计算机硬件包括，如cpu，内存，网卡等等，内核（通过寻址空间）可以操作硬件的，但是内核需要不同设备的驱动，有了这些驱动之后，内核就可以去对计算机硬件去进行 内存管理，文件系统的管理，进程的管理等等</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior57.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们想要用户的应用来访问，计算机就必须要通过对外暴露的一些接口，才能访问到，从而简介的实现对内核的操控，但是内核本身上来说也是一个应用，所以他本身也需要一些内存，cpu等设备资源，用户应用本身也在消耗这些资源，如果不加任何限制，用户去操作随意的去操作我们的资源，就有可能导致一些冲突，甚至有可能导致我们的系统出现无法运行的问题，因此我们需要把用户和<strong>内核隔离开</strong></p><p>进程的寻址空间划分成两部分：<strong>内核空间、用户空间</strong></p><p>什么是寻址空间呢？我们的应用程序也好，还是内核空间也好，都是没有办法直接去物理内存的，而是通过分配一些虚拟内存映射到物理内存中，我们的内核和应用程序去访问虚拟内存的时候，就需要一个虚拟地址，这个地址是一个无符号的整数，比如一个32位的操作系统，他的带宽就是32，他的虚拟地址就是2的32次方，也就是说他寻址的范围就是0~2的32次方， 这片寻址空间对应的就是2的32个字节，就是4GB，这个4GB，会有3个GB分给用户空间，会有1GB给内核系统</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior58.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Linux中，权限分成两个等级，0和3，用户空间只能执行受限的命令（Ring3），而且不能直接调用系统资源，必须通过内核提供的接口来访问内核空间可以执行特权命令（Ring0），调用一切系统资源，所以一般情况下，用户的操作是运行在用户空间，而内核运行的数据是在内核空间的，而有的情况下，一个应用程序需要去调用一些特权资源，去调用一些内核空间的操作，所以此时他俩需要在用户态和内核态之间进行切换。</p><p>比如：</p><p>Linux系统为了提高IO效率，会在用户空间和内核空间都加入缓冲区：</p><ul><li><p>写数据时，要把用户缓冲数据拷贝到内核缓冲区，然后写入设备</p></li><li><p>读数据时，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区</p></li></ul><p>针对这个操作：我们的用户在写读数据时，会去向内核态申请，想要读取内核的数据，而内核数据要去等待驱动程序从硬件上读取数据，当从磁盘上加载到数据之后，内核会将数据写入到内核的缓冲区中，然后再将数据拷贝到用户态的buffer中，然后再返回给应用程序，整体而言，速度慢，就是这个原因，为了加速，我们希望read也好，还是wait for data也最好都不要等待，或者时间尽量的短。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior59.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="阻塞io" tabindex="-1"><a class="header-anchor" href="#阻塞io"><span>阻塞IO</span></a></h3><p>在《UNIX网络编程》一书中，总结归纳了5种IO模型：</p><ul><li>阻塞IO（Blocking IO）</li><li>非阻塞IO（Nonblocking IO）</li><li>IO多路复用（IO Multiplexing）</li><li>信号驱动IO（Signal Driven IO）</li><li>异步IO（Asynchronous IO）</li></ul><p>应用程序想要去读取数据，他是无法直接去读取磁盘数据的，他需要先到内核里边去等待内核操作硬件拿到数据，这个过程就是1，是需要等待的，等到内核从磁盘上把数据加载出来之后，再把这个数据写给用户的缓存区，这个过程是2，如果是阻塞IO，那么整个过程中，用户从发起读请求开始，一直到读取到数据，都是一个阻塞状态。</p><p>具体流程如下图：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior60.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用户去读取数据时，会去先发起1个<code>recvform</code>命令，去尝试从内核上加载数据，如果内核没有数据，那么用户就会等待，此时内核会去从硬件上读取数据，内核读取数据之后，会把数据拷贝到用户态，并且返回ok，整个过程，都是阻塞等待的，这就是阻塞IO</p><p><strong>总结</strong></p><p>顾名思义，阻塞IO就是两个阶段都必须阻塞等待：</p><p><strong>阶段一：</strong></p><ul><li>用户进程尝试读取数据（比如网卡数据）</li><li>此时数据尚未到达，内核需要等待数据</li><li>此时用户进程也处于阻塞状态</li></ul><p><strong>阶段二：</strong></p><ul><li>数据到达并拷贝到内核缓冲区，代表已就绪</li><li>将内核数据拷贝到用户缓冲区</li><li>拷贝过程中，用户进程依然阻塞等待</li><li>拷贝完成，用户进程解除阻塞，处理数据</li></ul><p>可以看到，阻塞IO模型中，用户进程在两个阶段都是阻塞状态。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior61.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="非阻塞io" tabindex="-1"><a class="header-anchor" href="#非阻塞io"><span>非阻塞IO</span></a></h3><p>顾名思义，非阻塞IO的<code>recvfrom</code>操作会立即返回结果而不是阻塞用户进程。</p><p><strong>阶段一：</strong></p><ul><li>用户进程尝试读取数据（比如网卡数据）</li><li>此时数据尚未到达，内核需要等待数据</li><li>返回异常给用户进程</li><li>用户进程拿到error后，再次尝试读取</li><li>循环往复，直到数据就绪</li></ul><p><strong>阶段二：</strong></p><ul><li>将内核数据拷贝到用户缓冲区</li><li>拷贝过程中，用户进程依然阻塞等待</li><li>拷贝完成，用户进程解除阻塞，处理数据</li><li>可以看到，非阻塞IO模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态。虽然是非阻塞，但性能并没有得到提高。而且忙等机制会导致CPU空转，CPU使用率暴增</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior62.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用"><span>IO多路复用</span></a></h3><p>无论是阻塞IO还是非阻塞IO，用户应用在一阶段都需要调用recvfrom来获取数据，差别在于无数据时的处理方案：</p><ul><li>如果调用recvfrom时，恰好没有数据，阻塞IO会使CPU阻塞，非阻塞IO使CPU空转，都不能充分发挥CPU的作用</li><li>如果调用recvfrom时，恰好有数据，则用户进程可以直接进入第二阶段，读取并处理数据</li></ul><p>所以怎么看起来以上两种方式性能都不好</p><p>而在单线程情况下，只能依次处理IO事件，如果正在处理的IO事件恰好未就绪（数据不可读或不可写），线程就会被阻塞，所有IO事件都必须等待，性能自然会很差。</p><p>就比如服务员给顾客点餐，<strong>分两步</strong>：</p><ul><li>顾客思考要吃什么（等待数据就绪）</li><li>顾客想好了，开始点餐（读取数据）</li></ul><p>要提高效率有几种办法？</p><ul><li><p>方案一：增加更多服务员（多线程）</p></li><li><p>方案二：不排队，谁想好了吃什么（数据就绪了），服务员就给谁点餐（用户应用就去读取数据）</p></li></ul><p>那么问题来了：用户进程如何知道内核中数据是否就绪呢？</p><p>所以接下来就需要详细的来解决多路复用模型是如何知道到底怎么知道内核数据是否就绪的问题了</p><p>这个问题的解决依赖于提出的 <strong>文件描述符</strong>（File Descriptor）：简称FD，是一个从 0 开始的无符号整数，用来关联Linux中的一个文件。在Linux中，一切皆文件，例如常规文件、视频、硬件设备等，当然也包括网络套接字（Socket）。</p><p>通过FD，网络模型可以利用一个线程监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。</p><p><strong>阶段一：</strong></p><ul><li>用户进程调用select，指定要监听的FD集合</li><li>核监听FD对应的多个socket</li><li>任意一个或多个socket数据就绪则返回readable</li><li>此过程中用户进程阻塞</li></ul><p><strong>阶段二：</strong></p><ul><li>用户进程找到就绪的socket</li><li>依次调用recvfrom读取数据</li><li>内核将数据拷贝到用户空间</li><li>用户进程处理数据</li></ul><p>当用户去读取数据的时候，不再去直接调用recvfrom了，而是调用select的函数，select函数会将需要监听的数据交给内核，由内核去检查这些数据是否就绪了，如果说这个数据就绪了，就会通知应用程序数据就绪，然后来读取数据，再从内核中把数据拷贝给用户态，完成数据处理，如果N多个FD一个都没处理完，此时就进行等待。</p><p>用IO复用模式，可以确保去读数据的时候，数据是一定存在的，他的效率比原来的阻塞IO和非阻塞IO性能都要高</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior63.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>IO多路复用是利用单个线程来同时监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。不过监听FD的方式、通知的方式又有多种实现，常见的有：</p><ul><li>select</li><li>poll</li><li>epoll</li></ul><p>其中select和pool相当于是当被监听的数据准备好之后，他会把你监听的FD整个数据都发给你，你需要到整个FD中去找，哪些是处理好了的，需要通过遍历的方式，所以性能也并不是那么好</p><p>而epoll，则相当于内核准备好了之后，他会把准备好的数据，直接发给你，就省去了遍历的动作。</p><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h4><p>select是Linux最早是由的I/O多路复用技术：</p><p>简单说，就是我们把需要处理的数据封装成FD，然后在用户态时创建一个fd的集合（这个集合的大小是要监听的那个FD的最大值+1，但是大小整体是有限制的 ），这个集合的长度大小是有限制的，同时在这个集合中，标明出来我们要控制哪些数据。</p><p>比如要监听的数据，是1,2,5三个数据，此时会执行select函数，然后将整个FD发给内核态，内核态会去遍历用户态传递过来的数据，如果发现这里边都数据都没有就绪，就休眠，直到有数据准备好时，就会被唤醒，唤醒之后，再次遍历一遍，看看谁准备好了，然后再处理掉没有准备好的数据，最后再将这个FD集合写回到用户态中去，此时用户态就知道有人准备好了，但是对于用户态而言，并不知道谁处理好了，所以用户态也需要去进行遍历，然后找到对应准备好数据的节点，再去发起读请求。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior64.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>select模式存在的问题：</p><ul><li>需要将整个fd_set从用户空间拷贝到内核空间，select结束还要再次拷贝回用户空间</li><li>select无法得知具体是哪个fd就绪，需要遍历整个fd_set</li><li>fd_set监听的fd数量不能超过1024</li></ul><h4 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>Poll</span></a></h4><p>poll模式对select模式做了简单改进，但性能提升不明显，部分关键代码如下：</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior65.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>IO流程：</p><ul><li>创建pollfd数组，向其中添加关注的fd信息，数组大小自定义</li><li>调用poll函数，将pollfd数组拷贝到内核空间，转链表存储，无上限</li><li>内核遍历fd，判断是否就绪</li><li>数据就绪或超时后，拷贝pollfd数组到用户空间，返回就绪fd数量n</li><li>用户进程判断n是否大于0,大于0则遍历pollfd数组，找到就绪的fd</li></ul><p><strong>与select对比：</strong></p><ul><li>select模式中的fd_set大小固定为1024，而pollfd在内核中采用链表，理论上无上限</li><li>监听FD越多，每次遍历消耗时间也越久，性能反而会下降</li></ul><h4 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll"><span>EPoll</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">eventpoll</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_root</span>  rbr<span class="token punctuation">;</span> <span class="token comment">// 一颗红黑树，记录要监听的FD</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> rdlist<span class="token punctuation">;</span><span class="token comment">// 一个链表，记录就绪的FD</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 1.创建一个epoll实例,内部是event poll，返回对应的句柄epfd</span>
<span class="token keyword">int</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.将一个FD添加到epoll的红黑树中，并设置ep_poll_callback</span>
<span class="token comment">// callback触发时，就把对应的FD加入到rdlist这个就绪列表中</span>
<span class="token keyword">int</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>
    <span class="token keyword">int</span> epfd<span class="token punctuation">,</span>  <span class="token comment">// epoll实例的句柄</span>
    <span class="token keyword">int</span> op<span class="token punctuation">,</span>    <span class="token comment">// 要执行的操作，包括：ADD、MOD、DEL</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">,</span>    <span class="token comment">// 要监听的FD</span>
    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>event <span class="token comment">// 要监听的事件类型：读、写、异常等</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.检查rdlist列表是否为空，不为空则返回就绪的FD的数量</span>
<span class="token keyword">int</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>
    <span class="token keyword">int</span> epfd<span class="token punctuation">,</span>                   <span class="token comment">// epoll实例的句柄</span>
    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>events<span class="token punctuation">,</span> <span class="token comment">// 空event数组，用于接收就绪的FD</span>
    <span class="token keyword">int</span> maxevents<span class="token punctuation">,</span>              <span class="token comment">// events数组的最大长度</span>
    <span class="token keyword">int</span> timeout   <span class="token comment">// 超时时间，-1用不超时；0不阻塞；大于0为阻塞时间</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>epoll模式是对select和poll的改进，它提供了三个函数：</p><p>第一个是<code>eventpoll</code>函数，他内部包含两个东西</p><ul><li>红黑树-&gt;记录的事要监听的FD</li><li>链表-&gt;记录的是就绪的FD</li></ul><p>紧接着调用<code>epoll_ctl</code>操作，将要监听的数据添加到红黑树上去，并且给每个fd设置一个监听函数，这个函数会在fd数据就绪时触发。准备好了就把fd数据添加到list_head中。</p><p><code>epoll_wait</code>函数</p><p>就去等待，在用户态创建一个空的events数组，当就绪之后，我们的回调函数会把数据添加到list_head中去，当调用这个函数的时候，会去检查list_head，当然这个过程需要参考配置的等待时间，可以等一定时间，也可以一直等， 如果在此过程中，检查到了list_head中有数据会将数据添加到链表中，此时将数据放入到events数组中，并且返回对应的操作的数量，用户态的此时收到响应后，从events中拿到对应准备好的数据的节点，再去调用方法去拿数据。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior66.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><p><strong>总结：</strong></p><p>select模式存在的三个问题：</p><ul><li>能监听的FD最大不超过1024</li><li>每次select都需要把所有要监听的FD都拷贝到内核空间</li><li>每次都要遍历所有FD来判断就绪状态</li></ul><p>poll模式的问题：</p><ul><li>poll利用链表解决了select中监听FD上限的问题，但依然要遍历所有FD，如果监听较多，性能会下降</li></ul><p>epoll模式中如何解决这些问题的？</p><ul><li>基于epoll实例中的红黑树保存要监听的FD，理论上无上限，而且增删改查效率都非常高</li><li>每个FD只需要执行一次epoll_ctl添加到红黑树，以后每次epol_wait无需传递任何参数，无需重复拷贝FD到内核空间</li><li>利用ep_poll_callback机制来监听FD状态，无需遍历所有FD，因此性能不会随监听的FD数量增多而下降</li></ul><h5 id="水平触发lt" tabindex="-1"><a class="header-anchor" href="#水平触发lt"><span>水平触发LT</span></a></h5><p>在水平触发模式下，只要文件描述符的事件（如可读、可写）没有被完全处理，<code>epoll_wait()</code> 调用就会不断返回该文件描述符。这意味着，如果应用程序没有读取或写入足够的数据来清除文件描述符上的事件，它将被多次返回。</p><p><strong>特点</strong>：</p><ul><li>应用程序需要手动处理事件，直到文件描述符上没有更多的事件。</li><li>应用程序可能会多次收到相同的文件描述符，即使事件尚未处理。</li><li>适用于简单的事件处理，不需要复杂的状态管理。</li></ul><h5 id="边缘触发et" tabindex="-1"><a class="header-anchor" href="#边缘触发et"><span>边缘触发ET</span></a></h5><p>在边缘触发模式下，<code>epoll_wait()</code> 只在文件描述符上的事件状态发生变化时返回一次。这意味着，应用程序必须在一次 <code>epoll_wait()</code> 调用中处理完所有的数据，否则可能会错过事件。</p><p><strong>特点</strong>：</p><ul><li>应用程序通常只需要处理一次文件描述符上的事件。</li><li>可以减少 <code>epoll_wait()</code> 的调用次数，提高效率。</li><li>需要更复杂的状态管理，以确保数据被完全处理。</li><li>适用于需要高效处理大量数据的场景。</li></ul><p><strong>选择指南</strong></p><ul><li><strong>数据完整性</strong>：如果你需要确保数据的完整性，并且希望在数据到达时立即处理，ET 可能是更好的选择。</li><li><strong>简单性</strong>：如果你的应用程序逻辑简单，或者你不希望处理复杂的状态管理，LT 可能更合适。</li><li><strong>性能</strong>：ET 通常在处理大量数据时提供更好的性能，因为它减少了系统调用的次数。</li><li><strong>资源使用</strong>：LT 可能会因为多次返回相同的文件描述符而导致资源使用增加，尤其是在高并发场景下。</li></ul><p>在实际应用中，ET 模式通常被认为更高效，因为它减少了不必要的 <code>epoll_wait()</code> 调用。但是，它也需要应用程序能够快速且完全地处理事件，否则可能会丢失数据。因此，选择哪种模式取决于具体的应用需求和设计。</p><h3 id="基于epoll的服务端流程" tabindex="-1"><a class="header-anchor" href="#基于epoll的服务端流程"><span>基于EPoll的服务端流程</span></a></h3><p>服务器启动以后，服务端会去调用epoll_create，创建一个epoll实例，epoll实例中包含两个数据</p><ul><li>红黑树（为空）：rb_root 用来去记录需要被监听的FD</li><li>链表（为空）：list_head，用来存放已经就绪的FD</li></ul><p>创建好了之后，会去调用<code>epoll_ctl</code>函数，此函数会会将需要监听的数据添加到<code>rb_root</code>中去，并且对当前这些存在于红黑树的节点设置回调函数，当这些被监听的数据一旦准备完成，就会被调用，而调用的结果就是将红黑树的FD添加到<code>list_head</code>中去(但是此时并没有完成)</p><p>当第二步完成后，就会调用<code>epoll_wait</code>函数，这个函数会去校验是否有数据准备完毕（因为数据一旦准备就绪，就会被回调函数添加到<code>list_head</code>中，在等待了一段时间后(可以进行配置)，如果等够了超时时间，则返回没有数据，如果有，则进一步判断当前是什么事件，如果是建立连接时间，则调用<code>accept()</code> 接受客户端socket，拿到建立连接的socket，然后建立起来连接，如果是其他事件，则把数据进行写出</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior67.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="信号驱动" tabindex="-1"><a class="header-anchor" href="#信号驱动"><span>信号驱动</span></a></h3><p>信号驱动IO是与内核建立SIGIO的信号关联并设置回调，当内核有FD就绪时，会发出SIGIO信号通知用户，期间用户应用可以执行其它业务，无需阻塞等待。</p><p>阶段一：</p><ul><li>用户进程调用sigaction，注册信号处理函数</li><li>内核返回成功，开始监听FD</li><li>用户进程不阻塞等待，可以执行其它业务</li><li>当内核数据就绪后，回调用户进程的SIGIO处理函数</li></ul><p>阶段二：</p><ul><li>收到SIGIO回调信号</li><li>调用recvfrom，读取</li><li>内核将数据拷贝到用户空间</li><li>用户进程处理数据</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior68.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当有大量IO操作时，信号较多，SIGIO处理函数不能及时处理可能导致信号队列溢出，而且内核空间与用户空间的频繁信号交互性能也较低。</p><h3 id="异步io" tabindex="-1"><a class="header-anchor" href="#异步io"><span>异步IO</span></a></h3><p>这种方式，不仅仅是用户态在试图读取数据后，不阻塞，而且当内核的数据准备完成后，也不会阻塞</p><p>他会由内核将所有数据处理完成后，由内核将数据写入到用户态中，然后才算完成，所以性能极高，不会有任何阻塞，全部都由内核完成，可以看到，异步IO模型中，用户进程在两个阶段都是非阻塞状态。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior69.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="各模型对比" tabindex="-1"><a class="header-anchor" href="#各模型对比"><span>各模型对比</span></a></h3><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior70.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="单线程与多线程" tabindex="-1"><a class="header-anchor" href="#单线程与多线程"><span>单线程与多线程</span></a></h2><p><strong>Redis到底是单线程还是多线程？</strong></p><ul><li>如果仅仅聊Redis的核心业务部分（命令处理），答案是单线程</li><li>如果是聊整个Redis，那么答案就是多线程</li></ul><p>在Redis版本迭代过程中，在两个重要的时间节点上引入了多线程的支持：</p><ul><li>Redis v4.0：引入多线程异步处理一些耗时较久的任务，例如异步删除命令<code>unlink</code></li><li>Redis v6.0：在核心网络模型中引入多线程，进一步提高对于多核CPU的利用率</li></ul><p>因此，对于Redis的核心网络模型，在Redis 6.0之前都是单线程。是利用epoll（Linux系统）这样的IO多路复用技术在事件循环中不断处理客户端情况。</p><p><strong>为什么Redis要选择单线程？</strong></p><ul><li>抛开持久化不谈，Redis是纯内存操作，执行速度非常快，它的性能瓶颈是网络延迟而不是执行速度，因此多线程并不会带来巨大的性能提升。</li><li>多线程会导致过多的上下文切换，带来不必要的开销</li><li>引入多线程会面临线程安全问题，必然要引入线程锁这样的安全手段，实现复杂度增高，而且性能也会大打折扣</li></ul><p><strong>Redis单线程与多线程网络模型变更</strong></p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior71.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior72.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当客户端想要去连接服务器，会先到IO多路复用模型进行排队，此时会有一个连接应答处理器接受读请求，然后又把读请求注册到具体模型中去，此时这些建立起来的连接，如果是客户端请求处理器去进行执行命令时，他会去把数据读取出来，然后把数据放入到client中， clinet去解析当前的命令转化为redis认识的命令，接下来就开始处理这些命令，从redis中的command中找到这些命令，然后就真正的去操作对应的数据了，当数据操作完成后，会去找到命令回复处理器，再由他将数据写出。</p><h2 id="resp协议" tabindex="-1"><a class="header-anchor" href="#resp协议"><span>RESP协议</span></a></h2><p>Redis是一个CS架构的软件，通信一般分两步（不包括pipeline和PubSub）：</p><ul><li>客户端（client）向服务端（server）发送一条命令</li><li>服务端解析并执行命令，返回响应结果给客户端因此客户端发送命令的格式、服务端响应结果的格式必须有一个规范，这个规范就是通信协议。</li></ul><p>而在Redis中采用的是RESP（Redis Serialization Protocol）协议：</p><ul><li>Redis 1.2版本引入了RESP协议</li><li>Redis 2.0版本中成为与Redis服务端通信的标准，称为RESP2</li><li>Redis 6.0版本中，从RESP2升级到了RESP3协议，增加了更多数据类型并且支持6.0的新特性--客户端缓存</li></ul><p>目前，默认使用的依然是RESP2协议。</p><p>在RESP中，通过首字节的字符来区分不同数据类型，常用的数据类型包括5种：</p><ul><li>单行字符串：首字节是 ‘+’ ，后面跟上单行字符串，以CRLF（ &quot;\\r\\n&quot; ）结尾。例如返回&quot;OK&quot;： &quot;+OK\\r\\n&quot;</li><li>错误（Errors）：首字节是 ‘-’ ，与单行字符串格式一样，只是字符串是异常信息，例如：&quot;-Error message\\r\\n&quot;</li><li>数值：首字节是 ‘:’ ，后面跟上数字格式的字符串，以CRLF结尾。例如：&quot;:10\\r\\n&quot;</li><li>多行字符串：首字节是 ‘$’ ，表示二进制安全的字符串，最大支持512MB： <ul><li>如果大小为0，则代表空字符串：&quot;$0\\r\\n\\r\\n&quot;</li><li>如果大小为-1，则代表不存在：&quot;$-1\\r\\n&quot;</li></ul></li><li>数组：首字节是 ‘*’，后面跟上数组元素个数，再跟上元素，元素数据类型不限</li></ul><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/database/redis/senior73.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,394);function L(O,C){const s=i("Mermaid");return l(),o("div",null,[u,a(s,{id:"mermaid-622",code:"eJxLy8kvT85ILCpR8Aniera1/8XyjqczVyjo6tophOTnJieWgJg1z+YvfbF+0fM9k5+unVGjEJSaklkMFoeIPJuz6unEvU92rH2/pwei8tnUDc961z3dNblGwbcyONCHCwBVyzZ0"}),r,a(s,{id:"mermaid-678",code:"eJxLy8kvT85ILCpR8Anierpu0bOO7c9Xr1fQ1bVTeLa1/8XyjqczV8TkwSWe75n8dO0MsLRfemZeRUzeszlrns7ZgBCvAYtD+M/mrHo6ce+THWuByuYvfbF+UVBqSmZxDZjkwqUfLItDf0h+bnJiSY0ChI7Je7F/9vMV3UiakQXgunUgmp9N3fCsd93TXZNrFHwrgwN9uACyoY5Y"}),d,k,a(s,{id:"mermaid-685",code:"eJxLy8kvT85ILCpR8AniKi5NSi9KLMhQ8HP39IvgUgCClMyi1OSSzPw8kDxIAAT80jPzKgxRuUaoXGM499mcNU/nbHi+Z/LTtTO4UvNSuJ6uW/SsY/vz1esVdHXtFJ5t7X+xvOPpzBUxeXAJiGKwNNgwCAvkJhCrBiwGUfNszqqnE/c+2bE2Ju/Z/KUv1i8KSk3JLK4Bk1wIHWA+Dh0h+bnJiSU1ChA6Ju/F/tnPV3QjnFCDLADXrQPR/Gzqhme9657umlyj4FsZHOjDBQBBl5v/"}),v,a(s,{id:"mermaid-689",code:"eJxLy8kvT85ILCpR8AniKi5NSi9KLMhQ8HP39IvgUgCClMyi1OSSzPw8kDxIAAT80jPzKgxRuUaoXGM499mcNU/nbHi+Z/LTtTO4UvNSELaE+Ps6O4ZwcaLYwRmSn5ucWGIIYxhxcb7YP/v5im4kE56uW/SsY/vz1esVdHXtFJ5t7X+xvOPpzBUxeXAJiGKwNNg5EBbIVyBWDVgMoubZnFVPJ+59smNtTN6z+UtfrF8UlJqSWVwDJrngOsBcHBog7gTbAHW7AhdJ6o24ICEBdhqyZ+FadSA6n03d8Kx33dNdk2sUfCuDA324ALZfxbU="}),m,n("ol",null,[n("li",null,[g,a(s,{id:"mermaid-839",code:"eJxLy8kvT85ILCpR8Anierpu0bOO7c9Xr1fQ1bWrebJ/3bMpO59ObXs6ubFGIbMkNVe3OLWoLDM5FSxtqGf4tG3m09alz6ZueNa77umuyTUKvpXBgT5cWJQaPe2f+HRH87NtHc8a1wPVBYLFjfQMn8+e+HTCGph4cmJyRiqKViM9o2eztzybtuH5nslP186oUQhKTcks5gIATFBWKQ=="}),b,h]),n("li",null,[f,a(s,{id:"mermaid-860",code:"eJxLy8kvT85ILCpR8Anierpu0bOO7c9Xr1fQ1bWrebJ/3bMpO59ObXs6ubFGIbMkNVe3OLWoLDM5FSxtqPe0bebT1qXPpm541rvu6a7JNQq+lcGBPiBJBefEvMScmDwjPcPnsyc+nbAGLPN8VktSZl5OfjpYSY2RntHLhlnP58NM6J/xbPaWZ82tT9u21igkJyZnpKLYZ6RnDJKftuH5nslP186oUQhKTcks5gIAH/9cvA=="}),y,w]),S]),q,a(s,{id:"mermaid-1071",code:"eJxLy8kvT85ILCpR8AnietrZ+7R/QzSEiuV6uqP55ay2F/vbn+1e8nTmimg0PlABWKGCrq5djaHuy7nznm2e+mL99mcbm2oU0NSimwXWY6QL4VtaqgI1gM3Cqw7If7F+/dOOJe/39Dzb0/+sr9NQFdXW53smP107A6zJWBfCeTZ/6Yv1i54u2fhiy1Kgvie7Jj2bthQi6OJUo/Bs6oZnveue7poM1mSi6+KEpuHF/ilPZ8/zC/XxQTHeFOgmkASa6qc7tz2dMBGi7smOtTBGw5Mdq0B+mDP/2fRtL6dveT5/7fNZLRBDoR4HAEpy8Fg="}),R,a(s,{id:"mermaid-1143",code:"eJxLy8kvT85ILCpR8AniUnQNCvIPUlTQ1bWrMbZ6vqrxecu23MTiktSip+umPpuzq0bBF8zjerpu0bOO7c9Xr3cEqzW0Kk4tedrR9nRH89M9/S+nND7due1Zx4SnXfNf9G1/um86UASuFUKBtRlZPd3T9GztUqDJTzu2PevqAumc0AMUqVEIzkksS+UCk2C1JlZPdux+srvvaUf7s95FTyf0Adkgfb3tz3ctf7JjF1AWqwOdwLpNrSACcOdAXAezBgBUp4pq"}),x])}const I=p(c,[["render",L],["__file","senior.html.vue"]]),z=JSON.parse('{"path":"/database/redis/senior.html","title":"高阶篇","lang":"zh-CN","frontmatter":{"title":"高阶篇","shortTitle":"高阶篇","description":"2023高阶篇","date":"2024-09-19T17:26:07.000Z","categories":["数据库"],"tags":["Redis"],"order":3},"headers":[{"level":2,"title":"大Key","slug":"大key","link":"#大key","children":[{"level":3,"title":"More Key","slug":"more-key","link":"#more-key","children":[]},{"level":3,"title":"Big Key","slug":"big-key","link":"#big-key","children":[]},{"level":3,"title":"恰当的Key设计","slug":"恰当的key设计","link":"#恰当的key设计","children":[]}]},{"level":2,"title":"批处理优化","slug":"批处理优化","link":"#批处理优化","children":[{"level":3,"title":"客户端与Redis的交互流程","slug":"客户端与redis的交互流程","link":"#客户端与redis的交互流程","children":[]},{"level":3,"title":"MSet","slug":"mset","link":"#mset","children":[]},{"level":3,"title":"Pipeline","slug":"pipeline","link":"#pipeline","children":[]},{"level":3,"title":"集群下的批处理","slug":"集群下的批处理","link":"#集群下的批处理","children":[]}]},{"level":2,"title":"慢查询优化","slug":"慢查询优化","link":"#慢查询优化","children":[]},{"level":2,"title":"内存划分、配置","slug":"内存划分、配置","link":"#内存划分、配置","children":[]},{"level":2,"title":"多级缓存","slug":"多级缓存","link":"#多级缓存","children":[]},{"level":2,"title":"缓存双写一致性更新策略","slug":"缓存双写一致性更新策略","link":"#缓存双写一致性更新策略","children":[{"level":3,"title":"同步策略","slug":"同步策略","link":"#同步策略","children":[]},{"level":3,"title":"同步双写更新策略","slug":"同步双写更新策略","link":"#同步双写更新策略","children":[]},{"level":3,"title":"异步通知更新策略","slug":"异步通知更新策略","link":"#异步通知更新策略","children":[]}]},{"level":2,"title":"HyperLogLog","slug":"hyperloglog","link":"#hyperloglog","children":[]},{"level":2,"title":"GEO","slug":"geo","link":"#geo","children":[]},{"level":2,"title":"布隆过滤器","slug":"布隆过滤器","link":"#布隆过滤器","children":[]},{"level":2,"title":"缓存预热、穿透、击穿、雪崩","slug":"缓存预热、穿透、击穿、雪崩","link":"#缓存预热、穿透、击穿、雪崩","children":[{"level":3,"title":"缓存预热","slug":"缓存预热","link":"#缓存预热","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]},{"level":3,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]}]},{"level":2,"title":"分布式锁","slug":"分布式锁","link":"#分布式锁","children":[{"level":3,"title":"红锁","slug":"红锁","link":"#红锁","children":[]},{"level":3,"title":"Redission","slug":"redission","link":"#redission","children":[]}]},{"level":2,"title":"缓存过期淘汰策略","slug":"缓存过期淘汰策略","link":"#缓存过期淘汰策略","children":[{"level":3,"title":"默认内存配置","slug":"默认内存配置","link":"#默认内存配置","children":[]},{"level":3,"title":"过期键的删除策略","slug":"过期键的删除策略","link":"#过期键的删除策略","children":[]},{"level":3,"title":"缓存淘汰策略","slug":"缓存淘汰策略","link":"#缓存淘汰策略","children":[]}]},{"level":2,"title":"底层数据结构","slug":"底层数据结构","link":"#底层数据结构","children":[{"level":3,"title":"SDS","slug":"sds","link":"#sds","children":[]},{"level":3,"title":"intset","slug":"intset","link":"#intset","children":[]},{"level":3,"title":"Dict","slug":"dict","link":"#dict","children":[]},{"level":3,"title":"ZipList","slug":"ziplist","link":"#ziplist","children":[]},{"level":3,"title":"QuickList","slug":"quicklist","link":"#quicklist","children":[]},{"level":3,"title":"SkipList","slug":"skiplist","link":"#skiplist","children":[]},{"level":3,"title":"RedisObject","slug":"redisobject","link":"#redisobject","children":[]},{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"Set","slug":"set","link":"#set","children":[]},{"level":3,"title":"ZSET","slug":"zset","link":"#zset","children":[]},{"level":3,"title":"Hash","slug":"hash","link":"#hash","children":[]}]},{"level":2,"title":"Redis网络模型","slug":"redis网络模型","link":"#redis网络模型","children":[{"level":3,"title":"用户空间和内核态空间","slug":"用户空间和内核态空间","link":"#用户空间和内核态空间","children":[]},{"level":3,"title":"阻塞IO","slug":"阻塞io","link":"#阻塞io","children":[]},{"level":3,"title":"非阻塞IO","slug":"非阻塞io","link":"#非阻塞io","children":[]},{"level":3,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":3,"title":"基于EPoll的服务端流程","slug":"基于epoll的服务端流程","link":"#基于epoll的服务端流程","children":[]},{"level":3,"title":"信号驱动","slug":"信号驱动","link":"#信号驱动","children":[]},{"level":3,"title":"异步IO","slug":"异步io","link":"#异步io","children":[]},{"level":3,"title":"各模型对比","slug":"各模型对比","link":"#各模型对比","children":[]}]},{"level":2,"title":"单线程与多线程","slug":"单线程与多线程","link":"#单线程与多线程","children":[]},{"level":2,"title":"RESP协议","slug":"resp协议","link":"#resp协议","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":75.49,"words":22646},"filePathRelative":"database/redis/senior.md","localizedDate":"2024年9月20日"}');export{I as comp,z as data};
