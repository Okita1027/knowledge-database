import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as e}from"./app-CJZ--YWM.js";const t={},p=e(`<h2 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb"><span>MongoDB</span></a></h2><p><a href="https://www.mongodb.com/zh-cn/docs/manual/" target="_blank" rel="noopener noreferrer">MongoDB 中文手册 v7.0</a></p><h2 id="spring整合" tabindex="-1"><a class="header-anchor" href="#spring整合"><span>Spring整合</span></a></h2><p><a href="https://docs.springframework.org.cn/spring-data/mongodb/reference/mongodb/template-config.html" target="_blank" rel="noopener noreferrer">Spring Data MongoDB 中文 </a></p><ol><li><p>引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置MongoDB连接参数</p><ul><li><p>方式1——YAML</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">27017</span>
      <span class="token key atrule">database</span><span class="token punctuation">:</span> learn
      
      <span class="token comment"># 等同于上面三句</span>
	  <span class="token comment"># uri: mongodb://localhost:27017/learn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式2——配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoClient</span> <span class="token function">mongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个MongoClient实例</span>
        <span class="token keyword">return</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://localhost:27017&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">MongoTemplate</span> <span class="token function">mongoTemplate</span><span class="token punctuation">(</span><span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MongoTemplate</span> mongoTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoTemplate</span><span class="token punctuation">(</span>mongoClient<span class="token punctuation">,</span> <span class="token string">&quot;learn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>实体类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 在实体类中添加 @Document 注解，指定集合名称，在UserService中就不用再次指定操作的集合了</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>业务类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    
<span class="token comment">//    private final String collName = &quot;users&quot;;</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        return mongoTemplate.findOne(query, User.class, collName);</span>
        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">TemplateApiApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> queen <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token string">&quot;Queen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="模板api" tabindex="-1"><a class="header-anchor" href="#模板api"><span>模板API</span></a></h2><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><h4 id="读偏好" tabindex="-1"><a class="header-anchor" href="#读偏好"><span>读偏好</span></a></h4><p><code>mongoTemplate.setReadPreference(ReadPreference.primary());</code></p><h4 id="写关注" tabindex="-1"><a class="header-anchor" href="#写关注"><span>写关注</span></a></h4><p><code>mongoTemplate.setWriteConcern(WriteConcern.MAJORITY);</code></p><h4 id="writeconcernresolver" tabindex="-1"><a class="header-anchor" href="#writeconcernresolver"><span>WriteConcernResolver</span></a></h4><p>如果您希望在每个操作的基础上设置不同的 <code>WriteConcern</code> 值（对于删除、更新、插入和保存操作），可以在 <code>MongoTemplate</code> 上配置一个名为 <code>WriteConcernResolver</code> 的策略接口。由于 <code>MongoTemplate</code> 用于持久化 POJO，因此 <code>WriteConcernResolver</code> 允许您创建一个策略，该策略可以将特定 POJO 类映射到 <code>WriteConcern</code> 值。</p><p>可以使用 <code>MongoAction</code> 参数来确定 <code>WriteConcern</code> 值，或者使用模板本身的值作为默认值。<code>MongoAction</code> 包含要写入的集合名称、POJO 的 <code>java.lang.Class</code>、转换后的 <code>Document</code>、操作（<code>REMOVE</code>、<code>UPDATE</code>、<code>INSERT</code>、<code>INSERT_LIST</code> 或 <code>SAVE</code>）以及其他一些上下文信息。以下示例显示了两组类获得不同的 <code>WriteConcern</code> 设置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWriteConcernResolver</span> <span class="token keyword">implements</span> <span class="token class-name">WriteConcernResolver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">WriteConcern</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">MongoAction</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> collectionName <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">getCollectionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 为特定集合应用不同的 WriteConcern</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;importantCollection&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>collectionName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">WriteConcern</span><span class="token punctuation">.</span><span class="token constant">MAJORITY</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;loggingCollection&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>collectionName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">WriteConcern</span><span class="token punctuation">.</span><span class="token constant">UNACKNOWLEDGED</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">WriteConcern</span><span class="token punctuation">.</span><span class="token constant">W1</span><span class="token punctuation">;</span>  <span class="token comment">// 默认使用 W1 级别</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoTemplate</span> <span class="token function">mongoTemplate</span><span class="token punctuation">(</span><span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">,</span> <span class="token class-name">WriteConcernResolver</span> writeConcernResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MongoTemplate</span> mongoTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoTemplate</span><span class="token punctuation">(</span>mongoClient<span class="token punctuation">,</span> <span class="token string">&quot;yourDatabaseName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mongoTemplate<span class="token punctuation">.</span><span class="token function">setWriteConcernResolver</span><span class="token punctuation">(</span>writeConcernResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注入自定义的 WriteConcernResolver</span>
        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="writeresultchecking策略" tabindex="-1"><a class="header-anchor" href="#writeresultchecking策略"><span>WriteResultChecking策略</span></a></h4><p><code>WriteResultChecking</code> 是一个用于控制写操作结果检查策略的枚举。它决定了在执行写操作（如 <code>insert</code>、<code>update</code>、<code>delete</code>）时，Spring Data MongoDB 是否以及如何检查操作的结果。</p><p><strong>策略类型：</strong></p><ol><li><strong><code>EXCEPTION</code></strong>: <ul><li>如果写操作未成功（例如，未修改任何文档，或者操作失败），Spring Data MongoDB 将抛出异常。</li><li>这是最严格的策略，适合需要对每个写操作进行严格验证的场景。</li></ul></li><li><strong><code>LOG</code></strong>: <ul><li>如果写操作未成功，Spring Data MongoDB 会记录一个警告日志，但不会抛出异常。</li><li>这种策略适合希望记录可能的问题，但不希望写操作失败时中断程序执行的场景。</li></ul></li><li><strong><code>NONE</code></strong>: <ul><li>不进行任何检查。无论写操作的结果如何，Spring Data MongoDB 都不会采取任何行动。</li><li>这种策略适合对写操作结果不关心的场景，或者希望自行处理写操作结果的情况。</li></ul></li></ol><p><strong>使用场景：</strong></p><ul><li><strong><code>EXCEPTION</code></strong>：适用于需要对数据写入严格把关的系统，确保每次写入都成功。</li><li><strong><code>LOG</code></strong>：适用于需要记录写操作异常但不希望中断程序的场景，如监控系统。</li><li><strong><code>NONE</code></strong>：适用于对写操作结果不敏感的场景，或者需要自行管理写操作结果检查的情况。</li></ul><p><strong>配置方式：</strong></p><p><code> mongoTemplate.setWriteResultChecking(WriteResultChecking.EXCEPTION);</code></p><h4 id="实体生命周期事件" tabindex="-1"><a class="header-anchor" href="#实体生命周期事件"><span>实体生命周期事件</span></a></h4><p>启用生命周期回调函数：<code>mongoTemplate.setEntityLifecycleEventsEnabled(true);</code></p><p>生命周期4阶段：</p><ul><li><code>BeforeConvertCallback</code>——Java对象转换为Document文档之前，用于调整或修饰实体中的某些字段，例如确保某个字段始终为小写形式</li><li><code>BeforeSaveCallback</code>——Document保存到MongoDB之前，用于在保存到数据库前对文档进行更高层次的修改，例如向文档中添加时间戳或其他元数据</li><li><code>AfterSaveCallback</code>——Document保存到MongoDB之后</li><li><code>AfterConvertCallback</code>——Document文档转换为Java对象之后</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 定义Java对象转换为Document文档之前的回调逻辑
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">BeforeConvertCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">beforeConvertCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>entity<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entity &quot;</span> <span class="token operator">+</span> entity <span class="token operator">+</span> <span class="token string">&quot; will be converted to document!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义Document保存到MongoDB之前的回调逻辑
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">BeforeSaveCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">beforeSaveCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>entity<span class="token punctuation">,</span> document<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entity &quot;</span> <span class="token operator">+</span> entity <span class="token operator">+</span> <span class="token string">&quot; will be saved!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义Document保存到MongoDB之后的回调逻辑
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AfterSaveCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">afterSaveCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>entity<span class="token punctuation">,</span> document<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entity &quot;</span> <span class="token operator">+</span> entity <span class="token operator">+</span> <span class="token string">&quot; has been saved!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义Document文档转换为Java对象之后的回调逻辑
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AfterConvertCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">afterConvertCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>entity<span class="token punctuation">,</span> document<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 定义在转换之后的回调逻辑</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Document &quot;</span> <span class="token operator">+</span> document <span class="token operator">+</span> <span class="token string">&quot; has been converted to entity &quot;</span> <span class="token operator">+</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引和集合管理" tabindex="-1"><a class="header-anchor" href="#索引和集合管理"><span>索引和集合管理</span></a></h3><h4 id="indexed" tabindex="-1"><a class="header-anchor" href="#indexed"><span>@Indexed</span></a></h4><p><code>@Indexed</code> 用于为文档中的单个字段创建普通索引。普通索引用于提高查询性能，尤其是针对单个字段的查询或排序。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">Indexed</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Indexed</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>username</code> 字段会被索引，MongoDB 在查询时会优先使用该索引，提升查询效率。</p><p><strong>可选参数</strong></p><ul><li><code>unique</code>：是否是唯一索引，防止重复值。默认为 <code>false</code>。</li><li><code>direction</code>：指定排序方向，可以是 <code>IndexDirection.ASCENDING</code> 或 <code>IndexDirection.DESCENDING</code>。</li><li><code>sparse</code>：如果为 <code>true</code>，则只为非 <code>null</code> 的字段创建索引。</li><li><code>expireAfterSeconds</code>：设置索引过期时间，常用于 TTL（Time To Live）索引。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Indexed</span><span class="token punctuation">(</span>unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> <span class="token class-name">IndexDirection</span><span class="token punctuation">.</span><span class="token constant">ASCENDING</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="geospatialindexed" tabindex="-1"><a class="header-anchor" href="#geospatialindexed"><span>@GeoSpatialIndexed</span></a></h4><p><code>@GeoSpatialIndexed</code> 用于在地理空间字段上创建地理空间索引，支持基于地理位置的查询。MongoDB 支持 <code>2d</code> 和 <code>2dsphere</code> 两种类型的地理空间索引。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">GeoSpatialIndexed</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>geo<span class="token punctuation">.</span></span><span class="token class-name">GeoJsonPoint</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Place</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GeoSpatialIndexed</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">GeoSpatialIndexType</span><span class="token punctuation">.</span><span class="token constant">GEO_2DSPHERE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">GeoJsonPoint</span> location<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该例中，<code>location</code> 字段会创建一个 <code>2dsphere</code> 索引，用于处理地球表面上的地理坐标。</p><p><strong>可选参数</strong></p><ul><li><code>type</code>：指定索引类型，常见的值有 <code>GEO_2D</code> 和 <code>GEO_2DSPHERE</code>。</li><li><code>bits</code>：指定索引的精度，适用于 <code>GEO_2D</code> 类型索引。</li><li><code>min</code>、<code>max</code>：用于 <code>GEO_2D</code> 类型索引，指定坐标范围。</li></ul><h4 id="textindexed" tabindex="-1"><a class="header-anchor" href="#textindexed"><span>TextIndexed</span></a></h4><p><code>@TextIndexed</code> 用于在字符串字段上创建全文搜索索引。MongoDB 支持全文搜索功能，允许对文档中的文本字段进行复杂的全文检索。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">TextIndexed</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TextIndexed</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>content</code> 字段将被索引，用于全文搜索。在查询时，可以使用 <code>$text</code> 运算符对文本字段进行全文搜索。</p><h4 id="compoundindex" tabindex="-1"><a class="header-anchor" href="#compoundindex"><span>@CompoundIndex</span></a></h4><p><code>@CompoundIndex</code> 用于在多个字段上创建复合索引。复合索引允许在多个字段的组合上进行索引，通常用于优化多个字段的查询条件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">CompoundIndex</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token annotation punctuation">@CompoundIndex</span><span class="token punctuation">(</span>def <span class="token operator">=</span> <span class="token string">&quot;{&#39;firstName&#39;: 1, &#39;lastName&#39;: -1}&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;name_index&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，<code>firstName</code> 和 <code>lastName</code> 字段上创建了一个复合索引。<code>firstName</code> 以升序排序，<code>lastName</code> 以降序排序。</p><p><strong>可选参数</strong><code>def</code>：索引定义，使用 JSON 字符串来表示字段和排序方向。</p><ul><li><code>name</code>：索引名称。</li><li><code>unique</code>：是否为唯一索引。</li><li><code>sparse</code>：是否为稀疏索引。</li></ul><h4 id="wildcardindexed" tabindex="-1"><a class="header-anchor" href="#wildcardindexed"><span>@WildcardIndexed</span></a></h4><p><code>@WildcardIndexed</code> 是 MongoDB 4.2 引入的功能，允许对文档中的任意字段或嵌套字段创建索引。<code>@WildcardIndexed</code> 用于创建通配符索引，适用于动态数据结构或包含未知字段的文档。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">WildcardIndexed</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicData</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@WildcardIndexed</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>attributes</code> 字段是一个动态字段集合，<code>@WildcardIndexed</code> 会为所有的子字段创建索引。</p><p><strong>可选参数</strong></p><ul><li><code>name</code>：索引的名称。</li><li><code>wildcardProjection</code>：用于指定哪些字段应包含在索引中或排除。</li></ul><h3 id="保存、更新、删除" tabindex="-1"><a class="header-anchor" href="#保存、更新、删除"><span>保存、更新、删除</span></a></h3><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><h3 id="统计" tabindex="-1"><a class="header-anchor" href="#统计"><span>统计</span></a></h3><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合"><span>聚合</span></a></h3><h2 id="gridfs" tabindex="-1"><a class="header-anchor" href="#gridfs"><span>GridFs</span></a></h2><h2 id="对象映射" tabindex="-1"><a class="header-anchor" href="#对象映射"><span>对象映射</span></a></h2><p><strong>注解概述</strong></p><p>MappingMongoConverter 可以使用元数据来驱动对象到文档的映射。可以使用以下注释</p><ul><li><code>@Id</code>：应用于字段级别，以标记用于身份目的的字段。</li><li><code>@MongoId</code>：应用于字段级别，以标记用于身份目的的字段。接受一个可选的 <code>FieldType</code> 来定制 id 转换。</li><li><code>@Document</code>：应用于类级别，以指示此类是映射到数据库的候选类。您可以指定将存储数据的集合的名称。</li><li><code>@DBRef</code>：应用于字段，以指示使用 com.mongodb.DBRef 存储该字段。</li><li><code>@DocumentReference</code>：应用于字段，以指示将该字段存储为指向另一个文档的指针。这可以是单个值（默认情况下为 <em>id</em>），或通过转换器提供的 <code>Document</code>。</li><li><code>@Indexed</code>：应用于字段级别，以描述如何对字段建立索引。</li><li><code>@CompoundIndex</code>（可重复）：应用于类型级别，以声明复合索引。</li><li><code>@GeoSpatialIndexed</code>：应用于字段级别，以描述如何对字段进行地理索引。</li><li><code>@TextIndexed</code>：应用于字段级别，以标记要包含在文本索引中的字段。</li><li><code>@HashIndexed</code>：应用于字段级别，以便在哈希索引中使用，以在分片集群中对数据进行分区。</li><li><code>@Language</code>：应用于字段级别，以设置文本索引的语言覆盖属性。</li><li><code>@Transient</code>：默认情况下，所有字段都映射到文档。此注释将应用它的字段排除在存储在数据库中。瞬态属性不能在持久性构造函数中使用，因为转换器无法为构造函数参数实现值。</li><li><code>@PersistenceConstructor</code>：标记给定的构造函数（甚至是包保护的构造函数），以便在从数据库实例化对象时使用。构造函数参数按名称映射到检索到的 Document 中的键值。</li><li><code>@Value</code>：此注释是 Spring Framework 的一部分。在映射框架中，它可以应用于构造函数参数。这使您可以使用 Spring 表达式语言语句来转换在数据库中检索到的键值，然后再将其用于构造域对象。为了引用给定文档的属性，必须使用诸如：<code>@Value(&quot;#root.myProperty&quot;)</code> 的表达式，其中 <code>root</code> 指示给定文档的根。</li><li><code>@Field</code>：应用于字段级别，它允许描述字段的名称和类型，因为该字段将表示在 MongoDB BSON 文档中，从而允许名称和类型不同于类的字段名以及属性类型。</li><li><code>@Version</code>：应用于字段级别，用于乐观锁定并在保存操作中检查修改。初始值为 <code>zero</code>（对于基本类型为 <code>one</code>），它将在每次更新时自动增加。</li></ul><h3 id="属性转换器" tabindex="-1"><a class="header-anchor" href="#属性转换器"><span>属性转换器</span></a></h3><p>属性转换器允许在 Java 对象和 MongoDB 存储格式之间进行特定字段的转换。</p><p><strong>使用场景</strong></p><p>自定义类型转换：当 MongoDB 中存储的数据类型与 Java 对象属性的数据类型不匹配时，可以使用属性转换器进行转换。</p><p>特殊数据格式：当你需要将某种复杂的数据类型（如 <code>Enum</code>、<code>LocalDateTime</code>、嵌套对象等）转换为适合 MongoDB 存储的简单类型（如 <code>String</code>、<code>Number</code>）时。</p><p>数据加密和解密：可以通过转换器对敏感字段进行加密和解密操作。</p><p><strong>如何使用</strong></p><p>属性转换器通常通过实现 <code>org.springframework.core.convert.converter.Converter</code> 接口，并配合 <code>@ReadingConverter</code> 和 <code>@WritingConverter</code> 注解来定义。</p><p>示例：将枚举类型存储为字符串</p><ol><li>定义属性转换器</li></ol><p>假设你有一个枚举类型 <code>Status</code>，而你希望在 MongoDB 中将其存储为字符串，而不是整数或默认的枚举序号。可以通过自定义转换器来实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token punctuation">{</span>
    <span class="token constant">ACTIVE</span><span class="token punctuation">,</span>
    <span class="token constant">INACTIVE</span><span class="token punctuation">,</span>
    <span class="token constant">PENDING</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写入转换器</strong>：用于将 <code>Status</code> 枚举转换为字符串。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Converter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">WritingConverter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WritingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatusToStringConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Status</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将枚举转换为其名称表示</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取转换器</strong>：用于将存储在 MongoDB 中的字符串转换回 <code>Status</code> 枚举。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Converter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">ReadingConverter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ReadingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToStatusConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将字符串转换为枚举</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>注册转换器</li></ol><p>为了让 Spring Data MongoDB 能够在读写时应用这些转换器，需要将它们注册到 <code>MongoCustomConversions</code> 中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">MongoCustomConversions</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoCustomConversions</span> <span class="token function">customConversions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoCustomConversions</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">StatusToStringConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 写入转换器</span>
                <span class="token keyword">new</span> <span class="token class-name">StringToStatusConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 读取转换器</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用转换器</li></ol><p>注册完成后，当你在 MongoDB 中存储 <code>Status</code> 枚举类型的字段时，Spring Data MongoDB 将自动应用这些转换器。对于读取和写入，MongoDB 将使用这些自定义逻辑进行转换：</p><ul><li>写入时，<code>Status</code> 枚举会被转换为字符串并存储在 MongoDB 中。</li><li>读取时，存储的字符串将被转换回 <code>Status</code> 枚举。</li></ul><h3 id="解包类型" tabindex="-1"><a class="header-anchor" href="#解包类型"><span>解包类型</span></a></h3><h4 id="unwrapped" tabindex="-1"><a class="header-anchor" href="#unwrapped"><span><code>@Unwrapped</code></span></a></h4><p>通常，当你在 MongoDB 中存储一个 Java 对象时，如果该对象包含另一个嵌套对象，Spring Data 会将这个嵌套对象作为一个独立的字段存储在父文档中。使用 <code>@Unwrapped</code> 注解后，嵌套对象的字段将直接“展开”到父文档中，而不是作为嵌套的结构。</p><p>默认行为</p><p>假设你有以下嵌套对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> zipCode<span class="token punctuation">;</span>

    <span class="token comment">// Constructors, getters, setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和一个包含 <code>Address</code> 的 <code>User</code> 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// Constructors, getters, setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你存储一个 <code>User</code> 对象到 MongoDB 时，默认情况下它会被存储为以下 JSON 结构：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;zipCode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10001&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>address</code> 是一个嵌套的对象。</p><p>现在，如果你希望 <code>Address</code> 对象中的属性直接存储在 <code>User</code> 文档的顶层，而不是嵌套为一个 <code>address</code> 对象，可以使用 <code>@Unwrapped</code> 注解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Unwrapped</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Unwrapped.Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// Constructors, getters, setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>@Unwrapped.Nullable</code> 表示 <code>address</code> 字段可以为空，并且其属性会直接展开到 <code>User</code> 文档的顶层。现在，当你存储一个 <code>User</code> 对象到 MongoDB 时，它会被存储为以下结构：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;zipCode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10001&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，<code>Address</code> 对象的属性 <code>street</code>、<code>city</code> 和 <code>zipCode</code> 直接成为了 <code>User</code> 文档的顶层字段，而不再是嵌套对象</p><p><strong><code>@Unwrapped</code> 属性</strong></p><ul><li><code>@Unwrapped.Nullable</code>：当嵌套对象可能为 <code>null</code> 时，使用此注解。如果嵌套对象为空，它不会存储到数据库中。</li><li><code>@Unwrapped.OnEmpty</code>：定义如果嵌套对象为空时的处理方式。可以选择 <code>USE_NULL</code> 或 <code>SKIP</code>，即空值时要么存储 <code>null</code> 值，要么跳过不存储。</li></ul><h4 id="解包类型的索引" tabindex="-1"><a class="header-anchor" href="#解包类型的索引"><span>解包类型的索引</span></a></h4><p>可以将<code>@Indexed</code>注解附加到解包类型的属性，就像对普通对象一样。不能将<code>@Indexed</code>注解与拥有属性上的<code>@Unwrapped</code>注解一起使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Unwrapped</span><span class="token punctuation">(</span>onEmpty <span class="token operator">=</span> <span class="token constant">USE_NULL</span><span class="token punctuation">)</span>
    <span class="token class-name">UserName</span> name<span class="token punctuation">;</span>                    

    <span class="token comment">// Invalid -&gt; InvalidDataAccessApiUsageException</span>
    <span class="token annotation punctuation">@Indexed</span>                          
    <span class="token annotation punctuation">@Unwrapped</span><span class="token punctuation">(</span>onEmpty <span class="token operator">=</span> <span class="token class-name">USE_Empty</span><span class="token punctuation">)</span>
    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserName</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Indexed</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>           
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为<code>users</code>集合中的<code>lastname</code>创建索引。<code>@Indexed</code>与<code>@Unwrapped</code>一起使用时的无效用法</p><h3 id="对象引用" tabindex="-1"><a class="header-anchor" href="#对象引用"><span>对象引用</span></a></h3><p>当A对象包含另外B对象时，可以在A对象中存储B对象的引用而不是它的所有数据。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>映射框架不处理级联保存！当需要修改A对象包含的B对象时，必须同时手动修改B对象的值。</p></div><h4 id="dbrefs" tabindex="-1"><a class="header-anchor" href="#dbrefs"><span>@DBRefs</span></a></h4><p>假设你有两个类 <code>User</code> 和 <code>Address</code>，并且 <code>User</code> 中包含 <code>Address</code> 的引用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">DBRef</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>

    <span class="token comment">// Getters, Setters</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@DBRef</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// Getters, Setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你存储 <code>User</code> 对象时，MongoDB 并不会将 <code>Address</code> 文档嵌入 <code>User</code> 文档中，而是存储如下结构：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user123&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;$ref&quot;</span><span class="token operator">:</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;address123&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种结构中的 <code>address</code> 字段是一个 <strong>DBRef</strong> 对象，指向 <code>address</code> 集合中的某个文档。读取 <code>User</code> 文档时，Spring Data MongoDB 会根据该引用去查询 <code>Address</code> 集合来获取完整的 <code>Address</code> 文档。</p><p><strong>注意事项</strong></p><p><strong>性能影响</strong>：每次访问带有 <code>@DBRef</code> 的字段时，都会触发额外的查询操作，这可能影响性能，尤其是在处理大批量数据时。</p><p><strong>跨集合引用</strong>：<code>@DBRef</code> 允许跨集合引用，但是 MongoDB 不支持跨数据库的引用。</p><p><strong>事务支持</strong>：如果使用 MongoDB 事务，<code>@DBRef</code> 的引用操作可能导致复杂的事务管理。</p><h4 id="documentreference" tabindex="-1"><a class="header-anchor" href="#documentreference"><span>@DocumentReference</span></a></h4><p><code>@DocumentReference</code> 是 Spring Data MongoDB 版本 3.4 中引入的一个新注解，用于替代 <code>@DBRef</code>，提供了更多的灵活性。<code>@DocumentReference</code> 允许开发者控制是否使用手动维护的引用（如直接存储 <code>_id</code>），或类似 <code>@DBRef</code> 的引用文档。</p><p><strong>工作原理</strong></p><p>与 <code>@DBRef</code> 不同，<code>@DocumentReference</code> 提供了两种不同的存储方式：</p><ol><li><strong>引用存储</strong>：与 <code>@DBRef</code> 类似，引用另一个文档的 <code>_id</code>，并通过额外查询来获取引用的文档。</li><li><strong>手动引用</strong>：手动存储被引用文档的 <code>_id</code>，避免使用 <code>DBRef</code> 特有的格式，性能更加可控。</li></ol><hr><p><code>lookup</code>属性</p><p><code>@DocumentReference</code> 提供了 <code>lookup</code> 属性来控制如何查找引用的文档。以下是常见的用法：</p><ul><li><strong>手动引用</strong>：存储的是被引用文档的 <code>_id</code>，你需要自己编写查询来获取被引用的文档。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DocumentReference</span><span class="token punctuation">(</span>lookup <span class="token operator">=</span> <span class="token string">&quot;{ &#39;_id&#39; : ?#{#target} }&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>自动引用</strong>: 类似于 <code>@DBRef</code>，Spring 会自动查询引用的文档。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DocumentReference</span><span class="token punctuation">(</span>lookup <span class="token operator">=</span> <span class="token string">&quot;{ &#39;addressId&#39; : ?#{#target} }&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>优势</strong></p><ul><li><strong>更灵活</strong>：<code>@DocumentReference</code> 提供了更多控制，可以根据需求选择存储方式（手动或自动）。</li><li><strong>性能更好</strong>：与 <code>@DBRef</code> 相比，手动管理引用 <code>_id</code> 可能避免额外的查询开销，提升性能。</li><li><strong>事务友好</strong>：由于手动管理引用是基于简单的 <code>_id</code> 字段，适合与 MongoDB 的事务机制搭配使用。</li></ul><h3 id="索引创建" tabindex="-1"><a class="header-anchor" href="#索引创建"><span>索引创建</span></a></h3><h2 id="审计" tabindex="-1"><a class="header-anchor" href="#审计"><span>审计</span></a></h2><p>审计功能允许你自动记录实体的创建和修改信息，比如创建时间、最后修改时间、创建人、修改人等。通过使用 <code>@EnableMongoAuditing</code> 注解，Spring 会自动为 MongoDB 实体启用审计功能。</p><p>Spring 提供了几个常用的注解，用于标识实体中的审计字段：</p><ul><li><strong><code>@CreatedDate</code></strong>：标记创建时间字段。</li><li><strong><code>@LastModifiedDate</code></strong>：标记最后修改时间字段。</li><li><strong><code>@CreatedBy</code></strong>：标记创建者字段。</li><li><strong><code>@LastModifiedBy</code></strong>：标记最后修改者字段。</li></ul><p><strong>实现步骤</strong></p><ol><li>在配置类上添加 <code>@EnableMongoAuditing</code> 注解来启用审计功能</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableMongoAuditing</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableMongoAuditing</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在你的实体类中，使用相关的审计注解来标记需要自动维护的字段</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CreatedDate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">LastModifiedDate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CreatedBy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">LastModifiedBy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEntity</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createdDate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@LastModifiedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> lastModifiedDate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@CreatedBy</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> createdBy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@LastModifiedBy</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastModifiedBy<span class="token punctuation">;</span>

    <span class="token comment">// Getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@CreatedDate</code>：当实体第一次持久化时，会自动设置 <code>createdDate</code> 字段。</li><li><code>@LastModifiedDate</code>：每次实体被更新时，会自动更新 <code>lastModifiedDate</code> 字段。</li><li><code>@CreatedBy</code>和<code>@LastModifiedBy</code>：分别记录创建者和最后修改者的信息。</li></ul><ol start="3"><li>配置 <code>AuditorAware</code>（可选，针对<code>@CreatedBy</code>和<code>@LastModifiedBy</code>）</li></ol><p>如果你希望在审计中记录创建者和修改者的信息，Spring 需要通过 <code>AuditorAware</code> 接口来提供当前用户或系统信息</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">AuditorAware</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditorAwareImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuditorAware</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCurrentAuditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里可以返回当前的用户信息，例如从 Spring Security 中获取当前用户</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里用 &quot;admin&quot; 作为示例</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">AuditorAware</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoAuditingConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuditorAware</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">auditorProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuditorAwareImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>数据库结果</li></ol><p>当你向数据库中插入或更新实体时，Spring 会自动为你记录审计信息。例如，插入一条新记录后，MongoDB 文档可能如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;some-id&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;createdDate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024-09-12T10:15:30&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;lastModifiedDate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024-09-12T10:15:30&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;createdBy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;lastModifiedBy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="会话和事务" tabindex="-1"><a class="header-anchor" href="#会话和事务"><span>会话和事务</span></a></h2><h3 id="会话" tabindex="-1"><a class="header-anchor" href="#会话"><span>会话</span></a></h3><p>会话是一种用于跟踪一系列操作的上下文。会话提供了一致的读写操作的隔离性和事务处理能力。</p><p><strong>主要作用</strong></p><ul><li>事务支持：在启用会话时，MongoDB 可以在多个操作之间保持事务的一致性。</li><li>持久连接：会话可以跟踪跨多个操作的上下文，支持多个命令共享同一个会话，从而实现跨多个集合和数据库的事务。</li><li>读偏好和一致性控制：会话可以指定特定的读偏好，从而确保不同节点之间的数据一致性和响应时间控制。</li></ul><p><strong>使用示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MongoClient</span> mongoClient <span class="token operator">=</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://localhost:27017&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ClientSession</span> session <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">startSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启会话后进行某些操作</span>
    <span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">&quot;myCollection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    session<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    session<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    session<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h3><p>在 Spring Data MongoDB 中，启用事务非常简单。你可以使用 <code>@Transactional</code> 注解来声明事务性操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MongoTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntity</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntity</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>@Transactional</code> 注解确保 <code>doInTransaction()</code> 方法中的所有操作作为一个事务执行。如果出现异常，事务会自动回滚。</p></blockquote><p><strong>事务管理器</strong></p><p>为了在 Spring 中使用事务，你需要配置一个事务管理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span></span><span class="token class-name">MongoTransactionManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MongoTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoTransactionManager</span><span class="token punctuation">(</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">getDatabaseFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>会话与事务的关系</strong></p><ul><li><strong>会话</strong> 是事务的基础。在 MongoDB 中，事务必须运行在会话上下文中，因此每个事务都是会话的一部分。</li><li><strong>事务</strong> 提供了跨多个数据库操作的原子性和一致性，而会话则提供了事务操作的上下文管理。</li></ul><p><strong>控制特定的事务选项</strong></p><p>在 Spring Data MongoDB 中，虽然 <code>@Transactional</code> 可以简化事务管理，但在需要更多自定义控制事务行为的场景中，可以使用 <code>TransactionOptions</code> 和 <code>MongoTemplate</code> 配合自定义事务逻辑。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MongoTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ClientSession</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">MongoClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">TransactionOptions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ReadConcern</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">WriteConcern</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doInCustomTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionOptions</span> txnOptions <span class="token operator">=</span> <span class="token class-name">TransactionOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">readConcern</span><span class="token punctuation">(</span><span class="token class-name">ReadConcern</span><span class="token punctuation">.</span><span class="token constant">SNAPSHOT</span><span class="token punctuation">)</span>      <span class="token comment">// 读取快照</span>
            <span class="token punctuation">.</span><span class="token function">writeConcern</span><span class="token punctuation">(</span><span class="token class-name">WriteConcern</span><span class="token punctuation">.</span><span class="token constant">MAJORITY</span><span class="token punctuation">)</span>    <span class="token comment">// 写入到大多数节点</span>
            <span class="token punctuation">.</span><span class="token function">maxCommitTime</span><span class="token punctuation">(</span><span class="token number">30L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>   <span class="token comment">// 最大提交时间为30秒</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ClientSession</span> session <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">startSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            session<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span>txnOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 使用 MongoTemplate 在事务中进行操作</span>
            mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntity</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEntity</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            session<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            session<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变更流" tabindex="-1"><a class="header-anchor" href="#变更流"><span>变更流</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>变更流支持仅适用于副本集或分片集群。</p></div><h2 id="可追踪游标" tabindex="-1"><a class="header-anchor" href="#可追踪游标"><span>可追踪游标</span></a></h2><p>默认情况下，当客户端用尽光标提供的所有结果时，MongoDB 会自动关闭光标。用尽时关闭光标会将流变成有限流。对于 <a href="https://docs.mongodb.com/manual/core/capped-collections/" target="_blank" rel="noopener noreferrer">capped 集合</a>，你可以使用在客户端使用所有最初返回的数据后仍然保持打开状态的 <a href="https://docs.mongodb.com/manual/core/tailable-cursors/" target="_blank" rel="noopener noreferrer">可跟踪光标</a>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CursorTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MongoDatabase</span> db <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;learn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MongoCursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">&quot;cappedColl&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cursorType</span><span class="token punctuation">(</span><span class="token class-name">CursorType<span class="token punctuation">.</span>Tailable</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Document</span> doc <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分片" tabindex="-1"><a class="header-anchor" href="#分片"><span>分片</span></a></h2><p><code>@Sharded</code> 注解来标识存储在分片集合中的实体</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Sharded</span><span class="token punctuation">(</span>shardKey <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;country&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;userId&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;userid&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span> userId<span class="token punctuation">;</span>

	<span class="token class-name">String</span> country<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分片键的属性映射到实际的字段名称。</li></ul><hr><p><strong>分片集合</strong></p><p>Spring Data MongoDB 不会自动为集合设置分片，也不会为其设置所需的索引。以下代码片段展示了如何使用 MongoDB 客户端 API 来实现这一点。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MongoDatabase</span> adminDB <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">getMongoDbFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getMongoDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

adminDB<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">&quot;enableSharding&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Document</span> shardCmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">&quot;shardCollection&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;db.users&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">&quot;country&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;userid&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

adminDB<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span>shardCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分片命令需要针对 <code>admin</code> 数据库运行。</li><li>如果需要，请为特定数据库启用分片。</li><li>对已启用分片的数据库中的集合进行分片。</li><li>指定分片键。此示例使用基于范围的分片。</li></ul><hr><p><strong>分片键处理</strong></p><p>分片键由一个或多个属性组成，这些属性必须存在于目标集合中的每个文档中。它用于将文档分布到各个分片中。</p><p>在实体上添加 <code>@Sharded</code> 注解，使 Spring Data MongoDB 能够应用分片场景所需的最佳努力优化。这意味着在更新实体时，如果不存在，则会将所需的 shard 键信息添加到 <code>replaceOne</code> 过滤器查询中。这可能需要额外的服务器往返才能确定当前 shard 键的实际值。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通过设置 <code>@Sharded(immutableKey = true)</code>，Spring Data 不会尝试检查实体 shard 键是否已更改。</p></div>`,196),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","MongoDB.html.vue"]]),k=JSON.parse('{"path":"/database/MongoDB.html","title":"MongoDB","lang":"zh-CN","frontmatter":{"title":"MongoDB","order":6},"headers":[{"level":2,"title":"MongoDB","slug":"mongodb","link":"#mongodb","children":[]},{"level":2,"title":"Spring整合","slug":"spring整合","link":"#spring整合","children":[]},{"level":2,"title":"模板API","slug":"模板api","link":"#模板api","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"索引和集合管理","slug":"索引和集合管理","link":"#索引和集合管理","children":[]},{"level":3,"title":"保存、更新、删除","slug":"保存、更新、删除","link":"#保存、更新、删除","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"统计","slug":"统计","link":"#统计","children":[]},{"level":3,"title":"聚合","slug":"聚合","link":"#聚合","children":[]}]},{"level":2,"title":"GridFs","slug":"gridfs","link":"#gridfs","children":[]},{"level":2,"title":"对象映射","slug":"对象映射","link":"#对象映射","children":[{"level":3,"title":"属性转换器","slug":"属性转换器","link":"#属性转换器","children":[]},{"level":3,"title":"解包类型","slug":"解包类型","link":"#解包类型","children":[]},{"level":3,"title":"对象引用","slug":"对象引用","link":"#对象引用","children":[]},{"level":3,"title":"索引创建","slug":"索引创建","link":"#索引创建","children":[]}]},{"level":2,"title":"审计","slug":"审计","link":"#审计","children":[]},{"level":2,"title":"会话和事务","slug":"会话和事务","link":"#会话和事务","children":[{"level":3,"title":"会话","slug":"会话","link":"#会话","children":[]},{"level":3,"title":"事务","slug":"事务","link":"#事务","children":[]}]},{"level":2,"title":"变更流","slug":"变更流","link":"#变更流","children":[]},{"level":2,"title":"可追踪游标","slug":"可追踪游标","link":"#可追踪游标","children":[]},{"level":2,"title":"分片","slug":"分片","link":"#分片","children":[]}],"git":{"createdTime":1716299826000,"updatedTime":1739108242000,"contributors":[{"name":"Zhiyun Qin","email":"2368932388@qq.com","commits":8}]},"readingTime":{"minutes":19.85,"words":5955},"filePathRelative":"database/MongoDB.md","localizedDate":"2024年5月21日"}');export{r as comp,k as data};
