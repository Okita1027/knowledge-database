import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,b as s}from"./app-CJZ--YWM.js";const l={},i=s(`<h1 id="初识docker" tabindex="-1"><a class="header-anchor" href="#初识docker"><span>初识Docker</span></a></h1><h2 id="什么是docker" tabindex="-1"><a class="header-anchor" href="#什么是docker"><span>什么是Docker</span></a></h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="应用部署的环境问题" tabindex="-1"><a class="header-anchor" href="#应用部署的环境问题"><span>应用部署的环境问题</span></a></h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171604593.png" alt="image.png" loading="lazy"><br> 例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="docker解决依赖兼容问题" tabindex="-1"><a class="header-anchor" href="#docker解决依赖兼容问题"><span>Docker解决依赖兼容问题</span></a></h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？<br> Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li><li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605369.png" alt="image.png" loading="lazy"><br> 这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。<br> 虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="docker解决os环境差异" tabindex="-1"><a class="header-anchor" href="#docker解决os环境差异"><span>Docker解决OS环境差异</span></a></h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171614469.png" alt="image" loading="lazy"><br> 结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><ol><li>应用调用操作系统应用（函数库），实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ol><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605116.png" alt="image.png" loading="lazy"><br> 此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605721.png" alt="image.png" loading="lazy"><br> Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605153.png" alt="image.png" loading="lazy"></p><p><strong>总结</strong></p><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="docker和虚拟机" tabindex="-1"><a class="header-anchor" href="#docker和虚拟机"><span>Docker和虚拟机</span></a></h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。<br> 两者有什么差异呢？<br><strong>虚拟机</strong>是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。<br><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605885.png" alt="image.png" loading="lazy"></p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605181.png" alt="Docker对比虚拟机" tabindex="0" loading="lazy"><figcaption>Docker对比虚拟机</figcaption></figure><p><strong>Docker比虚拟机快的原因</strong></p><ol><li>docker有着比虚拟机更少的抽象层</li></ol><p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><ol start="2"><li>docker利用的是宿主机的内核,而不需要加载操作系统OS内核</li></ol><p>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p><p><strong>小结</strong><br> Docker和虚拟机的差异：</p><ul><li>docker是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h2 id="docker架构" tabindex="-1"><a class="header-anchor" href="#docker架构"><span>Docker架构</span></a></h2><h3 id="镜像与容器" tabindex="-1"><a class="header-anchor" href="#镜像与容器"><span>镜像与容器</span></a></h3><p><strong>镜像（Image）</strong></p><p>Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>分层的镜像</strong></p><p>以<code>pull</code>为例，在下载的过程中可以看到docker的镜像好像是在一层一层的在下载</p><p><strong>UnionFS(联合文件系统)</strong></p><p>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</p><p>Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p><strong>容器（Container）</strong></p><p>镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的文件。只有运行时，才会加载到内存，形成进程。<br> 镜像就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。<br> 容器就是将这些文件中编写的程序、函数加载到内存中运行，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p>Docker镜像层都是只读的，容器层是可写的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。所有对容器的改动，无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605794.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="虚悬镜像" tabindex="-1"><a class="header-anchor" href="#虚悬镜像"><span>虚悬镜像</span></a></h4><p><code>REPOSITORY</code>和<code>TAG</code>均为<code>&lt;none&gt;</code>的镜像为<em>虚悬镜像</em>。</p><p>产生原因：新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code>。</p><p>可以用该命令专门显示这种镜像<code>docker image ls -f dangling=true</code></p><blockquote><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用<code>docker image prune</code>命令删除。</p></blockquote><h4 id="中间层镜像" tabindex="-1"><a class="header-anchor" href="#中间层镜像"><span>中间层镜像</span></a></h4><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数，即<code>docker image ls -a</code>。</p><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><h3 id="dockerhub" tabindex="-1"><a class="header-anchor" href="#dockerhub"><span>DockerHub</span></a></h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</li><li>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub" target="_blank" rel="noopener noreferrer">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener noreferrer">阿里云镜像库</a>等。</li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605503.png" alt="image.png" loading="lazy"></p><h3 id="docker架构-1" tabindex="-1"><a class="header-anchor" href="#docker架构-1"><span>Docker架构</span></a></h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。<br> Docker是一个CS架构的程序，由两部分组成：</p><ul><li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605266.png" alt="image.png" loading="lazy"></p><p><strong>总结</strong></p><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li>服务端：接收命令或远程请求，操作镜像或容器</li><li>客户端：发送命令或者请求到Docker服务端</li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h1 id="docker基本操作" tabindex="-1"><a class="header-anchor" href="#docker基本操作"><span>Docker基本操作</span></a></h1><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><p><a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener noreferrer">官方文档命令传送门</a></p><table><thead><tr><th style="text-align:center;"><strong>命令</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">docker pull</td><td style="text-align:center;">拉取镜像</td></tr><tr><td style="text-align:center;">docker push</td><td style="text-align:center;">推送镜像到Docker Registry</td></tr><tr><td style="text-align:center;">docker images</td><td style="text-align:center;">查看本地镜像</td></tr><tr><td style="text-align:center;">docker rmi</td><td style="text-align:center;">删除本地镜像</td></tr><tr><td style="text-align:center;">docker run</td><td style="text-align:center;">创建并运行容器（不能重复创建）</td></tr><tr><td style="text-align:center;">docker stop</td><td style="text-align:center;">停止指定容器</td></tr><tr><td style="text-align:center;">docker kill</td><td style="text-align:center;">强制停止容器</td></tr><tr><td style="text-align:center;">docker start</td><td style="text-align:center;">启动指定容器</td></tr><tr><td style="text-align:center;">docker restart</td><td style="text-align:center;">重新启动容器</td></tr><tr><td style="text-align:center;">docker top</td><td style="text-align:center;">查看容器内运行的进程</td></tr><tr><td style="text-align:center;">docker logs</td><td style="text-align:center;">查看容器日志</td></tr><tr><td style="text-align:center;">docker inspect</td><td style="text-align:center;">查看容器内部细节</td></tr><tr><td style="text-align:center;">docker cp</td><td style="text-align:center;">从容器内拷贝文件到主机上</td></tr></tbody></table><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606204.png" alt="docker命令的关系" loading="lazy"><br> 默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Docker开机自启</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># Docker容器开机自启</span>
<span class="token function">docker</span> update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">[</span>容器名/容器id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令别名" tabindex="-1"><a class="header-anchor" href="#命令别名"><span>命令别名</span></a></h3><p>给常用Docker命令起别名，方便我们访问：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改/root/.bashrc文件</span>
<span class="token function">vi</span> /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># .bashrc</span>

<span class="token comment"># User specific aliases and functions</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rm</span><span class="token operator">=</span><span class="token string">&#39;rm -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">&#39;cp -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mv</span><span class="token operator">=</span><span class="token string">&#39;mv -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">&#39;docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token string">&#39;docker images&#39;</span>

<span class="token comment"># Source global definitions</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行命令使别名生效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像操作" tabindex="-1"><a class="header-anchor" href="#镜像操作"><span>镜像操作</span></a></h2><h3 id="镜像名称" tabindex="-1"><a class="header-anchor" href="#镜像名称"><span>镜像名称</span></a></h3><p>首先来看下镜像的名称组成：</p><ul><li>镜像名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606203.png" alt="image.png" loading="lazy"><br> 这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令"><span>镜像命令</span></a></h3><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606506.png" alt="常见的镜像操作命令" tabindex="0" loading="lazy"><figcaption>常见的镜像操作命令</figcaption></figure><h4 id="案例1-拉取、查看镜像" tabindex="-1"><a class="header-anchor" href="#案例1-拉取、查看镜像"><span>案例1-拉取、查看镜像</span></a></h4><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><ol><li>首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">DockerHub</a>:</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606065.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="2"><li>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606036.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="3"><li>通过命令：docker images 查看拉取到的镜像</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606261.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="案例2-保存、导入镜像" tabindex="-1"><a class="header-anchor" href="#案例2-保存、导入镜像"><span>案例2-保存、导入镜像</span></a></h4><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><ol><li>利用docker xx --help命令查看docker save和docker load的语法</li></ol><p>例如，查看save命令用法，可以输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606258.png" alt="image.png" loading="lazy"><br> 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>保存的目标文件名称<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用docker save导出镜像到磁盘</li></ol><p>运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> nginx.tar nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606751.png" alt="image.png" loading="lazy"></p><ol start="3"><li>使用docker load加载镜像</li></ol><p>先删除本地的nginx镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行命令，加载本地文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> nginx.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606696.png" alt="image.png" loading="lazy"></p><h3 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像"><span>删除镜像</span></a></h3><p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p><p>比如我们有这么一些镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
centos                      latest              0584b3d2cf6d        <span class="token number">3</span> weeks ago         <span class="token number">196.5</span> MB
redis                       alpine              501ad78535f0        <span class="token number">3</span> weeks ago         <span class="token number">21.03</span> MB
<span class="token function">docker</span>                      latest              cf693ec9b5c7        <span class="token number">3</span> weeks ago         <span class="token number">105.1</span> MB
nginx                       latest              e43d811ce2f4        <span class="token number">5</span> weeks ago         <span class="token number">181.5</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 <code>短 ID</code> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>比如这里，如果要删除 <code>redis:alpine</code> 镜像：可以执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token number">501</span>
Untagged: redis:alpine
Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d
Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7
Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b
Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23
Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa
Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3
Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像，可以执行:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">rm</span> centos
Untagged: centos:latest
Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c
Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a
Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更精确的是使用<code>镜像摘要</code>删除镜像，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--digests</span>
REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
<span class="token function">node</span>                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        <span class="token number">3</span> weeks ago         <span class="token number">214</span> MB

$ <span class="token function">docker</span> image <span class="token function">rm</span> node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="untagged和deleted" tabindex="-1"><a class="header-anchor" href="#untagged和deleted"><span>Untagged和Deleted</span></a></h4><p>删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。</p><p>因此当使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的原因。</p><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><p><strong>总结：</strong></p><ul><li><strong>Untagged</strong>：指镜像没有任何标签指向，但仍然存在于系统中。</li><li><strong>Deleted</strong>：指镜像已完全从系统中移除，不再占用任何存储空间。</li></ul><h4 id="命令的结合使用" tabindex="-1"><a class="header-anchor" href="#命令的结合使用"><span>命令的结合使用</span></a></h4><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。很多过滤镜像列表的方式都可以拿过来使用。</p><p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>$ docker image rm $(docker image ls -q redis)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>$ docker image rm $(docker image ls -q -f before=mongo:3.2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作"><span>容器操作</span></a></h2><h3 id="容器相关命令" tabindex="-1"><a class="header-anchor" href="#容器相关命令"><span>容器相关命令</span></a></h3><p>容器操作的命令如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606877.png" alt="image.png" loading="lazy"><br> 容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li>docker start：让一个停止的容器再次运行</li><li>docker rm：删除一个容器 <ul><li>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</li></ul></li><li>docker prune: 清理所有处于终止状态的容器</li></ul><h4 id="attach命令" tabindex="-1"><a class="header-anchor" href="#attach命令"><span>attach命令</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-dit</span> ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550

$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       <span class="token string">&quot;/bin/bash&quot;</span>         <span class="token number">18</span> seconds ago      Up <span class="token number">17</span> seconds                           nostalgic_hypatia

$ <span class="token function">docker</span> attach 243c
root@243c32535da7:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果从这个 stdin 中 exit，会导致容器的停止。</p></blockquote><h4 id="exec命令" tabindex="-1"><a class="header-anchor" href="#exec命令"><span>exec命令</span></a></h4><p><code>docker exec</code> 后边可以跟多个参数，<code>-i</code>和<code>-t</code> 最常用。</p><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-dit</span> ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6

$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
69d137adef7a        ubuntu:latest       <span class="token string">&quot;/bin/bash&quot;</span>         <span class="token number">18</span> seconds ago      Up <span class="token number">17</span> seconds                           zealous_swirles

$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> 69d1 <span class="token function">bash</span>
<span class="token function">ls</span>
bin
boot
dev
<span class="token punctuation">..</span>.

$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 69d1 <span class="token function">bash</span>
root@69d137adef7a:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果从这个 stdin 中 exit，不会导致容器的停止。</p><p>所以更推荐使用 exec</p></blockquote><h3 id="导入和导出" tabindex="-1"><a class="header-anchor" href="#导入和导出"><span>导入和导出</span></a></h3><p><strong>导出容器</strong></p><p>如果要导出本地某个容器，可以使用 <code>docker export</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
7691a814370e        ubuntu:18.04        <span class="token string">&quot;/bin/bash&quot;</span>         <span class="token number">36</span> hours ago        Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">21</span> hours ago                       <span class="token builtin class-name">test</span>
$ <span class="token function">docker</span> <span class="token builtin class-name">export</span> 7691a814370e <span class="token operator">&gt;</span> ubuntu.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将导出容器快照到本地文件。</p><p><strong>导入容器快照</strong></p><p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ubuntu.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - test/ubuntu:v1.0
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   <span class="token number">171.3</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p></div><h3 id="案例-创建并运行一个容器" tabindex="-1"><a class="header-anchor" href="#案例-创建并运行一个容器"><span>案例-创建并运行一个容器</span></a></h3><p>创建并运行nginx容器的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> containerName <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>--name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。<br> 默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。<br> 现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607176.png" alt="image.png" loading="lazy"></p><h3 id="案例-进入容器-修改文件" tabindex="-1"><a class="header-anchor" href="#案例-进入容器-修改文件"><span>案例-进入容器，修改文件</span></a></h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”<br><strong>提示</strong>：进入容器要用到docker exec命令。<br><strong>步骤</strong>：</p><ol><li>进入容器。进入我们刚刚创建的nginx容器的命令为：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mn <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li>docker exec ：进入容器内部，执行一个命令</li><li>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>mn ：要进入的容器的名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><ol start="2"><li>进入nginx的HTML所在目录 /usr/share/nginx/html</li></ol><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607026.png" alt="image.png" loading="lazy"><br> nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。<br> 查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code><br> 我们执行命令，进入该目录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/share/nginx/html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看目录下文件:<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607803.png" alt="image.png" loading="lazy"></p><ol start="3"><li>修改index.html的内容</li></ol><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#Welcome to nginx#传智教育欢迎您#g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器访问自己的虚拟机地址，例如我的是：http://192.168.150.101，即可看到结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607966.png" alt="image.png" loading="lazy"></p><p><strong>总结</strong></p><p>docker run命令的常见参数有哪些？</p><ul><li>--name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="数据卷-容器数据管理" tabindex="-1"><a class="header-anchor" href="#数据卷-容器数据管理"><span>数据卷（容器数据管理）</span></a></h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。<br> 这就是因为容器与数据（容器内文件）耦合带来的后果。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607134.png" alt="image.png" loading="lazy"><br> 要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="什么是数据卷" tabindex="-1"><a class="header-anchor" href="#什么是数据卷"><span>什么是数据卷</span></a></h3><p><strong>数据卷（volume）<strong>是一个虚拟目录，指向宿主机文件系统中的某个目录，是</strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607014.png" alt="image.png" loading="lazy"><br> 一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。<br> 这样，我们操作宿主机的<code>/var/lib/docker/volumes/html</code>目录，就等于操作容器内的<code>/usr/share/nginx/html</code>目录了。</p><h3 id="数据卷命令一览" tabindex="-1"><a class="header-anchor" href="#数据卷命令一览"><span>数据卷命令一览</span></a></h3><p>数据卷的相关命令有：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/" target="_blank" rel="noopener noreferrer">docker volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/" target="_blank" rel="noopener noreferrer">docker volume ls</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener noreferrer">docker volume prune</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/" target="_blank" rel="noopener noreferrer">docker volume inspect</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener noreferrer">docker volume prune</a></td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><h3 id="数据集操作命令" tabindex="-1"><a class="header-anchor" href="#数据集操作命令"><span>数据集操作命令</span></a></h3><p>数据卷操作的基本语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="创建和查看数据卷" tabindex="-1"><a class="header-anchor" href="#创建和查看数据卷"><span>创建和查看数据卷</span></a></h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置<br> 创建数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看所有数据</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607697.png" alt="image.png" loading="lazy"><br> 查看数据卷详细信息卷</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607561.png" alt="image.png" loading="lazy"><br> 可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。<br><strong>小结</strong>：<br> 数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><h3 id="挂载数据卷" tabindex="-1"><a class="header-anchor" href="#挂载数据卷"><span>挂载数据卷</span></a></h3><p>可以发现数据卷的目录结构较深，如果去操作数据卷目录会不太方便。很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 挂载本地目录</span>
<span class="token parameter variable">-v</span> 本地目录:容器内目录
<span class="token comment"># 挂载本地文件</span>
<span class="token parameter variable">-v</span> 本地文件:容器内文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> mysql:/var/lib/mysql <span class="token comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span>
<span class="token parameter variable">-v</span> ./mysql:/var/lib/mysql <span class="token comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mn <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> html:/root/html <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80
  nginx <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="案例-给nginx挂载数据卷" tabindex="-1"><a class="header-anchor" href="#案例-给nginx挂载数据卷"><span>案例-给nginx挂载数据卷</span></a></h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容<br><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。<br><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷<br> 步骤：<br> ① 创建容器并挂载数据卷到容器内的HTML目录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mn <span class="token parameter variable">-v</span> html:/usr/share/nginx/html <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 进入html数据卷所在位置，并修改HTML内容</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看html数据卷的位置</span>
<span class="token function">docker</span> volume inspect html
<span class="token comment"># 进入该目录</span>
<span class="token builtin class-name">cd</span> /var/lib/docker/volumes/html/_data
<span class="token comment"># 修改文件</span>
<span class="token function">vi</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例-给mysql挂载本地目录" tabindex="-1"><a class="header-anchor" href="#案例-给mysql挂载本地目录"><span>案例-给MySQL挂载本地目录</span></a></h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 ---&gt; 容器内目录</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607657.png" alt="image.png" loading="lazy"><br><strong>语法</strong>：<br> 目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器<br> 实现思路如下：</p><ol><li>将mysql.tar文件上传到虚拟机，通过load命令加载为镜像</li><li>创建目录/tmp/mysql/data</li><li>创建目录/tmp/mysql/conf，将hmy.cnf文件上传到/tmp/mysql/conf</li><li>去DockerHub查阅资料，创建并运行MySQL容器，要求： <ol><li>挂载/tmp/mysql/data到mysql容器内数据存储目录</li><li>挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</li><li>设置MySQL密码</li></ol></li></ol><p>最终挂载命令：<code>docker run --name mysql -d -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf -v /tmp/mysql/data:/var/lib/mysql mysql:8.0.28</code></p><p><strong>总结</strong></p><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文件</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的区别：</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h1 id="dockerfile自定义镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile自定义镜像"><span>Dockerfile自定义镜像</span></a></h1><p>常见的镜像在DockerHub就能找到，但是自己写的项目就必须自己构建镜像了。而要自定义镜像，就必须先了解镜像的结构。</p><h2 id="镜像结构" tabindex="-1"><a class="header-anchor" href="#镜像结构"><span>镜像结构</span></a></h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。以MySQL为例，来看看镜像的组成结构：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607611.png" alt="MySQL镜像组成结构" loading="lazy"><br> 简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。<br> 我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="dockerfile语法" tabindex="-1"><a class="header-anchor" href="#dockerfile语法"><span>Dockerfile语法</span></a></h2><p>构建自定义镜像时，并不需要一个个文件去拷贝，打包。<br> 只需要告诉Docker，镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。<br> 而描述上述信息的文件就是Dockerfile文件。<br><strong>Dockerfile</strong>是一个文本文件，其中包含一个个<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p>详细语法说明，参考官网文档： <a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/builder</a><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607486.png" alt="指令概要" loading="lazy"></p><h3 id="copy-复制文件" tabindex="-1"><a class="header-anchor" href="#copy-复制文件"><span>COPY 复制文件</span></a></h3><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></p><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p><p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> package.json /usr/src/app/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener noreferrer"><code>filepath.Match</code></a> 规则，如：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> hom* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> hom?.txt /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p></div><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">55:mygroup</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">bin</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">1</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">10:11</span></span> files* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-增强的复制文件" tabindex="-1"><a class="header-anchor" href="#add-增强的复制文件"><span>ADD 增强的复制文件</span></a></h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><ul><li><p><code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 情况下，<code>ADD</code> 指令将自动解压缩这个文件到 <code>&lt;目标路径&gt;</code></p></li><li><p><code>&lt;源路径&gt;</code> 是一个 <code>URL</code> 的情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code></p></li></ul><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">55:mygroup</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">bin</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">1</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">10:11</span></span> files* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p><p>使用建议：所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code></p></div><h3 id="cmd-容器启动命令" tabindex="-1"><a class="header-anchor" href="#cmd-容器启动命令"><span>CMD 容器启动命令</span></a></h3><p>作用：指定容器启动时默认执行的命令。可以被 <code>docker run</code> 命令中的命令行参数覆盖。</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数</li></ul><blockquote><p>推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号<code>&quot;</code>，而不要使用单引号。</p></blockquote><p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token variable">$HOME</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际执行中，会将其变更为：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;echo $HOME&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="entrypoint-入口点" tabindex="-1"><a class="header-anchor" href="#entrypoint-入口点"><span>ENTRYPOINT 入口点</span></a></h3><p><code>ENTRYPOINT</code> 的指令格式和 <code>RUN</code> 一样，即<code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的作用和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code> 有什么好处？</p><p><strong>场景1：让镜像变成像命令一样使用</strong></p><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;curl&quot;</span>, <span class="token string">&quot;-s&quot;</span>, <span class="token string">&quot;http://myip.ipip.net&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如使用 <code>docker build -t myip .</code> 来构建镜像的话，如果需要查询当前公网 IP，只需要执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip
当前 IP：61.148.226.66 来自：北京市 联通
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但命令总会有一些参数，从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，现在如果希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数，此时若直接加上<code>-i</code>参数给<code>docker run myip</code>会报错：提示可执行文件找不到</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip <span class="token parameter variable">-i</span>
docker: Error response from daemon: invalid header field value <span class="token string">&quot;oci runtime error: container_linux.go:247: starting container process caused <span class="token entity" title="\\&quot;">\\&quot;</span>exec: <span class="token entity" title="\\\\">\\\\</span><span class="token entity" title="\\&quot;">\\&quot;</span>-i<span class="token entity" title="\\\\">\\\\</span><span class="token entity" title="\\&quot;">\\&quot;</span>: executable file not found in <span class="token environment constant">$PATH</span><span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s http://myip.ipip.net</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p><p>如果希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip <span class="token function">curl</span> <span class="token parameter variable">-s</span> http://myip.ipip.net <span class="token parameter variable">-i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;curl&quot;</span>, <span class="token string">&quot;-s&quot;</span>, <span class="token string">&quot;http://myip.ipip.net&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再次使用<code>docker run myip -i</code>就没有问题了，因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果</p><p><strong>场景2：应用运行前的准备工作</strong></p><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p><p>比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p><p>此外，可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 <code>root</code> 身份执行，方便调试等。</p><p>这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> alpine:3.4</span>
...
<span class="token instruction"><span class="token keyword">RUN</span> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span>
...
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;docker-entrypoint.sh&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 6379</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code> 脚本。</p><h3 id="env-环境变量" tabindex="-1"><a class="header-anchor" href="#env-环境变量"><span>ENV 环境变量</span></a></h3><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>作用：设置环境变量，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> VERSION=1.0 DEBUG=on <span class="token operator">\\</span>
    NAME=<span class="token string">&quot;Happy Feet&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code> 中，就有类似这样的代码：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> NODE_VERSION 7.2.0</span>

<span class="token instruction"><span class="token keyword">RUN</span> curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <span class="token operator">\\</span>
  &amp;&amp; grep <span class="token string">&quot; node-v$NODE_VERSION-linux-x64.tar.xz\\$&quot;</span> SHASUMS256.txt | sha256sum -c - <span class="token operator">\\</span>
  &amp;&amp; tar -xJf <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> -C /usr/local --strip-components=1 <span class="token operator">\\</span>
  &amp;&amp; rm <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> SHASUMS256.txt.asc SHASUMS256.txt <span class="token operator">\\</span>
  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 <code>7.2.0</code> 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>FROM</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>、<code>RUN</code>。</p><h3 id="arg-构建参数" tabindex="-1"><a class="header-anchor" href="#arg-构建参数"><span>ARG 构建参数</span></a></h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p><code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p><code>ARG</code> 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">\${DOCKER_USERNAME}</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">\${DOCKER_USERNAME}</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上述 Dockerfile 会发现无法输出 <code>\${DOCKER_USERNAME}</code> 变量的值，要想正常输出，必须在 <code>FROM</code> 之后再次指定 <code>ARG</code></p><p>对于多阶段构建，尤其要注意这个问题</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 这个变量在每个 FROM 中都生效</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">\${DOCKER_USERNAME}</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo 1</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">\${DOCKER_USERNAME}</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述 Dockerfile 两个 <code>FROM</code> 指令都可以使用 <code>\${DOCKER_USERNAME}</code></p><p>对于在各个阶段中使用的变量都必须在每个阶段分别指定：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">\${DOCKER_USERNAME}</span>/alpine</span>

<span class="token comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">\${DOCKER_USERNAME}</span></span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">\${DOCKER_USERNAME}</span>/alpine</span>

<span class="token comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">\${DOCKER_USERNAME}</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="volume-匿名卷" tabindex="-1"><a class="header-anchor" href="#volume-匿名卷"><span>VOLUME 匿名卷</span></a></h3><p>格式：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>作用：事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">VOLUME</span> /data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>/data</code> 目录就会在容器运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行容器时可以覆盖这个挂载设置。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> mydata:/data xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行命令中，使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><h3 id="expose-暴露端口" tabindex="-1"><a class="header-anchor" href="#expose-暴露端口"><span>EXPOSE 暴露端口</span></a></h3><p>格式：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p>声明容器在运行时监听的端口。这只是文档说明，并不实际开放端口。</p><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><p>这样做的好处是：</p><ol><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</li><li>在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口</li></ol><h3 id="workdir-工作目录" tabindex="-1"><a class="header-anchor" href="#workdir-工作目录"><span>WORKDIR 工作目录</span></a></h3><p>格式：<code>WORKDIR &lt;工作目录路径&gt;</code></p><p>作用：指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。声明之后，后续的 <code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>, <code>COPY</code>, 和 <code>ADD</code> 指令都会在该目录下执行。</p><blockquote><p>由于Dockerfile构建是分层存储的，如果需要改变以后各层的工作目录的位置，那么应该再次使用 <code>WORKDIR</code> 指令。</p></blockquote><p>如果你的 <code>WORKDIR</code> 指令使用的相对路径，那么所切换的路径与之前的 <code>WORKDIR</code> 有关：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">WORKDIR</span> /a</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> b</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> c</span>

<span class="token instruction"><span class="token keyword">RUN</span> pwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="user-当前用户" tabindex="-1"><a class="header-anchor" href="#user-当前用户"><span>USER 当前用户</span></a></h3><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</p><blockquote><p><code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p></blockquote><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token instruction"><span class="token keyword">USER</span> redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> [ <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu" target="_blank" rel="noopener noreferrer"><code>gosu</code></a>。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span>
<span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token comment"># 下载 gosu</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O /usr/local/bin/gosu <span class="token string">&quot;https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64&quot;</span> <span class="token operator">\\</span>
    &amp;&amp; chmod +x /usr/local/bin/gosu <span class="token operator">\\</span>
    &amp;&amp; gosu nobody true</span>
<span class="token comment"># 设置 CMD，并以另外的用户执行</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;exec&quot;</span>, <span class="token string">&quot;gosu&quot;</span>, <span class="token string">&quot;redis&quot;</span>, <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="healthcheck-健康检查" tabindex="-1"><a class="header-anchor" href="#healthcheck-健康检查"><span>HEALTHCHECK 健康检查</span></a></h3><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p>作用：告诉 Docker 应该如何进行判断容器的状态是否正常。</p><p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p><p><code>HEALTHCHECK</code> 支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul><p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">5s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token operator">\\</span>
  <span class="token keyword">CMD</span> curl -fs http://localhost/ || exit 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 <code>curl -fs http://localhost/ || exit 1</code> 作为健康检查命令。</p><h3 id="onbuild-辅助构建其它镜像" tabindex="-1"><a class="header-anchor" href="#onbuild-辅助构建其它镜像"><span>ONBUILD 辅助构建其它镜像</span></a></h3><p><code>ONBUILD</code> 允许在基础镜像中设置触发器，以便其它镜像在使用该镜像构建新镜像时自动执行特定的命令。</p><p>使用场景：</p><ul><li><strong>基础镜像</strong>：当你希望其他镜像基于你的镜像进行构建时，<code>ONBUILD</code> 可以帮助预先定义构建过程。</li><li><strong>多阶段构建</strong>：在某些情况下，可以通过使用 <code>ONBUILD</code> 指令简化构建过程，尤其是当多个镜像需要执行相似的步骤时。</li></ul><p>格式：<code>ONBUILD &lt;COMMAND&gt;</code></p><hr><p>基础镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像 Dockerfile</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:20.04</span>

<span class="token comment"># 安装一些常用工具</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y python3 python3-pip</span>

<span class="token comment"># 使用 ONBUILD 指令，任何使用此镜像的镜像都会执行此命令</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> pip3 install -r /app/requirements.txt</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">COPY</span> . /app</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新镜像</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 应用程序 Dockerfile</span>
<span class="token instruction"><span class="token keyword">FROM</span> your_base_image</span>

<span class="token comment"># 其他自定义步骤可以在这里添加</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python3&quot;</span>, <span class="token string">&quot;/app/main.py&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建过程：</p><ul><li>当构建基础镜像时，<code>ONBUILD</code> 指令不会立即执行。</li><li>当基于这个基础镜像构建新的镜像时，<code>ONBUILD</code> 指令会被自动执行。这意味着在构建新镜像时，<code>pip3 install</code> 和 <code>COPY</code> 命令会被运行。</li></ul><blockquote><p>可以有多个 <code>ONBUILD</code> 指令，它们会按照出现的顺序依次执行。</p></blockquote><h3 id="label-元数据" tabindex="-1"><a class="header-anchor" href="#label-元数据"><span>LABEL 元数据</span></a></h3><p>作用：为镜像添加元数据。元数据以键值对的形式存储，可以包含有关镜像的各种信息，例如作者、版本、描述等。这些信息在镜像构建完成后可以用于识别和管理镜像。</p><p>语法：<code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code>多个标签可以在同一行中定义，使用空格分隔。</p><p>案例：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:20.04</span>

<span class="token comment"># 使用 LABEL 添加元数据</span>
<span class="token instruction"><span class="token keyword">LABEL</span> <span class="token operator">\\</span>
    maintainer=<span class="token string">&quot;yourname@example.com&quot;</span> <span class="token operator">\\</span>
    version=<span class="token string">&quot;1.0&quot;</span> <span class="token operator">\\</span>
    description=<span class="token string">&quot;This is a sample application image.&quot;</span> <span class="token operator">\\</span>
    homepage=<span class="token string">&quot;https://example.com&quot;</span></span>

<span class="token comment"># 安装应用</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y python3</span>

<span class="token comment"># 其他 Dockerfile 指令...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>镜像构建完成后，可以使用 <code>docker inspect</code> 命令查看镜像的元数据，包括 <code>LABEL</code> 信息：<code>docker inspect 镜像名称</code></p><blockquote><ul><li><p>标签的键值对可以使用 UTF-8 编码。</p></li><li><p><code>LABEL</code> 指令只会在镜像构建时添加元数据，不会影响镜像的运行时行为。</p></li></ul></blockquote><h3 id="shell-指令" tabindex="-1"><a class="header-anchor" href="#shell-指令"><span>SHELL 指令</span></a></h3><p>作用：指定在 Dockerfile 中<code>RUN</code> <code>ENTRYPOINT</code> <code>CMD</code>执行命令时使用的默认 shell。 默认情况下，Docker 使用 <code>/bin/sh -c</code> 来运行命令，但可以通过 <code>SHELL</code> 指令更改为其他 shell，例如 Bash。</p><p>格式：<code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></p><p>案例：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span>

<span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-cex&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个 <code>RUN</code> 运行同一命令，第二个 <code>RUN</code> 运行的命令会打印出每条命令并当遇到错误时退出。</p><blockquote><ul><li>使用 <code>SHELL</code> 指令后，所有后续的 <code>RUN</code> 指令都会使用指定的 shell。</li><li><code>SHELL</code>指令能够多次使用，后续的 <code>SHELL</code> 指令会覆盖之前的设置</li><li><code>SHELL</code> 指令的影响仅限于构建阶段，不会影响容器运行时的 shell 环境</li></ul></blockquote><h2 id="多阶段构建" tabindex="-1"><a class="header-anchor" href="#多阶段构建"><span>多阶段构建</span></a></h2><p>多阶段构建允许在单个 Dockerfile 中定义多个阶段，以便更有效地构建轻量级的最终镜像。</p><p>优点：</p><ul><li>减少镜像大小：只将需要的文件和依赖项复制到最终镜像，避免将构建工具和不必要的文件包含在内。</li><li>提高安全性：通过最小化最终镜像中的内容，减少潜在的攻击面。</li><li>优化构建过程：可以在不同的阶段中使用不同的基础镜像和工具，灵活性更高。</li></ul><p>语法：</p><p>在 Dockerfile 中，使用 <code>FROM</code> 指令定义多个阶段。通过为每个 <code>FROM</code> 指令指定一个名称来引用不同的阶段。</p><p>案例：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 第一阶段：构建应用</span>
<span class="token instruction"><span class="token keyword">FROM</span> golang:1.19 <span class="token keyword">AS</span> builder</span>
<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token comment"># 复制 go.mod 和 go.sum</span>
<span class="token instruction"><span class="token keyword">COPY</span> go.mod go.sum ./</span>
<span class="token comment"># 下载依赖</span>
<span class="token instruction"><span class="token keyword">RUN</span> go mod download</span>
<span class="token comment"># 复制源代码</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token comment"># 编译应用</span>
<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -o myapp .</span>
<span class="token comment"># 第二阶段：创建最终镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest</span>
<span class="token comment"># 复制构建阶段的可执行文件到最终镜像</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/myapp /usr/local/bin/myapp</span>
<span class="token comment"># 设置容器启动命令</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;myapp&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>AS</code>和<code>--from</code></strong></p><ul><li>使用 <code>AS</code> 为构建阶段指定一个名称（如 <code>builder</code>），后续可以通过 <code>COPY --from=builder</code> 来引用该阶段的文件。</li><li>可以定义任意数量的构建阶段，每个阶段都可以使用不同的基础镜像和命令。</li></ul><p><strong>只构建某个阶段的镜像</strong></p><p>当我们只想构建 <code>builder</code> 阶段的镜像时，增加 <code>--target=builder</code> 参数即可：</p><p><code>$ docker build --target builder -t username/imagename:tag .</code></p><h2 id="构建java项目示例" tabindex="-1"><a class="header-anchor" href="#构建java项目示例"><span>构建Java项目示例</span></a></h2><h3 id="基于ubuntu构建java项目" tabindex="-1"><a class="header-anchor" href="#基于ubuntu构建java项目"><span>基于Ubuntu构建Java项目</span></a></h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li>步骤1：新建一个空文件夹docker-demo</li><li>步骤2：拷贝docker-demo.jar文件到docker-demo这个目录</li><li>步骤3：拷贝jdk8.tar.gz文件到docker-demo这个目录</li><li>步骤4：拷贝Dockerfile到docker-demo这个目录<br> Dockerfile中的内容如下：</li></ul><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>

<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>步骤5：进入docker-demo<br> 将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</li><li>步骤6：运行命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后访问 http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</p><h3 id="基于java8构建java项目" tabindex="-1"><a class="header-anchor" href="#基于java8构建java项目"><span>基于java8构建Java项目</span></a></h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，都可以在一些安装了部分软件的基础镜像上做改造。<br> 例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。<br> 需求：基于java:8-alpine镜像，将一个Java项目构建为镜像<br> 实现思路如下：</p><ol><li>新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</li><li>拷贝docker-demo.jar到这个目录中</li><li>编写Dockerfile文件： <ul><li>基于java:8-alpine作为基础镜像</li><li>设定时区</li><li>将app.jar拷贝到镜像中</li><li>暴露端口</li><li>编写入口ENTRYPOINT</li></ul></li></ol><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token comment"># 设定时区</span>
<span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span>
<span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用<code>docker build</code>命令构建镜像</li><li>使用<code>docker run</code>创建容器并运行</li></ol><p><strong>总结</strong></p><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li></ol><h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker-Compose</span></a></h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>
 <span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
     <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span> 
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;8090:8090&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/compose-file/</a><br> 其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。<br><strong>语法</strong><br><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener noreferrer">Compose file version 3 reference</a><br><strong>命令</strong><br><a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noopener noreferrer">Overview of docker compose CLI</a><br> 基本语法如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker compose [OPTIONS] [COMMAND]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td></td><td>-p</td><td>指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有service容器</td></tr><tr><td></td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td></td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td></td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td></td><td>stop</td><td>停止容器</td></tr><tr><td></td><td>start</td><td>启动容器</td></tr><tr><td></td><td>restart</td><td>重启容器</td></tr><tr><td></td><td>top</td><td>查看运行的进程</td></tr><tr><td></td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><h1 id="docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#docker镜像仓库"><span>Docker镜像仓库</span></a></h1><h2 id="搭建私有镜像仓库" tabindex="-1"><a class="header-anchor" href="#搭建私有镜像仓库"><span>搭建私有镜像仓库</span></a></h2><p>参考课前资料《CentOS7安装Docker.md》</p><h2 id="推送、拉取镜像" tabindex="-1"><a class="header-anchor" href="#推送、拉取镜像"><span>推送、拉取镜像</span></a></h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag nginx:latest <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 推送镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③ 拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,450),t=[i];function d(o,c){return a(),n("div",null,t)}const u=e(l,[["render",d],["__file","core.html.vue"]]),k=JSON.parse('{"path":"/frame/docker/core.html","title":"基础篇","lang":"zh-CN","frontmatter":{"title":"基础篇","shortTitle":"基础篇","description":null,"date":"2024-06-16T22:11:18.000Z","categories":["容器"],"tags":["Docker"]},"headers":[{"level":2,"title":"什么是Docker","slug":"什么是docker","link":"#什么是docker","children":[{"level":3,"title":"应用部署的环境问题","slug":"应用部署的环境问题","link":"#应用部署的环境问题","children":[]},{"level":3,"title":"Docker解决依赖兼容问题","slug":"docker解决依赖兼容问题","link":"#docker解决依赖兼容问题","children":[]},{"level":3,"title":"Docker解决OS环境差异","slug":"docker解决os环境差异","link":"#docker解决os环境差异","children":[]}]},{"level":2,"title":"Docker和虚拟机","slug":"docker和虚拟机","link":"#docker和虚拟机","children":[]},{"level":2,"title":"Docker架构","slug":"docker架构","link":"#docker架构","children":[{"level":3,"title":"镜像与容器","slug":"镜像与容器","link":"#镜像与容器","children":[]},{"level":3,"title":"DockerHub","slug":"dockerhub","link":"#dockerhub","children":[]},{"level":3,"title":"Docker架构","slug":"docker架构-1","link":"#docker架构-1","children":[]}]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[{"level":3,"title":"命令别名","slug":"命令别名","link":"#命令别名","children":[]}]},{"level":2,"title":"镜像操作","slug":"镜像操作","link":"#镜像操作","children":[{"level":3,"title":"镜像名称","slug":"镜像名称","link":"#镜像名称","children":[]},{"level":3,"title":"镜像命令","slug":"镜像命令","link":"#镜像命令","children":[]},{"level":3,"title":"删除镜像","slug":"删除镜像","link":"#删除镜像","children":[]}]},{"level":2,"title":"容器操作","slug":"容器操作","link":"#容器操作","children":[{"level":3,"title":"容器相关命令","slug":"容器相关命令","link":"#容器相关命令","children":[]},{"level":3,"title":"导入和导出","slug":"导入和导出","link":"#导入和导出","children":[]},{"level":3,"title":"案例-创建并运行一个容器","slug":"案例-创建并运行一个容器","link":"#案例-创建并运行一个容器","children":[]},{"level":3,"title":"案例-进入容器，修改文件","slug":"案例-进入容器-修改文件","link":"#案例-进入容器-修改文件","children":[]}]},{"level":2,"title":"数据卷（容器数据管理）","slug":"数据卷-容器数据管理","link":"#数据卷-容器数据管理","children":[{"level":3,"title":"什么是数据卷","slug":"什么是数据卷","link":"#什么是数据卷","children":[]},{"level":3,"title":"数据卷命令一览","slug":"数据卷命令一览","link":"#数据卷命令一览","children":[]},{"level":3,"title":"数据集操作命令","slug":"数据集操作命令","link":"#数据集操作命令","children":[]},{"level":3,"title":"创建和查看数据卷","slug":"创建和查看数据卷","link":"#创建和查看数据卷","children":[]},{"level":3,"title":"挂载数据卷","slug":"挂载数据卷","link":"#挂载数据卷","children":[]},{"level":3,"title":"案例-给nginx挂载数据卷","slug":"案例-给nginx挂载数据卷","link":"#案例-给nginx挂载数据卷","children":[]},{"level":3,"title":"案例-给MySQL挂载本地目录","slug":"案例-给mysql挂载本地目录","link":"#案例-给mysql挂载本地目录","children":[]}]},{"level":2,"title":"镜像结构","slug":"镜像结构","link":"#镜像结构","children":[]},{"level":2,"title":"Dockerfile语法","slug":"dockerfile语法","link":"#dockerfile语法","children":[{"level":3,"title":"COPY 复制文件","slug":"copy-复制文件","link":"#copy-复制文件","children":[]},{"level":3,"title":"ADD 增强的复制文件","slug":"add-增强的复制文件","link":"#add-增强的复制文件","children":[]},{"level":3,"title":"CMD 容器启动命令","slug":"cmd-容器启动命令","link":"#cmd-容器启动命令","children":[]},{"level":3,"title":"ENTRYPOINT 入口点","slug":"entrypoint-入口点","link":"#entrypoint-入口点","children":[]},{"level":3,"title":"ENV 环境变量","slug":"env-环境变量","link":"#env-环境变量","children":[]},{"level":3,"title":"ARG 构建参数","slug":"arg-构建参数","link":"#arg-构建参数","children":[]},{"level":3,"title":"VOLUME 匿名卷","slug":"volume-匿名卷","link":"#volume-匿名卷","children":[]},{"level":3,"title":"EXPOSE 暴露端口","slug":"expose-暴露端口","link":"#expose-暴露端口","children":[]},{"level":3,"title":"WORKDIR 工作目录","slug":"workdir-工作目录","link":"#workdir-工作目录","children":[]},{"level":3,"title":"USER 当前用户","slug":"user-当前用户","link":"#user-当前用户","children":[]},{"level":3,"title":"HEALTHCHECK 健康检查","slug":"healthcheck-健康检查","link":"#healthcheck-健康检查","children":[]},{"level":3,"title":"ONBUILD 辅助构建其它镜像","slug":"onbuild-辅助构建其它镜像","link":"#onbuild-辅助构建其它镜像","children":[]},{"level":3,"title":"LABEL 元数据","slug":"label-元数据","link":"#label-元数据","children":[]},{"level":3,"title":"SHELL 指令","slug":"shell-指令","link":"#shell-指令","children":[]}]},{"level":2,"title":"多阶段构建","slug":"多阶段构建","link":"#多阶段构建","children":[]},{"level":2,"title":"构建Java项目示例","slug":"构建java项目示例","link":"#构建java项目示例","children":[{"level":3,"title":"基于Ubuntu构建Java项目","slug":"基于ubuntu构建java项目","link":"#基于ubuntu构建java项目","children":[]},{"level":3,"title":"基于java8构建Java项目","slug":"基于java8构建java项目","link":"#基于java8构建java项目","children":[]}]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"搭建私有镜像仓库","slug":"搭建私有镜像仓库","link":"#搭建私有镜像仓库","children":[]},{"level":2,"title":"推送、拉取镜像","slug":"推送、拉取镜像","link":"#推送、拉取镜像","children":[]}],"git":{"createdTime":1718621104000,"updatedTime":1739108242000,"contributors":[{"name":"Zhiyun Qin","email":"96156298+Okita1027@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":46.32,"words":13896},"filePathRelative":"frame/docker/core.md","localizedDate":"2024年6月17日"}');export{u as comp,k as data};
